[    {
    "title": "js-party-200.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/jsparty/js-party-200.md",
    "transcript": "Jerod Santo: Hey there. Jerod here, your internet friend. Today we have a very special episode. It's the big number 200. Can you believe we've made 200 of these suckers? I guess time flies when you're throwing weekly parties to celebrate JavaScript and the web\nOn this episode we're going to take a moment to celebrate the party itself. We're calling it Best of the Fest, and this is vol. 1. Last week I put out a call to JS Party listeners and panelists to send in their favorite moments from the pod. You could write in, or even cooler, you could record your voice and send that in to be played on the episode. Many of you wrote in, which is awesome, but only one brave listener took the time to record their message and send it to us. Well, fortune favors the brave, so here is listener Brian kicking off Best of the Fest. Take it away, Brian!\nBrian Zelip: Hey, this is Brian Zelip in Baltimore, Maryland. Congratulations on making it to 200 episodes. I've been listening to JS Party since it's release. I've been loving The Changelog since at least 2014. I remember spinning up a couple servers on DigitalOcean back then for free using the Changelog discount, and it really felt like I was getting over... Like, \"What's to stop me from using this discount over and over and over again?\"\nAs a web developer with a day job, JS Party and The Changelog family in general have really helped keep me in the loop over all these years, providing guidance and pointers, and especially language to use when talking with others.\nIn looking over the past 100 shows, the first one that really jumped out at me was the functional programming show, #163, with Eric Normand. That was a great show. I understood it and got a lot out of it. It really resonated with me. I got his book afterwards using the Changelog discount as well, and it's been great to dig a bit deeper into functional programming patterns using JavaScript.\nAs an extra bonus though, I have to give a shout-out to the music underneath and in between the podcasts. I just simply love what I call the Zelda trap jazz of Breakmaster Cylinder. And I love its variations into like island vibes, dance, and especially vapor vibes. I'm a big fan. Really looking forward to the Changelog feature on Breakmaster Cylinder. Thanks for everything, y'all. Cheers.\nJerod Santo: And thank you, Brian, for sending that in, and for listening to us so faithfully over all these years. 2014 - that goes quite a ways back. I love how you described Breakmaster Cylinder's music, \"the Zelda trap jazz.\" You definitely get it. In fact, many of our tracks are inspired by the 8 and 16-bit video games of our youth. We'll often ask BMC things like \"Hey, give us a Donkey Kong theme to transition\", or we'll hop into the Slack channel and do an all-caps \"MORE METROID VIBES!\"\nHere's a track we use... It's called Zegend of Lelda. Anybody who's familiar with the Zelda franchise will immediately spot the influence.\nZelda track: [04:22] to [04:42]\nJerod Santo: I am also with you on your episode selection. Our interview with Eric Normand on functional programming is definitely a highlight from our catalog. Here is a great moment from that episode. It's Eric Normand describing functional programming and how to think functionally in a language that developers can easily understand.\nEric Normand: Functional programming is like an onion, so you can go real deep… And there’s some people who go super-deep. But that first layer, that first gateway into the onion… [laughs] I started mixing metaphors…\nJerod Santo: It’s like the Onion routing; it’s like a Tor network kind of a thing.\nEric Normand: Yeah. I imagine it like – have you ever seen the original show Get Smart, the intro, where he has 30 different doors he walks through…?\nJerod Santo: Yeah, and then he holds up his shoe to his ear and talks into it.\nEric Normand: Yeah. He has a cell phone in his shoe. Yeah, but you go through all these doors, and you get deeper and deeper into the sanctum of functional programming. Well, that first door is just recognizing the difference between what I call actions, calculations and data.\nCalculations are often known as pure functions. They’re the stuff you can do in your language that always gives you the same answer, no matter how many times you run them, or when you run them. So this is like addition. 2+2 is always 4, it doesn’t matter how many times you run that. But then there’s actions that do depend on when you run them or how many times you run them. So reading from an immutable variable - if you read after someone has written to it, you’re gonna get a different answer than reading before the other part of the code writes to it. Likewise sending an email, or writing something to disk - these are all actions, because sending the email zero times is different from sending it one time, or ten times.\nAnd so making this distinction between actions that depend on time - because they’re hard to deal with - and calculations is like the first gateway into functional programming. Oh, and data is easy. Data is just the stuff that doesn’t do anything; it’s just inert. The strings, and numbers, and HashMaps, and lists, stuff like that.\nKevin Ball: I like how simple your language is there… Because I feel like one of the barriers to a lot of folks getting into FP is it feels like there’s a lot of jargon. And you start talking with somebody and you’re like “I just wanna send an email”, and before you know it, they’re talking about monads, and you’re like “What in the world is all of this…?!”\nEric Normand: [laughs] Yeah… I think that - you know, and I speak for functional programming as a community - we have over-complicated it. Functional programming has been incubated in Academia, and you don’t get tenure by making stuff easy. [laughter] You have to find a hard problem and solve it in some weird way, a novel way…\nJerod Santo: Right.\nEric Normand: And you don’t show credibility by just talking about basics. You have to use the jargon and show that you’re one of the club, and you understand this, you’ve earned your Ph.D. by learning all these obscure terms. So that’s a shame for the rest of the industry, for the non-academic side, that we don’t have a lot of good literature that has taken the time to like “Let me just shed all that academic stuff, and start over, and talk like real people, without all the jargon.”\nJerod Santo: [08:05] That clip is just the beginning of a truly great conversation. Even Kball and I, who have been exposed to epic concepts for many years, had some a-ha moments during it. If you want to hear more, it's episode 163. It's called \"JS is an occasionally functional language.\"\nOkay, up next we have a message from listener Heady Glee who says:\n\"Hi. I really, really loved the JS Danger episodes where Emma was the host. It was really funny. I was able to work through the questions with you guys and I could test my JS/Web knowledge together.\"\nWell, Heady, as the now permanent host of JS Danger, I choose not to be offended by how much you like it specifically when Emma hosts. Just kidding... Emma is absolutely hilarious. JavaScript Jeopardy was her idea, and she was the host of our very first time playing the game.\nEmma Bostian: This defines the element or elements to which a set of CSS rules apply.\nKevin Ball: What is a selector?\nEmma Bostian: That is correct! Finally, selector is in the answer! That brings you up to 7,000. Alright, go for it, Jake.\nJake Dohm: Okay, I'll take JS Frameworks for 200.\nEmma Bostian: I somehow knew you were going there... I hope you get this one right. This library was developed by Facebook in 2013, and is still the most popular JavaScript library.\nJake Dohm: What is React?\nEmma Bostian: That is absolutely correct.\nKevin Ball: Popular by what dimension? I think jQuery is still...\nJake Dohm: Ooh...!\nEmma Bostian: Oh, we're not doing this right now... [laughter]\nKevin Ball: No, I think it is the most popular among current developers, it's just the long legacy --\nEmma Bostian: Yeah, I don't mean popular in terms of usage necessarily, I mean in terms of likability.\nKevin Ball: Ooh, likability... Now, there - I don't know if React is gonna win on that, but... Usefulness, or usability, being used... I don't know. I've happened to use React recently, and I'm telling you, it's making Vue look better every day.\nEmma Bostian: Yeah, it is... Alright, Jake, we've got -- oh, wait, Kball, we've got two categories left. Do you want JavaScript Again, or Even More JavaScript?\nKevin Ball: Well, let's go with even more JavaScript then.\nEmma Bostian: [laughs] Let's do it. Your last question - This method tells the user agent that if the event does not explicitly get handled, its default action should not be taken as it normally would be.\nKevin Ball: What is prevent default?\nEmma Bostian: That is correct. Prevent default. I don't know if it's default or default... I never know how to pronounce it. Okay, Jake, take it home, JavaScript Again, for 200. So - this is the very last question before we get to the super-final round, which is literally just one question. Okay, JavaScript Again, for 200.\nJake Dohm: Alright.\nEmma Bostian: This data type holds key-value pairs and remembers the original insertion order of the keys.\nJake Dohm: What is an object?\nEmma Bostian: No... Kball, you look like you know it.\nKevin Ball: I wanna go with \"What is a map?\"\nEmma Bostian: That is correct.\nJake Dohm: Oh, a map... There you go.\nEmma Bostian: That is correct. So --\nKevin Ball: It's that insertion order thing...\nJake Dohm: I was like, \"It can't be that again...\" Yeah, yeah. That's a good steal.\nJerod Santo: Speaking of episode #112, we have another listener who wrote in about it, saying \"Petruso Keterov here. My favorite moment was in the JS Jeopardy episode #112, more specifically the TCP/IP question. I was working on a college assignment on the OSI model while listening to the episode, and like Chris, my first guess was the OSI model. I guess \"conceptual model\" really threw me a curveball.\"\nKevin Ball: Let's go with The Web for 500.\nEmma Bostian: The Web for 500. You guys are just diving right in. \"This is a conceptual model, and is a set of communication protocols used in the internet and similar computer networks.\"\nKevin Ball: Can you repeat the question?\nEmma Bostian: Absolutely. \"This is a conceptual model, and is a set of communication protocols used in the internet and similar computer networks.\"\nKevin Ball: It's a conceptual model... Interesting. Huh.\nJake Dohm: [12:08] Doo-doo-doo-doo...\nKevin Ball: Yeah, I know...\nEmma Bostian: Five more seconds! Take a guess!\nKevin Ball: I'm gonna say \"What is HTTP?\", but I don't think that's right, because that's not the conceptual model...\nEmma Bostian: Wrong...\nJake Dohm: Oh, no...\nEmma Bostian: I think you let that term throw you off. Unfortunately, that is incorrect, so it moves on to Chris. Chris, would you like me to repeat the question?\nChristopher Hiller: What is the OSI model?\nEmma Bostian: That is also incorrect. Oh, no...! Jake, it's up to you.\nJake Dohm: Okay, could you repeat it one more time, so I can not get it?\nEmma Bostian: [laughs] \"This is a conceptual model and is a set of communication protocols used in the internet and similar computer networks.\" Why don't you just ignore the words \"conceptual model\". This is a set of communication protocols used on the internet and similar computer networks.\nJake Dohm: I'm so bad at this type of thing...\nChristopher Hiller: I call shenanigans...\nJake Dohm: ...communication... Like, I don't know. LAN? What is LAN? [laughter]\nChristopher Hiller: If it's protocol, I would say TCP/IP.\nEmma Bostian: See, that would have been correct.\nJake Dohm: Oh...!!\nChristopher Hiller: But conceptual model - well, there is this model of the network stack, and...\nKevin Ball: Yeah. I was in between TCP/IP and HTTP, but... Whatever. We got it.\nEmma Bostian: Well, hold on to that term for later\nKevin Ball: And why choose TCP instead of like UDP?\nEmma Bostian: Because it was the only one I knew... [laughs] Don't judge me. Alright, well that round nobody got any points, so...\nJerod Santo: That episode was called \"Do you want JavaScript Again, or More JavaScript?\" You can tell we weren't taking it too seriously back then. No sound effects, no official scoreboard... But once we decided to play the game more often, we came up with the name JS Danger, so as to avoid any copyright claims by the fine folks at America's favorite game show.\nThe first JS Danger party was episode #123, which Heady Lee also wrote in about saying \"I also love that time where at the time of one of the JS Danger episodes contestants had to wager some points for the final question, and at some point Emma was like \"Hey, is this in Euros?\" LMAO.\nJerod Santo: This open source JavaScript database was created to help web developers build applications that work as well offline as they do online.\nOne more time - this is the question for Final Trouble, Offline First: This open source JavaScript database was created to help web developers build applications that work as well offline as they do online. Please submit to me your answers.\nScott Tolinski: I've got two of them, going back and forth...\nJerod Santo: We are waiting for Emma...\nEmma Bostian: I have no idea... [laughs]\nJerod Santo: Okay, all the answers are in. The wagers are tallied; the math makes no sense... But we're doing this thing. With a wager of 101.895 Euros...\nEmma Bostian: No, that was 101,895...\nJerod Santo: Oh, you use a decimal point as a separator.\nEmma Bostian: Yeah, that's what they use in Europe.\nJerod Santo: Gosh, okay... [laughter]\nScott Tolinski: Oh, gosh...\nJerod Santo: Emma’s answer - what is Elastic Search? [correct sound] [fail sound] [fail sound] I hit the wrong button. [laughter] Too much pressure. That answer is wrong, and that point total is ridiculous. You now have negative infinity points.\nUp next, special guest Scott Tolinski wagered 100% of his points, so 1,400 points on the line, and he says “I’m wagering whatever makes me beat Emma.”\nScott Tolinski: I don't wanna get last place... [laughs]\nJerod Santo: His answer, \"What is CouchDB?\" [fail sound] was a valiant guess. And so he ends up his game at zero, or -2,800, depending on how you do math... But way better than negative infinity... Which means Nick Nisi, who wagered 2,700 - is this all your points, Nick?\nNick Nisi: [16:12] It is. I should have done one less.\nJerod Santo: ...answered \"What is Firebase.\" [fail sound] Answer fail, and wager fail, because you could have left money on the table and gotten first place, but now you've tied with Scott, in the most ridiculous game of JS Danger in human history.\nThe correct answer, of course - Scott was off literally by one letter... The correct answer the open source database us called PouchDB.\nScott Tolinski: What?!\nJerod Santo: Inspired by CouchDB, PouchDB aims to help web developers build applications that work as well offline as they do online. Well, this has been something else.\nEmma Bostian: Enlightening... Enlightening...\nScott Tolinski: Yeah.\nJerod Santo: We hope you enjoyed it. We had a lot of fun for this edition of JS Danger game. Remember, here at JS Party, Danger is our middle name.\nBreak: [17:12]\nKevin Ball: Hey there. This is Kball, and my absolute favorite moment in the past hundred episodes of JS Party was during an Explain It Like I'm Five segment. I had just gone and done what I thought was a pretty good job of Explaining Web Assembly Like I'm Five, and Nick Nisi busts out this amazing five-minute-long story where he was mapping React hooks to the stories of Moana, and mixing in a little bit of Coco and these other animated films... And he just did this incredible job, and completely blew my explanation out of the water... But also, our jaws were on the floor listening to him. Definitely worth a listen through the entire thing.\nNick Nisi: Once upon a time there was a community of JavaScript developers that lived on an island. I’m tying in Moana right now, in case you need to know… [laughter]\nJerod Santo: Thank you for the reference.\nKevin Ball: Oh, good, I know that one.\nNick Nisi: Spoilers for Moana, by the way... This was a very special island, full of proud people, who braved the waters of the JavaScript language, and even forged their own destiny by creating an add-on to the language called JSX. Now, over the years they moved on from a functional, class-like way of JavaScript and started to develop an elegant way to survive, and built a way to develop applications using component-based classes… Because JavaScript got classes.\nNow, the chief developer learned the class-based way of her people, and she was very excited about that, but she always wondered if there was something more to the language that might be able to come in and play a role later on in our story.\nJerod Santo: Is this usually where she sings a song?\nNick Nisi: It is, yeah. I can do that, but I’ll get us demonetized again. [laughter]\nKevin Ball: I think if you sing it it’s fine, right?\nNick Nisi: I guess… But you don’t want that.\nJerod Santo: You might get us banned.\nNick Nisi: [20:03] Yeah. [laughs] So she thought of the class-based approach to what they were doing was just too verbose, and she constantly pushed for a new way of doing things, but she was shut down because classes are the way of her people, of her development team.\nKevin Ball: And did she know the way?\nNick Nisi: She did because of that; that was all she’d ever done.\nJerod Santo: This is the way.\nNick Nisi: A lonely programmer on the island - think of her grandma Tala, from Moana - showed her a hidden cave that contained JavaScript classes’ true heritage, and she realized that they were once function-based, and they could be again… So she told her lead developer of this revelation, but he simply carried on that state could not be managed in a function, and that her ideas were as whacky as trying to go beyond the reef of their island. Well, that’s exactly what she did. She set off to find the great JavaScript demigod Monad, to restore the state of the function – [laughter] …restore the state of the function and bring efficiency to her dev team.\nNow, upon discovering Monad, he told her of the ways in which functions could not work until they set off to find his missing hook; only then could he restore the state and restore functional components.\nKevin Ball: Wait, you’ve gotta work your welcome in here somehow…\nNick Nisi: Yeah… [laughs] I don’t know how.\nKevin Ball: [singing] I see what’s happening here… You’re face to face with JavaScript, then it’s strange… You don’t even know how to feel… It’s adorable! It’s nice to see that programmers never change… Open your eyes, let’s begin… Yes, it’s really me. It’s Monad. Breath it in… I know it’s a lot, the code, the state… When you’re staring at programming concepts… What can I say, except you’re welcome. Um, let’s see…\nJerod Santo: Thank you so much for that…\nKevin Ball: I’ve lost my – alright, if I’d thought of this ahead of time, I could have ridden this out, but I was trying to do it real-time and I just failed.\nJerod Santo: I disagree one hundred percent. That was not a fail.\nNick Nisi: Yeah, that was amazing.\nJerod Santo: Keep going, Nick.\nNick Nisi: So Monad told her that he needed to find his hook to be able to restore the state in functional components. That developer was curious though. “What is this hook you speak of?” she asked. And this is where I kind of trail into Coco, because that’s another favorite of my daughter’s right now.\nSo Monad says “Imagine that your ancestors are in the afterlife. If you want their memory or their state to live on, you need to put their picture up on the ofrenda, or in this case, call them as a function within your component.” Now, when that happens - what happens to your state in that afterlife? Well, it lives in this magical world of memory; and it can live on in that memory for as long as you keep their picture on your ofrenda. As long as that’s up there, it will be living and it can be accessed by your state component.\nKevin Ball: [singing] Remember me...\nNick Nisi: As soon as you neglect to call it, its state gets cast to the after-afterlife, called the garbage collector. Now, the order of which you put up those pictures really matters, or the order in which you call those functions really matters, because it helps the environment map the correct state to the correct hook call.\nMonad also explained that hooks need to be called every time, and not just conditionally. Not just on Día de Muertos, but every day, every time… And they need to be called by the top-level functional component, and not just inside of some kind of callback.\nNow, Monad continued to explain the basics of useState, useMemo, and useEffect to this developer. And then went on to explain that his hook was unlike any other. It was a custom hook. Now, with this custom hook, Monad could use the underlying functionality of the other hooks to construct the perfect hook to destroy the extremely verbose monster Teh Class, and restore the heart of the function (or the state of the function) to the development team.\nJerod Santo: Teh Class... Are you done?!\nNick Nisi: Almost...\nJerod Santo: [24:06] Okay... Because you stopped like you're waiting for an applause. I feel like we're not quite there yet. Please, continue.\nNick Nisi: [laughs] So Monad’s custom hook could be used to recall the existing application’s state, but it could also be used to have an effect on the world around it, because it could use effects. And he could also listen to the ocean, mouse clicks, page scrolls and other things, and he could establish a plan for when his component was cleaned up or removed, and he could talk to the all-knowing cloud by using fetch.\nNow, as they faced Teh Class in an epic battle, the developer realized that she could make a custom hook, for hooks were just a way to hook into her environment - React in this case - and then combine that with the strength of other hooks, like Monad’s hook, she could vanquish Teh Class to the murky syntactical depths.\nNow, with this new power she returned to her people, and once and for all replaced their class-based components with functional components, supported by the power of hooks, that were within them all along. The end.\nJerod Santo: Quite the story... And it might just be the most Nick has ever talked on an episode. Most shows he just sits quietly until an opportune moment to save Vim or TypeScript. So nice selection, Kball, and you aren't alone on that one. Listener Jarvis says episode #168 was epic. \"Loved the story on hooks.\" But if we're being honest, I'm not so sure any of us walk away from hearing that epic story with a better understanding of React hooks than we brought into it.\nGood thing we had Kent C. Dodds on episode #186, which a few listeners cited as their favorite. Chris Benjamin writes:\n\"I really enjoyed the episode with Kent C. Dodds on July 30th, Getting Hooked On React. The way Kent described hooks made it click.\nKent C. Dodds: When I was first learning React, we didn’t even have classes. It was createClass, and all of that; and I think it was the same for both of you. So coming into Hooks, it took me a little bit of time to be like “Okay, this is kind of interesting.” A little time as in like minutes. Initially, I was like “I’m not sure about this”, then “Oh my gosh, I love this.” And the biggest thing for me was getting rid of class components and shareability of code… Because with class components, we always talk about the separation of concerns and how important that is in maintainable architecture… And one of the things I loved about React was that it embraced the fact that HTML, CSS and JavaScript are part of a single concern. Those aren’t separate concerns. Those are separate technologies when combined, to create a single concern, of your button component, or your accordeon, or whatever it is.\nBut within that individual component there could be multiple concerns in there. One part of it is updating the document title to say how many unread messages you have, and the other one is subscribing to Firebase to get those messages… And it’s spread between these lifecycles. And so with Hooks, I was able to keep those concerns together within the component; and if it was a reusable bit, then it’s just a matter of pulling that out and sticking it into a function. It’s just JavaScript at that point. You’re just moving stuff around, just like you do with JavaScript.\nAnyway, I didn’t have a huge problem with jumping into Hooks, but I know a lot of people switching from classes to hooks was a bit of a big jump. But one of the things that I just wanted to mention too, like some of the hard parts of learning React - I can tell you based on the number of people who are reading my blog posts what are the things people have the most trouble with… [laughs] Because I don’t track Google Analytics on my blog, but I do have Netlify Analytics, and that gets when people land on my blog… And the number one blog post right now over the last month is “How to use React context effectively.” That, Emma, speaks to you… And then useMemo and useCallback are the next. And that one actually has been really popular for years. Yeah, those two are tricky. They’re absolutely tricky.\nEmma Bostian: Yeah.\nKent C. Dodds: [28:02] And then I’ve got a couple of things about testing… And state management is another thing that people struggle with quite a bit… And then useEffect and useLayoutEffect are pretty big ones, too. So I would say that there are definitely hard parts about learning React, and it’s very possible that it’s harder to learn React than it is to learn other frameworks… But I just come back again to - I feel like React is simple, and it’s easier to build a simple application with a simple framework than it is to build a simple application with a complicated one.\nNick Nisi: As a side note, I think I probably make up 50% of the traffic on your “Common mistakes with React Testing Library.” [laughter] I think I link to that in almost every pull request that I’m doing.\nEmma Bostian: Yeah. We’re using React Testing Library too, and I’m like “Oh, gotta go see Kent again…”\nNick Nisi: Ahoy-hoy, JS Party. Nick Here... Now, looking back over the last 200 episodes, we really had a lot of fun. In particular, I really enjoyed listening back to that time on episode #126 where Jerod tried to take the unpopular stance that customizing your terminal environment and editor is a waste of time. You know, it's YAGNI... It's time that could be better spent just accepting the mediocrity of the popular editors and environments... I felt it at the time, and I still feel it now, that Jerod wasn't speaking to JS Party; he was speaking to me, disparaging my life's work, my dotfiles which will be handed down to my children, but now they're forever tainted by the comments Jerod made that one time... [laughs]\nIt's all in good fun, and I really enjoyed hearing the regular panelists riff on that topic. And now I just have to ask if Jerod still holds that opinion. How many episodes of The Changelog has Jerod done on Vim and command line tools since then? Were they pretty popular? Think about it as you listen to this next clip...\nJerod Santo: This is also, I think, probably unpopular, because I've disagreed with it myself in the past, and I might disagree with it by the time we're done talking here. But I do believe it right now, which is that I think most of the time that you spend tweaking, customizing, optimizing your terminal, your editor...\nNick Nisi: Oh, no...\nJerod Santo: ...your tools, most of that is time not well spent.\nDivya: [laughs]\nNick Nisi: [laughs] How can you do this...?\nJerod Santo: I think most of that stuff is YAGNI. I think we spend six hours to save 60 seconds, and I think we yakshave far too much.\nNick Nisi: You never know if you're gonna do that 60 seconds again sometime... [laughter]\nJerod Santo: I think I've hit an unpopular cord here, because everyone just kind of sat there and laughed, and was shocked...\nAnd there's an old Japanese proverb that says \"Don't feed the trolls.\" So I will not be justifying Nick's trolling with a response. What I will do however is read another listener favorite. \"Squid here. I've been listening before the '90s. The party that you can always attend, no matter how strict Covid restrictions get. Keep partying.\" Thanks for writing in, Squid. I like your game.\nTo honor JS Party continuing to rock even during Covid restrictions, here's Suz sharing her book recommendations on our \"Working From Home\" episode recorded at the very start of lockdowns.\nSuz Hinton: I’m a bookworm, so I have three books to recommend. The first one is Cal Newport’s Deep Work, which I mentioned before… And the next one is Jenny Odell’s “How To Do Nothing.” Jenny Odell is one of my favorite speakers. She speaks at I/O Festival over the last few years, and she’s an artist and she talks about the fact that the new hustle culture and things like that - it’s just constantly tearing at our personal time, our personal space, our mental well-being… And I think that right now I’m seeing a lot of that chatter on Twitter. It’s like “This is time for your side-project now that you’re quarantined”, and “This is the time to do this and that”, and just not allowing people to ever take a break, because things are crappy. So I think that this book is particularly relevant. It’s very popular and it has really great reviews.\n[32:15] And then also Contact, by Carl Sagan. I’m seeing a lot of parallels in this book, compared to what we’re seeing now… So yes, it’s a science-fiction book, and it has nothing to do with a virus worldwide, but it has to do with worldwide cooperation, the breakdown of barriers between science and religion, as well as just watching different nations try to own different solutions.\nI think that there are just so many themes that we’re seeing, and I think that Carl Sagan kind of thinks about this stuff the right way, and you might actually find it quite comforting to imagine ideologically what would be the greatest way that we could deal with this kind of thing right now.\nSo I think that those three books are particularly relevant. There’s the work, but there’s also “How do you then switch off and just treat yourself nicely, given that this is just quite an unprecedented experience to go through in your lifetime?”\nJerod Santo: Next up, LoganLific writes: \"I busted out laughing during the episode \"We really need new jingles\" when Jerod cracked down on the TIL segment and Mat mentioned that it felt like he was having dinner with Saddam Hussein. The banter on JS Party is a trip.\"\nJerod Santo: Mat, how about yourself? What have you learned today, and/or recently?\nMat Ryer: Yeah. Well, it was today, actually. I think I’m the only one that’s really respected this segment in that way…\nJerod Santo: Yeah, you win.\nMat Ryer: Yeah. I’ll tell you what - I mentioned earlier the APIs now in browsers, and this might be old news to people that do a lot more JavaScript than I do… But there’s a WebAuthn API that lets you use the fingerprint or Face ID stuff in your JavaScript code for authentication, things like this… Which is kind of what you need, isn’t it? It’s what you expect. But you see, when I started doing this, everything was sandboxed so tightly… The world was so different, the JavaScript world was just so different. You didn’t really interact much with the device at all. And increasingly, as they open all these APIs, I think we’re just gonna see more and more powerful things being built… And I kind of love seeing that.\nI remember when I first discovered about local storage, and there’s IndexedDB in the browser… It is kind of amazing to see that… But yeah. So I learned that. That’s what I TIL-ed today, was that you can use fingerprint auth in your JavaScript.\nNick Nisi: That is awesome.\nMat Ryer: You can access sensors as well on the device… GPS coordinates I guess have been around a while… But also things like the battery. So maybe don’t do some things; turn off animations if the user’s battery is low, or something. Be a nice citizen for them. It’s a good one.\nJerod Santo: Absolutely. And the fact that you learned it today means you really respect my authority, you know?\nMat Ryer: Yeah.\nJerod Santo: Which I also appreciate.\nMat Ryer: Yeah. I feel like I'm having dinner with Saddam Hussein, and I'm really nervous about upsetting him. [laughter] I've never had dinner with Saddam Hussein, or any dictator, actually...\nJerod Santo: We need to back that one off...\nKevin Ball: You haven't had dinner with Jerod yet, not to mention any dictator...\nMat Ryer: Yeah. [laughs]\nKevin Ball: That's right, internet acquaintances.\nMat Ryer: Yeah.\nJerod Santo: Remember, I already said hopefully we'll never have dinner; didn't I say that earlier on the show? Hopefully we'll never meet...\nKevin Ball: Jerod is not so bad over dinner... Or lunch I guess is what we shared.\nJerod Santo: We did.\nMat Ryer: What did you have?\nJerod Santo: Lunch. He just told you.\nMat Ryer: Yeah. Well, what specifically?\nJerod Santo: Food.\nMat Ryer: Okay. Thank you.\nJerod Santo: [laughs]\nMat Ryer: See what I mean? I'm nervous now. [laughter] I don't wanna upset the king.\nJerod Santo: [36:04] Logan isn't the only one who liked this episode. Take it away, Kball...\nKevin Ball: Hey, Kball here. Another one of my favorite moments from this last hundred episodes was when we had Mat Ryer from Go Time on as a guest for a segments episode... And Jerod just springs on him \"Hey, we need a jingle for this next segment. Can you make one up?\" And he kind of looked at him for a second, and then just busted out this incredible tune for Story of the Week. I wish I had those types of skills...\nJerod Santo: We like to have jingles for our segments… And you may remember that Nick came up with this excellent jingle for Pro Tip Time. [jingle 00:36:53.25]\nMat Ryer: Brilliant.\nJerod Santo: So we do not have a story of the week jingle, and what you may not know is that Mat Ryer is actually very musically inclined. He plays the guitar; if you’re watching live, you can see some guitars back there. He sings songs, he writes songs… So Mat, if I might just really put you on the spot and challenge you, can you please come up for us a Story of the Week jingle, live, on the spot, without any rehearsal? We appreciate that.\nMat Ryer: But there really is no rehearsal; because you’re saying it like we’ve planned this.\nJerod Santo: I know… But I was gonna set you up to embarrass yourself.\nMat Ryer: Story of the Week.\nJerod Santo: Yeah, Story of the Week.\nMat Ryer: Right, okay. Okay, ready? [live jingle 00:05:12.10] “It’s time to take a peek… It’s time for the Story of the Week.”\nKevin Ball: Damn…\nJerod Santo: That’s actually better than I was expecting, dude. Nice job.\nNick Nisi: Way to play my jingle first, just to give like the opposite of that…\nJerod Santo: [laughs] Well, we wanted to lower the bar and make sure there wasn’t too much of expectation… And that was actually completely ad-hoc. Mat did not know about that. So… Nice job, Mat.\nKevin Ball: The first of many surprises that we’re going to spring on him today.\nJerod Santo: That's right.\nMat Ryer: This does feel increasingly like an ambush.\nBreak: [38:12]\nAmal Hussein: So what I absolutely love about JS Party is how much fun we have on the show, and just all of the goofball moments that are interspersed between technical facts. So my favorite shows have been my intro show, where I got to talk a little bit about my background... And I never really thought the word \"pirates\" would come up in a JavaScript podcast, but I was wrong.\nDivya: Yeah. I feel like I know Amal a lot, so it’s really hard to ask questions, because I know a lot of the answers… But I guess for the listeners who don’t know her as well, here’ s a curveball of a question - do you like to live dangerously?\nAmal Hussein: Oh, a hundred percent. My parents are East-Africa, enough said. I’m pretty sure Somalis brought pirating into the mainstream conversation more recently… [laughter] I’m a descendant of some serious bad*****, so yes. I love to live dangerously.\nDivya: Nice.\nAmal Hussein: Another favorite of mine was a show we did with Ben Ilegbodu on TypeScript, and Suz and Divya were on the panel with me, and I called Divya out for changing her accent and going full Aussie... That was pretty hilarious. And she actually admitted it on air, so... Listen up.\nDivya: Hello, hello, and welcome to a new episode of JS Party. Today we have a wonderful guest, Ben Ilegbodu. But before I introduce him, I would like to introduce the panel that we have with us. We have Amal...\nAmal Hussein: Hello, everybody...\nDivya: And we also have Suz!\nSuz Hinton: Hello! How's it going?\nAmal Hussein: Did your accent just change? You said Suz in like an Aussie accent. Did you realize that? [laughter] She’s like “And with us, we have Suz!” I was like, “Okay… Hi, Suz.”\nDivya: Okay, yeah. You caught me.\nAmal Hussein: I thought that was cute.\nDivya: I don't know... Sometimes I say things in weird voices... I don't know if you have this. I wanna introduce Ben before I jump into other things, but... [laughter]\nBen Ilegbodu: We're like 30 seconds in and it's already off the rails... [laughter]\nAmal Hussein: And last but not least, how could I forget the one and only Ahmad Nassri, whose classic line will forever be etched in my memory.\nAmal Hussein: If you’re in surgery, they don’t kill you, do the thing, and then bring you back to life, right? You’re still living. That’s the thing. A mechanic gets to turn the car off…\nJerod Santo: Top modular replacement.\nAmal Hussein: Yeah, exactly. That’s a great analogy. A cardiovascular surgeon doesn’t, right?\nAhmad Nassri: That’s actually a very good example, because you won’t take a surgeon seriously if he’s gonna say “I’m just gonna replace your heart instead of trying to fix it.”\nAmal Hussein: [laughs] Exactly.\nAhmad Nassri: Or replace your kidney without trying to understand what the problem is. “Oh, your kidney is too old. We’d better put React there instead.”\nAmal Hussein: [laughs] Poor React…\nJerod Santo: Show title right there.\nAhmad Nassri: “…because it’s just too old and I don’t wanna bother with it.”\nAmal Hussein: [laughs] Replace your kidneys with React, everybody…\nJerod Santo: Thank you, Amal. It has been so awesome having you on the pod. Alright, it is time to read another listener message.\n\"Hello, world. This is Chris Torres from Carson, California, and I'm a fellow software engineer who loves all things frontend, especially React and Svelte. My former manager said that JS Party is a good listen, and you guys definitely did not disappoint. I've been listening to this podcast since the beginning of 2021. My favorite episodes so far are $166, JS Danger CSS Tricks Edition, and #192, Frontend Feud Shoptalk versus Syntax, because they are so fun and entertaining. I also like Explain It Like I'm Five, which is featured in some episodes, because it helps me learn how to explain technical concepts more casually and less formally.\nWell, enough said... Thank you so much for keeping me sane during this time of uncertainty, and keep on keeping on!\"\n[44:23] Thank you for the kind words, Chris. We appreciate having you with us. Here is a clip from that CSS Tricks edition of JS Danger. One thing we've learned with that game is that a key to winning is not stealing unless you're sure you know the answer. I advise contestants about this, but few heed the advice. In this clip I thought Geoff Graham was about to do himself in, but...\nChris Coyier: Framewords for 1,000.\nJerod Santo: Oh my goodness, he’s going big. The less formal CSS framework. Its goal is to be as minimal as possible when adding classes.\nChris Coyier: Adding classes… I don’t know. It’s not Tailwind, but I’m gonna say Tailwind.\nJerod Santo: [fail sound] That is incorrect.\nMiriam Suzanne: Their goal is to be as maximal as possible.\nJerod Santo: Alright, here’s where I’ll remind people to be careful with the steals, because you can lose a thousand by stealing haphazardly. Sarah, do you know what it is? Would you like to steal?\nSarah Drasner: Um… Tachyons?\nJerod Santo: [fail sound] Sorry, that’s also incorrect. Geoff, would you like to steal?\nGeoff Graham: I’m gonna go out on a limb, yes…\nJerod Santo: [laughs] Despite all advice, they’re just going for it…\nGeoff Graham: What is PaperCSS?\nJerod Santo: [win alert] You got it!\nChris Coyier: No way…!\nGeoff Graham: Oh…!\nJerod Santo: Very good.\nMiriam Suzanne: Nicely done.\nJerod Santo: It was an obscure one.\nJerod Santo: Alright, we have time to read one more listener message.\n\"Scott here. The episode where you talked about saying no really helped me out. Hearing other developers who experience the same BS I was at a company gave me the strength to quit a toxic workplace, and now I'm way happier.\"\nThat is very cool, Scott. Thanks for letting us know that. Happy to hear that you're happier, and that we could play even a small role in that decision. Here is a clip from that episode. This is just a small part of a much larger conversation.\nJerod Santo: Are there ways that you’ve gone about saying no that have worked better than others, or how do you do it?\nNick Nisi: I’ll tell you the way that I use the most, which is by far not the best way, but it’s the most effective way sometimes… And that’s - I ignore it until it goes away on its own. [laughter]\nJerod Santo: So the ghost no… Okay. I mean, that is, I think – in certain cold requests… I mean, we do that all the time. We get so much email for The Changelog; people wanna come on the shows… I’m not gonna respond to every single email and say no.\nAmal Hussein: Oh, is that why you’ve been ignoring all my emails? [laughter] Gosh, Jerod, I thought it was like –\nNick Nisi: The truth comes out.\nAmal Hussein: Gosh, now I know…\nJerod Santo: I don’t know how to break this to you, Amal, but you’re on the show right now.\nAmal Hussein: Anyways… No, no, I’m just kidding.\nJerod Santo: [laughs] Anyway. So in that case, a cold email - you don’t know the person, they’re asking for something… I’m totally fine with not responding, because there’s just too many emails in life. But what if it’s like a colleague, or a friend? You’re not gonna ghost a colleague if they ask you for something, right? You’re gonna have to tell them something. Amelia, what about you? How do you say no?\nAmelia Wattenberger: I’ve been waiting to hear answers on this… [laughter] I need all the help I can get.\nAmal Hussein: Out of office message saying you’re in Alaska for three months… [laughter] And hoping that they forget about it by the time you’re “back.” [laughs]\nNick Nisi: I have a built-in excuse. I just say –\nAmal Hussein: Kids…\nNick Nisi: …I have kids and I can’t do it.\nAmelia Wattenberger: Yeah, that’s a good reason to have kids.\nJerod Santo: Yeah, kids are a great excuse. It is.\nAmelia Wattenberger: Yeah. I never wanna lie about it, and my reason is always like “This isn’t a priority for me” or “I don’t think that sounds great”, which I’ve tried before…\nJerod Santo: “I don’t think that sounds great…” [laughs] Yeah, it’s honest.\nAmelia Wattenberger: It’s just like, this isn’t – I don’t want to. You hate when you ask someone to do something and they lie about like “Oh, no, I can’t do that, because I’m not available” and you’re like “I didn’t say when…” [laughter] That never feels good.\nAmal Hussein: [48:14] Yeah…\nJerod Santo: They’re like “I have bowling league that night” and you’re like “Yeah, I didn’t give a date yet.”\nAmelia Wattenberger: Yeah.\nAmal Hussein: Honestly, a line that I’ve been able to use pretty successfully so far is that I just have too many commitments right now, and my plate’s really full, and I would love to…\nJerod Santo: Yeah. That’s true, right?\nAmal Hussein: It’s the truth though… I just can’t take anything else on right now. And it’s always nice to give people another option, so like if you can redirect them to someone else, like if you’re being asked to do a talk, or whatever… Just say, “Hey, maybe this person can help” and then just – I think that’s the most you can do. But yeah, you need to be protective of your time and energy, and most of the time people are understanding, so…\nJerod Santo: Right.\nNick Nisi: I do like that approach though, Amal, because it really shows that you did consider it, and you put a little bit of thought into it, which is – it’s not just like a canned no response in that regard. And even – I’m thinking back to maybe what you said, Amelia… Like, if you were brutally honest, like “No, that doesn’t sound good to me”, that would probably stand out as a significant response that they might get for something like that, and it might lead to collaborating or changing it to be exactly what you want, and that could be good, too.\nAmelia Wattenberger: Yeah, totally.\nJerod Santo: So I like the honesty of “Too busy, too many things going on.” One thing that happens with that with a persistent requester is they will then set a reminder to ask you again in a month, or 60 days… And that can be problematic. So now you’ve gotta do it again… So at times I will say – it’s similar to what Amelia says, but I’ll say something like “This just doesn’t feel like a great fit” or “It doesn’t feel right.”\nAmelia Wattenberger: That’s good.\nJerod Santo: It just doesn’t feel right.\nAmal Hussein: It’s not you, it’s me.\nJerod Santo: And it’s really hard – I mean, it’s not really offensive. It’s not saying it’s a bad idea…\nAmal Hussein: It’s not you, it’s me… You know? It’s like a break-up. [laughs]\nJerod Santo: Yeah, exactly. Yeah. Anyway, so it doesn’t feel right. I’ve never gotten someone to write back and be like “How dare you?!” Of course, maybe they’re thinking that, but they’re like “Oh, okay. I appreciate the time.”\nAmelia Wattenberger: Yeah. That’s great, because it’s not like “This isn’t good, objectively.” It’s like “It’s not good for me.”\nJerod Santo: Yeah. It just doesn’t feel right. It doesn’t feel like a great fit.\nKevin Ball: Hey, Kball here. One more moment from out last 100 episodes of JS Party that I wanna plug... This one starts behind the scenes. We had an episode coming up with Adam Wathan, the creator of Tailwind CSS, and I think Nick had jokingly titled the episode \"The Tailwind Beneath my Wings\", playing off the Bette Midler song... And I couldn't make it, but I joked in the channel, \"Hey, it would be amazing if you all worked in the lyrics from the song\", not expecting it to actually work. But those crazy guys - Jerod, Feross, and especially Nick Nisi carrying the show, managed to work in the entire song as part of the episode, most of it without Adam even knowing what was going on. It was just hysterical, and funny, and... Unique.\nBette Midler Song: [51:11] [Nick Nisi] It just really must have been cold there, in the shadow... [Jerod Santo] To never have sunlight on your face. [Nick Nisi] Content to let me shine; that's your way... You're always walking a step behind. [Feross Aboukhadijeh] So you're really the one with all the glory. [Nick Nisi] You're the one with all the strength. [Feross Aboukhadijeh] A beautiful face without a name, for so long. [Nick Nisi] A beautiful smile to hide the pain. [Jerod Santo] Did you ever know that you're my hero...? [Nick Nisi] It's everything I would like it to be. [Feross Aboukhadijeh] I can fly higher than an eagle. [Jerod Santo] Thank you for putting the Tailwind beneath our wings, Adam.\nJerod Santo: Kball drilled it. This was our finest moment, if I do say so myself. When the show first started, only Nick and I knew about the gag, and it was so awkward keeping it a secret. Here's Nick squeezing one of the lines in early on.\nFeross Aboukhadijeh: But yeah, I think part of that is just using a tool for more than it was originally intended to be used for, so it’s taken a while for the spec to catch up to what people wanna do with it.\nNick Nisi: Yeah. I think it just really must have been cold there, in the shadow, for CSS and the tooling around it… Yeah, just in the shadow of JavaScript and HTML.\nJerod Santo: That’s true.\nJerod Santo: The editing removed some of the awkwardness, but you should have seen Feross' face when Nick said that. It was just too much, so we revealed our secret to Adam and Feross during the first break. After that, things got better, but we were having a hard time squeezing in the penultimate line in any context that made sense. Then, which was a surprise to all of us, Adam masterfully delivered that line, and it left me completely speechless. Like, literally. I didn't know what to say.\nAdam Wathan: Firefox Send used to be my go-to one, but they shut that service down, so…\nJerod Santo: They did. That was sad…\nAdam Wathan: And now it doesn’t even have a placeholder page, it just links to the Mozilla homepage. So it’s sad.\nJerod Santo: That was a service – I never used it, but the fact that it existed, I respected that…\nAdam Wathan: Yeah, exactly. I felt the same way. [laughter]\nFeross Aboukhadijeh: Cool.\nAdam Wathan: Did you guys know – something I can actually do that most other people can’t do is that I can fly higher than an eagle.\nJerod Santo: Wow… Well, I mean, you’re really making – I can’t respond to that… [laughter] Oh, Adam broke the show…\nJerod Santo: This has been Best of the Fest vol. 1. Here's to the last 200 episodes, and to the next 200 as well. Special thanks to the many listeners, guests and panelists who contributed to Best of the Fest. You are what makes JS Party awesome. I've included links to every episode referenced in order of appearance in your show notes.\nOutro: [55:19]\nHorse JS: Hello, JavaScript developers. I just want to take a moment...\nJerod Santo: Horse JS, what are you doing here? Everybody left. The show is over.\nHorse JS: I just want you to know that I've cried.\nJerod Santo: Oh, I see. You're upset because nobody picked your interview in episode #142 as their favorite.\nHorse JS: Any JavaScript nerds wanna get wrecked?\nJerod Santo: Actually, one listener did pick you, but we ran out of time, we had so much good stuff that I decided not to include it.\nHorse JS: Name a funnier person in the JS community. I'll wait...\nJerod Santo: Okay, okay, fine. Just pick your favorite JS quote, say it right now, and we'll include it in the show. But you've gotta move fast, because I'm really ready to wrap this up.\nHorse JS: Okay, let me toss out one last hand grenade before I go to bed. Immutability is sometimes."
   },
   {
    "title": "go-time-161.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/gotime/go-time-161.md",
    "transcript": "Mat Ryer: Hello and welcome to the third and final installment of the Go Time GopherCon lunchtime mashup. I'm Mat Ryer, and today, much like the last day of school, we're not gonna be doing any work. Instead, I'm gonna be asking \"Would you like to play a game?\" Not in like a creepy way, like in the Saw movies, with the weird little clown man riding a tiny bike... But like the American game show Jeopardy. We're gonna have a quiz show, a good old-fashioned quiz show. It's gonna be great. I'll explain the rules in a bit, but first, let's meet the contestants.\nHello, contestants! Let's see who we've got. I can see Kat Zień. Hello, Kat!\nKat Zień: Hello. Hi, Mat.\nMat Ryer: Senior engineer at Monzo. Last time we spoke you weren't senior engineer, so you got older.\nKat Zień: Yeah, I aged.\nMat Ryer: Yeah. Well, that's alright... It happens to everyone. We've also got Ellen Körbes. Hello, Ellen.\nL Körbes: [04:01] I am very impressed that you managed to pronounce the surname correctly... Which is disappointing, because I only came here to make fun of you. So yeah, that sucks.\nMat Ryer: Okay. Well, there'll be plenty of opportunity to do that anyway. You are a dev rel at Tilt, right?\nL Körbes: Yeah. I'm a pretty face, yeah.\nMat Ryer: Okay. If you do say so yourself.\nL Körbes: I do, yeah.\nMat Ryer: Very modest. Yeah, you do. Okay.\nL Körbes: Yeah, I do.\nMat Ryer: Well, we've also got... It's only Mark Bates, isn't it? Creator and maintainer of the Buffalo project, co-founder at Gopher Guides, which does great training. He's also kind of the lightning talks on GopherCon... Thor's jester, he's Mark Bates. Hello, Mr. Bates.\nMark Bates: Hey there, Matthew. How are you doing today, sir?\nMat Ryer: Not bad. Are you ready to play a game?\nMark Bates: That's so creepy when you say it...\nMat Ryer: It's a bit creepy, isn't it?\nMark Bates: It really is, but yeah...\nL Körbes: It sounds like the Queen.\nMat Ryer: Sounds like what?\nL Körbes: Like the Queen.\nMat Ryer: Sounds like the Queen. Well, does she say that? \"Would one like to play a game?\" It's very sinister. I'd be like, \"No, thanks, your Majesty. I'll just go.\" Okay.\nMark Bates: Alex, what are the rules?\nMat Ryer: Yes, here are the rules. So we're gonna show you a gameboard, and for each round we've got one of these boards... And what you do is you take turns picking one of these squares. You can see that they're organized in columns by category. And then the number on the square is the number of points that you're willing to wager. So if you're particularly strong in a certain category, you might go for the 500 or the 400; if you're not sure, maybe stick to the 100 and 200 there.\nIf you get the answer right, you win the points. If you get the answer wrong, we subtract the points, unfortunately. Now, if you do get it wrong, you will lose the points, but the next person in line will have a chance to steal. But be careful with those steals, because you also will lose the number of points if you get it wrong. So only steal when you're sure.\nAnd we do have a prize, by the way... You will win, whoever wins this, a Raspberry Pi 400, the little keyboard one with a computer inside it. Very exciting. You don't get a screen. If you have a screen, you're gonna have to be entering way more quizzes, and much bigger quizzes than this. So there's no screen, but you can have the little computer anyway.\nMark Bates: And there's no power or any other cabling involved. It's just the device.\nMat Ryer: Yeah. You're on your own.\nL Körbes: Wait, does it come with electricity?\nMark Bates: No. And it doesn't come with the key caps, as a matter of fact. You have to buy your own key caps.\nMat Ryer: Yeah. You can save up for a Caps Lock if you really want to... But yeah, it's a good prize.\nMark Bates: I'm still hoping for one for Christmas.\nMat Ryer: So what do you think of the prize?\nKat Zień: I mean, I'm not gonna get it.\nL Körbes: Doesn't it have an ARM processor? So it's like it's basically the new Macs...\nMat Ryer: [laughs] I think so, yeah. Well, you don't seem particularly bothered by that prize, but I think it's a great one.\nMark Bates: It's pretty cool.\nMat Ryer: Shall we get started?\nMark Bates: Yes.\nMat Ryer: Shall we start the game? Shall we?\nMark Bates: Yes, Alex.\nMat Ryer: Okay. Well, we've rolled an invisible dice earlier and come up with this order... So Kat, you're going first. So the first column - it's No-go. All the answers are features that Go doesn't have. Funky Movies - we've replaces Go keywords from popular movies with the word func. For example, if I said the clue was \"Catch me func you can\", the real movie is \"Catch me if you can\", so if is the Go keyword we were looking for. They'll be obvious when we see them; it'll be fine.\nL Körbes: This is like [unintelligible 00:07:45.26]\nMat Ryer: It's okay, don't worry; it's not as hard as it sounds, I promise, once we get going.\nMark Bates: I don't know, I was promised there'd be no math.\nMat Ryer: [laughs] Groups Who Go -- you can subtract, Mark, which is essentially all you're gonna need...\nMark Bates: I'm not that good at that either... Go on.\nMat Ryer: [08:06] Groups Who Go - the answers are groups from around the world, groups of Gophers. That's a cool one. And we've got Pike's Proverbs, where you are gonna be asked to fill in the blanks from Rob Pike's Go proverbs.\nOkay, now we know the categories... Kat, would you like to pick your first square, please?\nKat Zień: Yeah, I'll go for Groups Who Go for 100.\nMat Ryer: Groups Who Go for 100. This group builds bridges to educate under-represented communities and to foster diversity in Go.\nKat Zień: Is it GoBridge?\nMat Ryer: So answer in the form of a question... Let's see... [win sound] Yes, correct. So you get the 100 points. See? Now so bad, eh? Okay, L, it's your turn now.\nL Körbes: Let's do Funky Movies for 500.\nMat Ryer: Oh, straight in 500 there...\nL Körbes: I mean, if I'm gonna lose, I'm gonna lose big.\nMat Ryer: Okay... The Funcstant Gardener.\nL Körbes: Yeah... How do I make this a question?\nMat Ryer: Don't worry about that...\nL Körbes: Okay, it's const.\nMat Ryer: Const, let's see... [win sound] Correct! Brilliant.\nL Körbes: Yay!\nKat Zień: Nice.\nMat Ryer: Okay, so you've got 500 points there. That's nice. Mr. Bates, time for you to pick a square, sir.\nMark Bates: I will take Funky Movies for 400.\nMat Ryer: Okay, Funky Movies. Batman Funks.\nMark Bates: What is return?\nMat Ryer: [win sound] Yes. Brilliant. For 400.\nMark Bates: I know.\nMat Ryer: Okay, back to Kat.\nL Körbes: Wait, wait, wait... Mat's not playing?\nMark Bates: No, he's the host.\nKat Zień: He knows all the answers.\nL Körbes: So we can't make Mat lose? This is the worst...\nMat Ryer: No, no...\nMark Bates: Mat has already lost just being on the air with us.\nL Körbes: I'm so disappointed.\nMark Bates: He's already lost, dealing with us.\nL Körbes: Okay. Alright, fair enough.\nKat Zień: Alright, I'll go with Groups Who Go for 300.\nMat Ryer: Okay, let's have a look. These seven gophers host weekly conversations from around the Go community.\nKat Zień: I don't know, I'm not sure. I'm gonna guess. So if I guess wrong, I get minus points...?\nMat Ryer: That's correct, yeah. If you get it wrong.\nKat Zień: Can I just not guess then and pass it on?=\nMat Ryer: Yeah, but you lose the points anyway.\nKat Zień: Okay.\nMat Ryer: It's a required field.\nKat Zień: Okay, I'm gonna say \"Is it GoTimeFM?\", but that is just a random guess, because I don't know if there's seven of you.\nMat Ryer: Let's see... [win sound] Correct!\nKat Zień: Oh, nice.\nMat Ryer: So you win 300 points.\nKat Zień: I was counting in my head, I was like \"Is it seven people? Is it exactly seven people?\" [laughter] That's why I was like \"I don't really know...\"\nMat Ryer: Okay. L, what do you reckon now?\nL Körbes: Let's stick to movies. 300.\nMat Ryer: 300, Funky Movies. Point Funk.\nL Körbes: Oh, man.\nMat Ryer: Yeah. Go keyword belongs there.\nL Körbes: Blank? Is that a keyword? I don't know...\nMat Ryer: [fail sound] No.\nL Körbes: Right...\nMark Bates: Can I steal?\nMat Ryer: Okay, Bates... Hang on, we need to take the 300 points off L first, which we've done... And now, Bates, do you wanna have a go?\nMark Bates: What is Break?\nMat Ryer: Break? [win sound] Yes...\nL Körbes: See, that's the word I wanted.\nMat Ryer: Yeah.\nMark Bates: Yeah, that was the right answer. [laughs]\nMat Ryer: Okay. Now it's Mark's turn.\nMark Bates: Yeah, let's go for Funky Movies for 200.\nMat Ryer: Funky Movies... The Funcportance of Being Earnest.\nMark Bates: [laughs] It's import...\nMat Ryer: [win sound] Correct! You're good at these funky movies.\nMark Bates: Hey, wouldn't it be Functance? It should have just been Functance.\nL Körbes: Yeah, exactly.\nMat Ryer: Yeah, yeah. We left it in there because it sounded more funny, and there's gonna be no consequences to this...\nMark Bates: Fair enough.\nMat Ryer: Kat, it's back to you... What do you reckon?\nKat Zień: I'll go Groups Who Go, 400.\nMat Ryer: Groups Who Go, for 400. 2,442 developer names and emails are listed in this group on Golang.org. What could it be...? It's a prominent group.\nKat Zień: [12:07] It's a random guess, so I'm gonna completely randomly guess... But \"Who are Release Managers?'\nMat Ryer: [fail sound] Good guess, but it's not right, I'm afraid. L, do you wanna steal?\nL Körbes: Um, no.\nMat Ryer: Fair enough. Bates, do you wanna steal this one?\nMark Bates: I think I know what it is, but I'm not gonna steal.\nMat Ryer: Okay, you don't wanna risk it. You've got 900...\nMark Bates: I'm not gonna risk it. 400 is a lot.\nMat Ryer: Okay.\nMark Bates: I'm pretty sure it's Contributors, but I'm not answering...\nMat Ryer: So you don't want to submit an answer.\nMark Bates: I do not wanna submit an answer.\nMat Ryer: Okay, let's see what the answer was... The Go Contributors. So you would've gotten the 400.\nMark Bates: I wouldn't have gotten it, yeah.\nMat Ryer: You sure would... Don't worry though, because it's L's turn now.\nL Körbes: Um, It's a No-Go for 500.\nMat Ryer: Oh, going straight in that number 500, It's a No-Go. Recursive Go functions might benefit from this compiler optimization.\nL Körbes: The only thing I know about recursiveness is tail-something-something. Is that a valid answer?\nMat Ryer: I mean, you're sort of submitting a regex kind of answer there... [laughter] [unintelligible 00:13:10.00]\nL Körbes: Can I google it for a minute?\nMark Bates: Google it? I don't think that's allowed... [laughter]\nMat Ryer: I don't think so... I don't know.\nL Körbes: Um, what's it called...? Tailend-something-something? Yeah, I think I lost it...\nMat Ryer: Okay, don't worry then... [fail sound] I'm afraid yes, you're gonna fall down into negative points now, which is kind of fun... Bates, do you wanna steal this one?\nMark Bates: I can't think of it either. All I can think of is tail... Tailend optimization, or something like that; I'm not gonna guess.\nMat Ryer: Okay, you're not gonna guess; you're just gonna help Kat. So Kat, do you wanna have a go at this one, steal it?\nKat Zień: No... No, I'm not gonna risk it.\nMat Ryer: Okay, let's see what the answer was. You were so close... Tail call optimization.\nL Körbes: Oh, tail call...\nMat Ryer: Yes, indeed... Okay. It's Bates' turn now.\nMark Bates: Hm...\nMat Ryer: Pick a square, mate.\nMark Bates: Let's do It's a No-Go for 400.\nMat Ryer: Okay, It's a No-Go for 400. The garbage collector is good, but that hasn't stopped some people from using this technique themselves. It's a No-Go, for 400.\nMark Bates: Will you be quiet?\nMat Ryer: No, I can't have dead air. [laughter] Loads of people just watching you think...\nMark Bates: Well, how is that different from the rest of the night? [laughs]\nMat Ryer: What, L?\nL Körbes: I was just saying random things just to annoy Mark, because he wants silence, so we can't help it.\nMark Bates: Okay, so I have to guess, correct?\nMat Ryer: Yes, you have to have a guess.\nMark Bates: I have to take a guess, okay.\nMat Ryer: Or you can pass and lose the 400.\nMark Bates: So the garbage collector is good, but that hasn't stopped some people from using this technique themselves... And I'm going to say manual garbage collection.\nMat Ryer: Oh, that is so close... [fail sound] I'm probably gonna -- okay, the soundbot has rejected... [fail sound] Okay, soundbot, calm down. Soundbot says no, that means Kat -- [fail sound]. Yeah, thank you, soundbot. Kat, would you like to steal this one?\nKat Zień: No, because I'm not entirely sure on the wording. If Mark's guess was not correct, then I don't know what the right word is... I would have called it the same.\nMat Ryer: Okay. L, do you wanna steal this one?\nL Körbes: Um, nope.\nMat Ryer: Okay... Let's see what the answer was. You were very close; I would have probably given you this.\nMark Bates: Garbage collector [unintelligible 00:15:22.26]\nMat Ryer: Yeah, manual memory management. No matter, we've taken the points off you.\nMark Bates: I feel like I should've gotten that one... But anyway, let's move on.\nMat Ryer: It was the soundbot... [fail sound] You can't argue with an 8-bit sound effect.\nMark Bates: Well, you know what then? I'm gonna take this to the Supreme Court.\nMat Ryer: Yeah, please do.\nMark Bates: I'm contesting the entire results of this game.\nMat Ryer: Too soon.\nMark Bates: Too soon? Okay. [laughs] I'll just get yelled at...\nMat Ryer: Kat, it's time to pick a square.\nKat Zień: I'll go for -- let's do Pike's Proverbs for 100, see what that's like.\nMat Ryer: Okay, let's have a look. \"Don't communicate by sharing memory, share memory by... What.\"\nKat Zień: [16:05] Is it communicating?\nMat Ryer: Is it? [win sound] Yes! You got an 8-bit fanfare.\nKat Zień: Yaay!\nMat Ryer: Congrats. L.\nL Körbes: Um Pike's Proverbs for 500.\nMat Ryer: Okay, Pike's Proverbs for 500. \"A little copying is better than a little... What.\"\nL Körbes: Right, I remember this...\nMat Ryer: Yeah, say it then.\nL Körbes: Well, I remember the part that's on the screen. [laughter]\nMat Ryer: Oh yeah, yeah. I remember that bit as well.\nL Körbes: A little copying is better than a little... Hm...\nMat Ryer: What could it be...?\nL Körbes: Ah, words...\nKat Zień: Pasting? [laughs]\nL Körbes: Yeah, that's the first thing that comes to mind.\nMat Ryer: Yeah. Well, there's no point copying if you're not gonna paste it.\nL Körbes: I wanna say something like abstractioning, but that's not a word, so it can't be the real answer.\nMat Ryer: Well, you could say abstraction if you want. That would fit.\nL Körbes: Okay, let's go with that.\nMat Ryer: Okay. 8-bit sound effect... [fail sound] Oh, sorry. It's not correct.\nL Körbes: Of course I lost.\nMat Ryer: Bates, would you like to steal this?\nMark Bates: Ah, it's killing me... No. No, I would not.\nMat Ryer: Okay. Kat?\nKat Zień: If it wasn't for 500, I would've guessed... But I'm too afraid to guess. I have an idea, but... Nah.\nMat Ryer: Okay. You're gonna pass. Let's see -- what was your idea? Oh, it doesn't matter.\nL Körbes: Oh, dependency...\nMat Ryer: Dependency. A little copying is better than a little dependency. So you were with it with the abstraction thing, but it wasn't correct.\nL Körbes: Yeah, words... Words are bad.\nKat Zień: I was gonna say cleverness, but... Yeah.\nL Körbes: Yeah, that's good.\nMat Ryer: Bates, pick a square, my friend.\nMark Bates: Let's do Pike's Proverbs for 400, Alex.\nMat Ryer: Okay... Make the __________ value useful.\nL Körbes: Oh, that's so easy. It's so unfair.\nMark Bates: What is zero?\nMat Ryer: What is zero. [win sound] Yes, correct. 400 points.\nMark Bates: I'm fair. [laughs]\nMat Ryer: Kat, back to you.\nKat Zień: Oh, me again?\nMat Ryer: What do you reckon, mate?\nKat Zień: Let's go with Pike's Proverbs, 200.\nMat Ryer: Okay... \"Cgo is not... What.\" What is cgo not?\nKat Zień: That's Pike's?\nMat Ryer: Yeah, one of Pike's proverbs. Cgo is not what. What is it not? It's like a Dr. Seuss book, ain't it?\nKat Zień: Is it Go?\nMat Ryer: Let's see. [win sound] Yes.\nKat Zień: I was like, \"That's too obvious to be it...\" [laughter] I was like \"I feel like there's a catch.\"\nMat Ryer: No. Great. Great one. L, you're behind at the moment.\nL Körbes: Right. Let's keep digging this hole. Groups Who Go, for 500.\nMat Ryer: Groups Who Go, for 500. Kenneth Shaw organizes this group of 8,573 Gophers in Indonesia, Meetup.com's largest Go meetup.\nL Körbes: This is the Go Indonesia Group... [laughs]\nMat Ryer: Maybe... Is that your answer? I mean...\nL Körbes: No, actually... Is it?\nMat Ryer: I don't know.\nL Körbes: Is it GopherCon Australia maybe? Because it's like in that part of the globe, right?\nMat Ryer: Right. So what's your final answer? For 500, do your answer, please...\nL Körbes: Y'all gotta keep talking because dead air, and I need to think for a second... [laughter]\nKat Zień: Ellen's like \"Here's a map...\"\nMat Ryer: Yeah... Kenneth Shaw, 8,573.\nKat Zień: I remember talking to him.\nMat Ryer: Wow.\nL Körbes: Who is he?\nKat Zień: I remember at some point we had -- I think it was GopherCon U.K, when he had a Meetups Organizers catch-up, and he dialed in from Indonesia. It was pretty funny, because it was day for him, and I think late afternoon for us... Would that make sense? No...\nMat Ryer: Hm. That sounds hilarious.\nL Körbes: I'm gonna go with The Go Indonesia Meetup, because I don't have a better guess than that.\nMat Ryer: Okay, fair enough. [fail sound] It's incorrect, I'm afraid. Bates, would you like to steal?\nMark Bates: No... I'm pretty sure -- I think I know what it is, but no. It's too many points.\nMat Ryer: Okay... Kat, you get to steal this then, if you wanna have a Go. You've met the person, you spoke to them about their meetup...\nKat Zień: [20:19] That's the thing, but I don't wanna mess up the meetup name...\nMat Ryer: Right. What's your guess then, mate?\nL Körbes: I already did that, so...\nKat Zień: I don't know, I don't wanna steal this.\nMat Ryer: You don't have to steal.\nKat Zień: Yeah, I'm not gonna remember the actual meetup's name. I thought it was--\nMat Ryer: Okay, no problem. Let's find out. The answer was...\nKat Zień: Show us what it is.\nMat Ryer: Go Jakarta.\nKat Zień: Oh, yes... Yeah.\nL Körbes: Right.\nMat Ryer: The capital city of Indonesia.\nL Körbes: If only I knew that...\nMat Ryer: Yeah. Don't worry.\nMark Bates: That was gonna be my guess, but I didn't wanna mess up the name... Like Kat said.\nMat Ryer: No one believes you.\nKat Zień: [unintelligible 00:20:50.18]\nMark Bates: I was gonna say like The Jakarta Gophers, or Go Group, but I didn't wanna screw it up.\nMat Ryer: Too late. Way too late. But it's your turn now though, Bates, so you can show us, instead of telling us how clever you are...\nMark Bates: I'll take the Proverbs -- I am clever. I'll take Proverbs with 300, sir.\nMat Ryer: Okay. Clear is better than *beep*. What's the beep? What's clear better than?\nMark Bates: What is clever?\nMat Ryer: [win sound] Correct. 300 points to you, Mr. Bates. Okay, back to Kat.\nKat Zień: Let's do Groups Who Go for 200.\nMat Ryer: Okay, let's see. She runs a local chapter to help build a more diverse and inclusive Go community.\nMark Bates: It feels like that could be a lot of people...\nKat Zień: I could think of a few she's...\nMat Ryer: It's the name of a group we're looking for, not a particular person.\nKat Zień: Oh okay, so it's the name of the group. Who is Women Who Go? Are you looking for the general group name?\nMat Ryer: [win sound] Correct! Yes, nice one. Some points.\nMark Bates: Some really weird questions...\nKat Zień: Good thing you clarified, because I was like \"I know quite a few she's who run that, so...\" [laughs]\nMark Bates: Yeah.\nMat Ryer: We're not taking pull requests for the quiz, so... You can keep those opinions. Keep them to yourselves. [laughter] L, it's your turn. You've got -1,300 points so far, but you can claw some back.\nMark Bates: You can still catch up!\nL Körbes: Numerically, I have the largest score, so... There you go, suckers.\nMat Ryer: Right. Yeah, if we just absolute scores.\nL Körbes: No-Go for 300.\nMat Ryer: No-Go for 300. Go has explicit error handling, so you won't find these keywords common to other languages.\nL Körbes: Yeah, right. I remember this.\nMat Ryer: Right?\nL Körbes: Yeah. Throw. Catch.\nMat Ryer: Let's see. [win sound] Yes...! Throw, try, and/or catch. And and or are not included in that, by the way. Correct. Okay.\nMark Bates: We don't have those in Go either...\nL Körbes: My score went down now...\nMat Ryer: Yeah, yeah. Well, it still looks really low, but you did claw some back. Don't worry, there's plenty of other chances to win some points. Okay, Mr. Bates.\nMark Bates: Yes, I will take Funky Movies, please.\nMat Ryer: Funky Movies... The Curious Funk of Benjamin Button.\nL Körbes: [laughs]\nMark Bates: What is case?\nMat Ryer: [win sound] What is case indeed. Correct. Kat, it's your turn.\nKat Zień: It's a No-Go for 100, because I'm not too clever.\nMat Ryer: This form of polymorphism common in many languages is likely coming to Go soon.\nKat Zień: What is generics?!\nMat Ryer: [win sound] Yes! Nice one, congrats. L, you're left with It's a No-Go for 200. You won't find the \"class\" keyword in Go. That's because the language isn't this.\nL Körbes: Object-oriented?\nMat Ryer: Let's see... [win sound] Congratulations! And that's the end of round one.\nL Körbes: No...! My numbers went down again.\nMark Bates: How many more rounds are there?\nMat Ryer: There's three rounds.\nMark Bates: Oh, okay.\nMat Ryer: Let's have a look at the scores. We have a way-behind, unfortunately, on -800; it's L. Next it's Kat at 600, but taking the lead there is Mr. Bates, with thirteen hundred, or one thousand three hundred, depending on whose side you're on. Well done! How do you feel so far about your quiz?\nKat Zień: [24:17] Not great, not terrible. I'm in the middle. [laughs]\nMat Ryer: Okay. Yeah, we can have some chat now. This is chat time, so let's get to meet our guests a little more. Mark, what's your guilty pleasure?\nMark Bates: I can't say that on the air...!\nMat Ryer: Okay. L, what's the worst thing you've ever done? [laughter] It's just light chat. Keep it light.\nMark Bates: Just keep it light. MURDER.\nL Körbes: Um, yeah, so I plead the 5th here, or whichever that one is...\nMark Bates: Well, the 5th is the correct one, L. That's right. [laughs]\nL Körbes: Okay, yeah. Alright.\nMat Ryer: Yeah, you didn't accidentally plead one about farming, one of the amendments about farming, or something...\nL Körbes: I mean, it did happen in a farm, but I can't say what it is.\nMat Ryer: Okay, well--\nMark Bates: I think the 4th amendment is the one about not housing soldiers, or something. There's an amendment particularly about being forced to house soldiers.\nMat Ryer: Oh, right.\nL Körbes: I've never housed a soldier. I can come clean about that and say it for everyone who's watching.\nMat Ryer: Okay.\nMark Bates: There you go. Fantastic.\nMat Ryer: I'm sure that puts a lot of minds at rest.\nMark Bates: I was worried... [laughter]\nMat Ryer: I get that question all the time, about you. Strange.\nL Körbes: I know...\nBreak: [25:37]\nMat Ryer: Okay, shall we move on to round two, shall we?\nKat Zień: Gopher it!\nMat Ryer: Let's do it. I'll explain these categories now. On the left there we have Standard Librarians... We're gonna read the description of a standard library package, and you have to just tell us which package we're describing. We're taking it from the GoDocs.\nThe next category, GitHub Stars. These are the top-starred Go repos on GitHub. All of the answers are those repos.\nWe also have Gopherpedia, which is actually real-life gopher animal facts that we've found on Wikipedia. So that one has actually nothing to do with computers.\nAnd the final one, Go Doesn't Equal Golang - these are pop culture things with Go in their name, but they're not related to the language that we all love, Go.\nRight, time to start... Kat. Contestant number one, Kat Zień. That's how you say your name, right?\nKat Zień: Yeah.\nMat Ryer: It sounds to me like someone's just made a load of money, and they're like Kat-Zień! You know what I mean?\nKat Zień: Yeah, ka-ching...! [laughs] Yeah, everyone always says it sounds Chinese, but it has nothing to do with Asia, as far as I know.\nMat Ryer: Good name. Do you wanna pick -- oh, notice we've doubled. This is double panic.\nL Körbes: Okay, sorry, now I need to ask - where is the surname from?\nKat Zień: Poland.\nL Körbes: Oh, cool.\nKat Zień: [28:06] Yeah, nobody ever gets that the first time they guess.\nMat Ryer: Yeah, fair enough, ain't it.\nKat Zień: It's not [unintelligible 00:28:10.20] [laughs]\nMat Ryer: Yeah. Okay.\nKat Zień: Right.\nMat Ryer: I need to just tell you this, Kat - it's Double Panic this round, so notice all the scores have doubled.\nKat Zień: Doubled, yeah.\nMat Ryer: Yeah. Go on then.\nKat Zień: Let's go GitHub Stars for 200.\nMat Ryer: GitHub Stars for 200. The world's fastest framework for building static websites.\nKat Zień: Wait, wait, wait... What is the -- oh, I'm blanking on the name. I'm thinking of the PHP one [unintelligible e00:28:41.04] Wait, wait, wait... Oh, we're using this for London Gophers; come on, I'm so rubbish with names... [laughter]\nMat Ryer: It's also late for you. It's later for you than it is for Mr. Bates, for example... But let's just--\nMark Bates: You don't know what I've been doing last night.\nMat Ryer: True. I haven't watched the videos yet.\nMark Bates: Maybe I haven't gone to bed.\nKat Zień: I can't remember what the static website builder is... I'm sorry.\nMat Ryer: [fail sound] Okay.\nMark Bates: Can I steal?\nMat Ryer: No, not yet. We need to see if L wants to steal first. L, do you wanna steal?\nL Körbes: Yeah, it's Hugo.\nKat Zień: Oh, come on...!\nMat Ryer: Is it? [win sound] Yes, Hugo. Correct. 200 points.\nKat Zień: Steve's gonna be so disappointed. [laughter]\nMat Ryer: Okay... L, it's now your turn to choose a square.\nL Körbes: Right. Let's go with the weird category that I don't understand, the last one. Let's do 600.\nMat Ryer: Okay, Go Doesn't Equal Golang. So the answer to this is gonna be something Go, but not related to what we do. This 2016 augmented reality game for iOS and Android was downloaded more than 500 million times that year.\nL Körbes: What I really loved about that game was all the conspiracy theories around it. It's better than sci-fi, man... It's Pokémon Go.\nMat Ryer: [win sound] Correct. Well done. Clawing some points back. Now all the way up to zero. Well done.\nL Körbes: [laughs]\nMat Ryer: Mr. Bates. Pick a square, sir.\nMark Bates: I will take Go Doesn't Equal Golang for 1,000.\nMat Ryer: Oh, he's going big...\nMark Bates: Going big.\nMat Ryer: A line of transforming robot toys produced by Tonka from 1983 to 1987.\nMark Bates: What were the GoBots?\nMat Ryer: [win sound] What were those GoBots. Correct. Well done. Lots of points, look at that.\nL Körbes: You guys are really old, right? [laughter]\nMark Bates: [30:47] yes. But yes, I used to own GoBots. They were like the really cheap transformers; my mother would buy them at like CVS. They were terrible.\nMat Ryer: Yeah, don't lumber me in the geriatric bucket with Mr. Bates, please. [laughter] Kat, it's time for you to choose a square.\nKat Zień: Let's try Gopherpedia for 200.\nMat Ryer: Okay, Gopherpedia. Much like mice and rats, gophers are mammals of this order.\nKat Zień: What are rodents?\nMat Ryer: [win sound] Correct!\nKat Zień: Oh.\nMat Ryer: I would have also accepted rodentia.\nKat Zień: Really? Gophers are rodents?\nL Körbes: Yeah... Have you seen their teeth? They're like big hamsters.\nKat Zień: Yeah... But they're cute. Rodents are not cute.\nMat Ryer: Some are, I suppose... Cuteness is in the eyeballs of the beholder, I always say. I don't always say it...\nL Körbes: True.\nMat Ryer: L, maybe we could get you some points. Pick a square, please.\nL Körbes: Let's do Standard Libraries for 400.\nMat Ryer: Standard Librarians, for 400. Implements formatted IO with functions analogous to C's printf and scanf.\nL Körbes: [31:58] That is the fmt package.\nMat Ryer: [win sound] It sure is. Nice one. And you're off the mark. Speaking of marks... Bates, pick a square, please.\nMark Bates: I will take Go Doesn't Equal Golang for 800, please.\nMat Ryer: He's going for the big scores... English duo Wham had a number one hit with this 1980s single jitterbug.\nMark Bates: What is \"Wake me up before you go go\"?\nMat Ryer: [win sound] [laughter]\nL Körbes: I think this section of the game is unfairly beneficial to the geriatric demographic.\nMat Ryer: Well, they haven't got long left, have they?\nMark Bates: I'm only 44, people!\nL Körbes: Exactly.\nMat Ryer: 44 people... Inside you you're worked by 44 different small people?\nL Körbes: In a trench coat.\nMark Bates: Yes, in a trench coat. [laughter] There's 44 small people working on Bates' body.\nMat Ryer: Just doing programming, and-- [laughter] Nice. That's grotesque. Okay, it's Kat's turn now, I think. Was it just your turn, Mark?\nKat Zień: It is.\nMat Ryer: Okay, Kat. Let's do it. Maybe get some higher scores.\nKat Zień: Yeah... Meh...\nMat Ryer: Come on, you can do it.\nKat Zień: Let's do GitHub Stars for 600.\nMat Ryer: Okay. GitHub Stars. The tool for beautiful monitoring and metric analysis and dashboards for Graphite, InfluxDB, Prometheus and more.\nKat Zień: What is Grafana?\nMat Ryer: [win sound] 600 points! Check that out, you've just doubled your score. Nice one.\nKat Zień: Nice.\nMark Bates: Why was it Grafana/Grafana?\nMat Ryer: That's the GitHub repo name.\nMark Bates: Oh.\nMat Ryer: Okay, L, time for you to pick a square.\nL Körbes: Yeah, let's stick to the libraries, 600.\nMat Ryer: Okay, Standard Librarians, 600. It contains operations that step around the type safety of Go programs.\nL Körbes: I have an answer, but it might be a bit unsafe...\nMat Ryer: Ooh... Do you want to say it anyway?\nL Körbes: Yeah, I already did. It's Unsafe.\nMat Ryer: Okay. Unsafe. Let's see. [win sound] Correct!\nL Körbes: [laughs]\nMat Ryer: Nice one. You don't get any extra points for putting it in to a different sentence, unfortunately. I wish we had thought of that.\nL Körbes: Meh...\nMat Ryer: You just get kudos points, and everyone thinks you're brill, so that's alright.\nL Körbes: But they already do.\nMat Ryer: Yeah. Oh, they do? Oh. Mr. Bates.\nMark Bates: Yeah, I will take Standard Librarians for 800.\nMat Ryer: Sure will. Wraps an IO reader or IO writer object, creating another object that provides buffering and some help for textural IO.\nMark Bates: What is Scanner?\nMat Ryer: [fail sounds] What package are we looking for? I'm afraid I can't give you that...\nMark Bates: Oh, Bufio...\nMat Ryer: Kat, would you like to steal?\nKat Zień: So we're looking for a standard library package...\nMat Ryer: Yeah.\nKat Zień: No, I don't wanna steal, because I'm gonna mess it up. I have an idea, but...\nMat Ryer: Okay. L?\nL Körbes: Well, I'm a big risk-taker, so let's go with bufio.\nMat Ryer: Bufio, let's see... [win sound] Yes...\nL Körbes: Thanks, Mark.\nMat Ryer: That was unfortunate, Mark.\nMark Bates: I mentioned it; I said it out loud... [laughter] I still argue that Scanner is actually the thing that wraps those things, but anyway.\nMat Ryer: That's true, but it's package names. Kat, it's your turn now. Pick a square, please.\nKat Zień: I'll go for -- let's continue the GitHub Stars for 800. Risk it.\nMat Ryer: Okay, let's do it. An HTTP web framework written in Go, that features a Martini-like API, with much better performance. What package does that describe?\nKat Zień: A package, so this would be the gorilla/mux. What is gorilla/mux?\nMat Ryer: Good guess. Let's see. [fail sound] It's not correct, I'm afraid... L, do you wanna steal this one?\nL Körbes: Well, I thought it was the one she said, so now I don't know.\nMat Ryer: Okay. So you don't want to steal?\nL Körbes: No.\nMat Ryer: Okay. Bates, do you wanna give a steal of this one?\nMark Bates: No... There are about a bazillion HTTP frameworks out there.\nMat Ryer: Okay.\nKat Zień: [36:14] All based on Martini. [laughs]\nMat Ryer: The answer was Gin. That's the one we were looking for.\nKat Zień: Oh, yeah...\nMat Ryer: Okay, no matter. Right. Who's next? I've forgotten.\nKat Zień: Ellen, I think...\nL Körbes: Right.\nMat Ryer: Okay, L, yes.\nL Körbes: What is Gopherpedia again?\nMat Ryer: It's facts about real gophers, that we got from Wikipedia.\nL Körbes: Oh... That's gonna be hard. You know what - I'm gonna stick to the library. Let's do 200.\nMat Ryer: Okay. Implements a doubly-linked list.\nL Körbes: Oh, [unintelligible 00:36:47.26] Really? I don't know.\nMat Ryer: I don't know either... But it's one of them, ain't it? You're gonna have to guess.\nL Körbes: I don't know, I have no idea.\nMat Ryer: [fail sound] Okay. Bates, do you want to steal this one?\nMark Bates: No...\nMat Ryer: No. Kat.\nMark Bates: Absolutely not.\nKat Zień: No...\nL Körbes: Why do you put the most difficult one with the lowest number?\nMark Bates: Right...?! Like a thousand. This isn't a two hundred.\nMat Ryer: Let's see what the answer is. It's the container/list.\nL Körbes: I literally never heard of this package before.\nMat Ryer: Oh, I'm sorry.\nMark Bates: I've never heard of it either.\nMat Ryer: I'll just write that down here.\nMark Bates: Yeah, thank you.\nMat Ryer: Okay. Next up. [laughter] Mark, it's your turn.\nMark Bates: I'll take Go Doesn't Equal Golang for 400.\nMat Ryer: Okay, let's have a look. This computer program acquired by Google plays the board game Go. It's a computer program acquired by Google, and it plays the board game Go.\nMark Bates: Yeah, you say that... Um...\nMat Ryer: I do say that... That is what I say.\nMark Bates: What is Steam? I have no idea.\nMat Ryer: [fail sound] Incorrect. Kat, would you like to steal this one?\nKat Zień: Nope.\nMat Ryer: There's a documentary about this on Netflix. Still don't wanna steal?\nMark Bates: I haven't seen it...\nKat Zień: No.\nMat Ryer: L, wanna steal it?\nL Körbes: No, I don't watch TV, man. I don't know.\nMat Ryer: Okay... The answer was AlphaGo, which was DeepMind's AI that can beat humans now at the game Go. Very cool.\nL Körbes: Yeah, humans suck.\nMat Ryer: Yeah...\nKat Zień: Not hard to beat. [laughs]\nMat Ryer: Kat, would you like to pick a square, please?\nKat Zień: Yeah, I will go for -- let's go GitHub Stars, 400.\nMat Ryer: 400, okay. A curated listed of all-inspiring Go frameworks, libraries and software.\nKat Zień: What is Awesome Go?\nMat Ryer: Let's see... [win sound] 400 points winging their way to you right now.\nKat Zień: Nice...\nMat Ryer: Well done. L, what do you think?\nL Körbes: I'll take the 200.\nMat Ryer: Okay. Go Doesn't Equal Golang, for 200. A type of small, four-wheeled vehicle, motorized or not, often used by kids.\nL Körbes: It's a go-kart.\nMat Ryer: [win sound.\nL Körbes: Yay!\nMat Ryer: Correct. For 200 points. Nice one. Mr. Bates.\nMark Bates: Oh, boy...\nMat Ryer: It's getting tricky now, ain't it? Down to the last few squares...\nMark Bates: It is, yeah. And everybody's catching up on me too here. It's starting to get a bit close. I'm gonna go big. Let's go GitHub Stars for 1,000.\nMat Ryer: Okay, let's have a look. A collaborative project for the container ecosystem to assemble container-based systems.\nKat Zień: That should have been a 200.\nL Körbes: yeah.\nMark Bates: Well, yeah, it depends on the answer... I'm gonna say \"What is Moby?\"\nMat Ryer: [win sound] Correct. Well done. I don't think that was as easy as it seems...\nMark Bates: [39:58] Well, because you could have said Docker, which was at one point the correct answer, and then it moved... And that's why I was like, Moby.\nMat Ryer: Well, you got it right. Kat, what do you fancy?\nKat Zień: Let's go -- do I risk it or do I not? No, let's go with Gopherpedia for 400.\nMat Ryer: Gopherpedia, 400. Gophers are known to create a network of these for protection, and a means of collecting food.\nKat Zień: I don't know what the actual term is, but they're like the underground canals, or tunnels... I don't know what the name of that is.\nMat Ryer: Okay, well let's take your answer \"tunnels\", and see if that's the correct answer. [win sound]\nKat Zień: Oh, nice.\nMat Ryer: Tunnels! Simple as that. See, we're not here to hurt people and make them feel bad... Unless it's Mark Bates. L, what's your choice?\nL Körbes: Okay, so if the 200 on the standard library was really hard, then the 1,000 is probably really easy, right?\nMark Bates: It stands to reason...\nL Körbes: Let's go with that, yeah.\nMat Ryer: Let's see. Implements utility functions to help with black box testing.\nL Körbes: Yeah, I don't know...\nMat Ryer: Okay. Do you wanna have a--\nL Körbes: Mock?\nMark Bates: You're already just kicking it over to me? [laughs]\nMat Ryer: No, L said Mock.\nMark Bates: Oh, Mock? I thought you said Mark.\nL Körbes: Yeah...\nMat Ryer: [fail sound] Incorrect, I'm afraid. Mr. Bates, would you like to steal this one?\nMark Bates: Um... No.\nMat Ryer: Kat, would you like to steal it? I will say it, on this one, I don't get why this is the description for it. But I did happen to know this one. I didn't write these questions, by the way... But it's a tough one.\nKat Zień: I'm not gonna steal it, it's too risky. I have an idea, but... I'm not gonna risk it.\nMark Bates: Too many points, exactly.\nMat Ryer: What was your idea? We won't do the points, but just say it.\nKat Zień: So my idea was just simply Utils, or Util I think it is... But that's just like a trick question.\nMat Ryer: It was actually the Quick package. Testing/quick.\nMark Bates: Testing/quick, yeah.\nMat Ryer: Yeah, that's what it says...\nL Körbes: Never heard of it.\nMark Bates: It's a package I can never really get to work the way I expect it to work, to be honest.\nMat Ryer: Right... [laughter]\nKat Zień: Why is it called Quick? Because like quick to test?\nMark Bates: Yeah, but it's really hard to use...\nMat Ryer: Interesting.\nKat Zień: Okay...\nMat Ryer: Okay. Who's go is it now? I'm supposed to keep track of this.\nMark Bates: I think it's mine.\nMat Ryer: Yes, it is. Mr. Bates.\nMark Bates: I'm gonna go with Gopherpedia for 600.\nMat Ryer: Okay, let's have a look. Pocket gophers get their name from this, their most characteristic feature.\nMark Bates: What is a front pouch?\nMat Ryer: Okay, what is a front pouch... [fail sound] Oh, it's not correct, I'm afraid. Kat, do you wanna steal this one?\nKat Zień: Nope...\nMat Ryer: Okay... L?\nL Körbes: No idea.\nMat Ryer: Let's have a look... Large cheek. Pouches.\nKat Zień: Oh...\nMark Bates: Yeah, that's right. [unintelligible 00:42:56.21]\nMat Ryer: Yeah. Okay. Kat, let's finish this board off...\nKat Zień: Well, I'll just go with 800.\nMat Ryer: Okay, let's have a look. Bill Murray plays a mentally unstable groundskeeper who hunts a pesky gopher in this 1980 golf comedy. Do you know this one?\nKat Zień: 1980s golf comedy... I wasn't born then. [laughs] I wasn't born yet.\nL Körbes: This is a geriatric quiz.\nMat Ryer: Films still carry on through time... But you love golf comedies, so I'm surprised you --\nKat Zień: Yeah...\nMat Ryer: You're always going on about golf comedies.\nKat Zień: I don't know... I suck at movies.\nMat Ryer: [fail sound] Okay. L, would you like to steal it?\nL Körbes: Nah... The only thing I can think about is Groundhog Day, but it's not that.\nMat Ryer: Right, yeah. Mr. Bates, you might know this one.\nMark Bates: Yes, I do. What is Caddyshack?\nMat Ryer: [win sound] Yes, you've stolen it. Okay. L, it's your turn for this last one... Goldy Gopher cheers alongside students at this American university.\nL Körbes: [44:10] I barely understand the sentence. [laughter]\nMark Bates: I think it's a mascot. There's a mascot called Goldy Gopher.\nL Körbes: Oh...\nMark Bates: So what university is it the mascot at.\nL Körbes: Am I supposed to say like University of Alabama, or something?\nMat Ryer: Yeah, you are supposed to say something like that, yeah.\nL Körbes: Okay, then let's do the math... Where is it that there are gophers? I'm guessing it's like up North...\nMat Ryer: Pretty good, yeah...\nL Körbes: So what's a Northern university... Is Colorado in the North? There was a GopherCon there. Maybe that's relevant. I don't know.\nMark Bates: No, that's out West. That's [unintelligible 00:44:46.01]\nL Körbes: Right... So what's North? Minnesota is North, but are there gophers? It's so cold there... I don't know. University of Michigan? I don't know.\nMat Ryer: Well, you need to pick one of those. You have said the right answer, so you just have to pick one of them.\nL Körbes: I have? Okay, let's go with -- okay, Alabama is a swamp, so it can't be there, I think. I'm bad at geography. Colorado could be... And the other two... Okay, let's go with Colorado. University of Colorado.\nMat Ryer: Okay. [fail sound] I'm sorry, that's incorrect. Mr. Bates, do you know this one?\nMark Bates: I do not.\nMat Ryer: Would you like to steal it, take a guess?\nMark Bates: Clearly not. [laughter]\nMat Ryer: Okay. Kat, do you wanna steal it?\nKat Zień: If I steal it, do I get minus points for getting it wrong?\nMat Ryer: Yeah, I'm afraid so.\nKat Zień: Oh, I don't know... I can't afford it.\nMat Ryer: Okay. Well, you can go into debt, as L has very clearly demonstrated...\nKat Zień: But this is my chance to not go into debt... [laughs]\nMat Ryer: Okay. Let's see the answer then, please. The answer is Minnesota.\nL Körbes: Gosh darn it.\nMat Ryer: Yeah, very close. Gosh darn it as well, they say that there. Gosh darn it... That's how they talk.\nMark Bates: That's their school logo.\nMat Ryer: [laughs] Goldy Gopher.\nMark Bates: \"Here's the University of Minnesota, Gosh darn it!\" [laughter]\nMat Ryer: Well, that's the end of round two... Let's check out the scores and see where we get to. Trailing behind with -200 - it's only L. In second place we've got Kat, with 400, but Bates is definitely taking this game... He has 3,100.\nL Körbes: He's a big liar, Bates... Because he promised us he was gonna lose.\nMark Bates: Mat's been texting me the answers on the back. I don't know if that's legal or not...\nL Körbes: I mean, what's not legal is that all the questions are geared towards people past a certain, you know, length of existence...\nMark Bates: Length of existence... [laughter] Can I help it if Mat asked me to write all the questions for the game show? Oops... Nevermind.\nMat Ryer: Okay. Well, don't worry, it's all still to play for... Maybe.\nMark Bates: I feel like there's a lot of ageism, by the way, happening here. You know, just saying; being attacked.\nL Körbes: You mean on part of the people who wrote the questions, right? [laughter]\nMark Bates: Yeah, exactly...\nBreak: [47:16]\nMat Ryer: Okay, we're gonna go into our final round... This one's different. What's gonna happen is we're gonna show you a category; here's the category, it's Local Host. And there's gonna be one question. You can bet/wager as much as you like. And actually, to make things a little bit more interesting, we're gonna add 700 to everyone's score. So we're gonna bring L up to 500, and we're gonna add 700 for Kat, and we're gonna add 700 for Bates.\nMark Bates: And I assume you can only bet up to the amount of points you actually have...\nMat Ryer: Yeah. So there we go. The category is Local Host. I don't know what this question even is, so it's just up to you to take a stab. What do you think? Kat, how much do you wanna wager?\nKat Zień: I don't know... 300? I'll go for 300.\nMat Ryer: Okay. L?\nL Körbes: All of it.\nMat Ryer: 500. Mr. Bates?\nMark Bates: 100.\nMat Ryer: And you're gonna send your answers privately on Zoom to me. And you're gonna do that now, while this music plays.\nMark Bates: We get a question at least, or just the category?\nMat Ryer: Good point. Okay... Selling literally dozens of copies, this 2015 book was written by none other than your Go Panic host, Mat Ryer. So that's me. I didn't write this question.\nJingle: [50:43]\nMat Ryer: This music will help you think.\nL Körbes: Wait, what's going on with the music...?\nMat Ryer: It's like an anxiety dream.\nMark Bates: I know. That was supposed to help us think, but my anxiety went through the roof.\nMat Ryer: Yeah... In the beginning it helps you think, and then if you haven't made your minds up, then it's just chaos.\nMark Bates: I'll have to double down on my Zoloft after that...\nMat Ryer: [laughs] I don't know what that is, but it sounds like it's good.\nL Körbes: It's medicine.\nMat Ryer: Okay. So I'm gonna read out the answers then... Or let's find out what the real answer is. My book is called \"Go Programming Blueprints\", and it is available still.\nL Körbes: I almost got it...!\nMat Ryer: So Mark, you said \"Go Programming Blue prints.\" Blue and print is two words, but that's fine; you can still have it.\nMark Bates: Thank you. You're too kind.\nMat Ryer: Kat --\nKat Zień: I thought you had five different variations... [laughs]\nMat Ryer: You got it right, \"Go Programming Blueprints.\" And L, you said \"Go Design Patterns\", which is --\nL Körbes: I mean, it's the same idea...\nMat Ryer: Yeah, but it is...\nMark Bates: It is not. [laughs]\nMat Ryer: ...a different title. Yeah. So L, you're down to zero, I'm afraid... Kat, that paid off for you. You have 1,400. But the winner of the Raspberry Pi 400, with 4,000 points - it's Mr. Mark Bates.\nMark Bates: [52:26] Thank you, thank you. Thank you very much.\nMat Ryer: Oh, he's such an annoying winner...\nL Körbes: So Mark, what are you gonna do with the prize?\nMat Ryer: Yeah, what are you gonna do with the Raspberry Pi 400?\nMark Bates: I don't know, I'm gonna have to get a monitor, I guess, to go with it... [laughs]\nKat Zień: A server for electricity.\nMark Bates: And electricity, and the key caps... I'm very excited. Very excited.\nMat Ryer: Yeah. But it's cool.\nL Körbes: Also a mouse.\nMark Bates: And a mouse...\nMat Ryer: Yeah. Unless you just use Vim. Maybe you could just use Vim on it and have it read out... You know what I mean? Like, make it speak to you instead. I don't know. Would that work?\nMark Bates: Just read code. Yeah, that always works so well...\nMat Ryer: Yeah. It'd be fun though, wouldn't it? Did you have a good time during the quiz then?\nKat Zień: It was fun. I was hoping there'd be more questions. Weren't there more questions in the final round?\nMat Ryer: Yeah, we're running out of time unfortunately, so that's just the way it is...\nL Körbes: [53:41] I was expecting to be able to make fun of Mat, but he wasn't playing, so that didn't work out...\nMat Ryer: It's hard to make fun of me, mate.\nL Körbes: No, it's not.\nMark Bates: That's not true at all...\nMat Ryer: Go on, then. Let's do a quick insult.\nKat Zień: It'd be so fun if Mat was playing and we had a question about the book that Mat Ryer wrote, and you got it wrong... That'd be so funny. [laughter]\nMark Bates: Mat, next time might I recommend renting some chest hair for under your shirt, if you're gonna open it up that much...\nMat Ryer: Oh, it's not open far, is it? Would you rather like that, like some Puritan?\nMark Bates: Well, far enough to know that you need to rent chest hair next time...\nMat Ryer: [laughs] Where do you rent chest hair from?\nMark Bates: I don't know...\nKat Zień: The wig shop?\nMark Bates: ...the Burt Reynolds Museum? [laughter]\nMat Ryer: Can you just use a wig? Surely it has to be dedicated. You can't just do that...\nKat Zień: Well, you know how some men just get the patch; you can get a patch of hair for the top and just glue it here.\nMat Ryer: Yeah. If I'm going to a wig shop, I'm gonna wear a wig.\nMark Bates: Why don't you have them do you top to bottom? I mean... [laughter]\nMat Ryer: Yeah. [unintelligible 00:54:31.15]\nMark Bates: Just go in there and say \"I want the works. Top to bottom, I want hair.\"\nMat Ryer: Yeah. I'd love that. And then they'd just set to work with the Pritt stick, sticking it all on.\nMark Bates: Exactly. It'll be like that scene in Wizard of Oz, where they're buffin' up the Tin Man, and they're stuffin' the Scarecrow with [unintelligible 00:54:51.28] and everything.\nMat Ryer: Yeah. I'd love that, mate. I'd love that. I'd be a sort of character... But not, I have a receding -- but I like to say what I like in hair, I more than make up for it in forehead. [laughter]\nMark Bates: That is true.\nMat Ryer: I see people, like -- L, you've got loads of hair. Bates, you've got loads. So have you, Kat. And I feel like we should have some socialism, like your hairs should be taxed. People that just have loads of hair - that should be taxed, and then I get some. Do you know what I mean? Because it's not fair. What do you think?\nMark Bates: I'll send you some in the Post, next time I cut my hair.\nL Körbes: But then is it only for hair on your head, or is it hair general?\nMark Bates: Gotta go... [laughter]\nMat Ryer: Yes, we're not gonna answer that one...\nMark Bates: We're on the verge of a COC violation there.\nMat Ryer: Mm-hm. I'm pleased you didn't pronounce that, Mark, like you normally do.\nKat Zień: Well, on the plus side, Mat, think of all the shampoo money that you get to save on.\nMat Ryer: I'm absolutely loaded because I don't need any shampoo.\nKat Zień: I bet you are.\nMat Ryer: I just use a tiny bit.\nMark Bates: Yeah, but he has to double down on the Turtle Wax to keep that thing shiny...\nMat Ryer: Yeah. And that's more expensive, so I am net down, basically, in the end, once I do my books at the end of the month... [laughter] I find that I've wasted it. Yeah, I don't know...\n[56:19] Well, that's why I like the Go community, because it's so all-accepting, and everyone's welcoming, and things... So it's okay if you do have a forehead like this; or as my cousin called it, a fivehead.\nMark Bates: Or if you're incredibly old and geriatric, like I am...\nMat Ryer: But you do get good quizzes if you've been around longer. You do get good at quizzes, don't you?\nMark Bates: Yeah, you do.\nMat Ryer: Some of the questions I think I agree... I think we need some more diversity on the question panel of who writes the questions.\nL Körbes: I was part of a pop quiz team once, and the questions were all like \"Who won the tennis championship in 1976?\" and I was like \"Dude, my mom is too young to know that.\" [laughter]\nMat Ryer: Yeah, but the information is available after that though... You know what I mean?\nMark Bates: You don't have to have lived through it, yeah.\nMat Ryer: Yeah. Because I do Beatles questions sometimes. I get them right, because --\nMark Bates: He just sits around the house and asks himself Beatles questions [unintelligible 00:57:19.13] [laughter]\nMat Ryer: That's how you practice.\nL Körbes: It sounds like a fun hobby.\nMat Ryer: But what I mean is -- you know, I think John Lennon had died before I was even born, but... Yeah, you can still learn the information.\nL Körbes: Rest in peace, John Lennon.\nMark Bates: But are you all that young, really? Am I the only person who was alive when John Lennon was killed?\nL Körbes: Yeah...\nMark Bates: I hate you all. Is this show over yet? I've gotta go yell at the sky and tell some people to get off my lawn. [laughter]\nL Körbes: You have a lawn? Wow.\nMark Bates: I do. And I do yell at the neighbor kids for not shutting the gate to my backyard all the time.\nMat Ryer: Why are they even in your backgarden? That's the worrying thing.\nMark Bates: Because we have the nicest yard in the neighborhood. It's big and it's flat... We live in a city, so you can play soccer in my backyard. It's a nice, big field, so...\nMat Ryer: Right... Nice.\nMark Bates: But we also have a dog that escapes, so the dog gets out if they don't shut the gate. I am Grumpy Old Man Bates. \"Shut the damn gate...!!\"\nMat Ryer: Your name, to me, Mark, sounds like an incomplete sentence. I feel like there should be more to it. It's like a cliffhanger. \"Mark Bates... What?! What does he bate?\" I just always wanna know. Cliffhanger name.\nMark Bates: Thanks. Yeah... Of all the things you can make fun of my name for, that was probably the worst.\nMat Ryer: Yeah, yeah. Well, I'd rather be original than obvious... You know, as one of the proverbs says.\nMark Bates: Well, the good news is you're neither.\nMat Ryer: Is that good news? It doesn't feel like good news. It hurts my tummy when you tell me that.\nMark Bates: Fair enough. [laughter] A grumble in the bumble. Are we still doing a show?\nMat Ryer: We're still doing it, but we're about to finish. I'm just kind of -- we're hanging out, and then our time's about to... We're gonna be told momentarily that we're off... But we're not, we're still on air. This is the sort of post-show hangout.\nL Körbes: You know, this is kind of what's lacking in online conferences, usually. It's like that time after the serious stuff is done, when we just make fun of each other's names and foreheads... That's what it's all about. [laughter]\nKat Zień: The corridor hangs...\nL Körbes: Yeah...\nMark Bates: Or the late-night hotel room hangs...\nKat Zień: Yeah... The late-night whiskeys.\nL Körbes: It's hard to remember those though...\nMark Bates: It's true, but I do so enjoy them. I'm missing all of you at the conference; I'm missing everybody.\nL Körbes: Yeah.\nMark Bates: It's been a tough year... I think I can speak for everybody - we all have friends at these conferences, and you get to see everybody... I really miss it.\nMat Ryer: That's true, that's true.\nKat Zień: It was nice to take a break from the traveling for a while. And it's like \"Oh yeah, it's nice. I can rest.\"\nMark Bates: Oh, I don't miss the travel. I'm 100% with you on that.\nKat Zień: Yeah, yeah, yeah. So the travel is not what you miss, but you do miss -- I don't even miss the talks that much, because the talks you can watch online anyway. But I just miss the genuine bumping into people on the corridor, seeing people that you normally don't see, and you only see them at conferences...\nMat Ryer: Well, hopefully next year is the time for it. I will have to say, thank you so much for joining Go Panic, this crazy quiz... Thank you very much to Kat, L and Mark, and we'll see you next time."
   },
   
   {
    "title": "js-party-64.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/jsparty/js-party-64.md",
    "transcript": "Suz Hinton: Good day! You're listening to JS Party. This is another episode where we consider JavaScript to be a party. Thank you so much for joining us. We actually have some really exciting stuff to talk about this particular episode. We have our regular panelist - Nick, it's great to see you!\nNick Nisi: Yeah, good seeing you, too!\nSuz Hinton: And we have a very special guest joining us today to talk about a very exciting topic, machine learning. I am very excited to welcome Paige Bailey.\nPaige Bailey: Hey, friends! Hello! Delighted to be here and to talk to you all about JavaScript and about TensorFlow.js.\nSuz Hinton: Paige, you currently work at Google, and you're a senior technical advocate for TensorFlow, is that right?\nPaige Bailey: Yeah, I am on the dev rel team for TensorFlow, which is embedded within our research and machine intelligence org. Google has a whole bunch of developer advocates, you probably follow a lot of them on Twitter, or whatever your favorite flavor of social media is... But our org is a little bit different, in that it's embedded outside of cloud, and right with the TensorFlow team. So it's kind of rad that if something is broke, I can literally look over my desk and yell at somebody to fix it... So it's kind of awesome.\nSuz Hinton: That sounds very cool. So we're gonna back up a little bit, because I know that in the JavaScript community some of us will have heard of just the term TensorFlow, or the actual tool, but not everybody knows what it is, so...\nNick Nisi: Me!\nPaige Bailey: [laughs]\nSuz Hinton: Nick's definitely interested in finding this out too, so... How does TensorFlow fit into machine learning and what exactly is it?\nPaige Bailey: Awesome. So TensorFlow is a library intended for numerical computation of all sorts. It's not just for deep learning. You can also do traditional machine learning. If you have familiarity with things like decision trees, or random forests, or boosted trees, or super-vector machines, or logistic regression - all that stuff is supported with TensorFlow as well. So just think of it as like a numerical computing library.\nIf you have experience using Python, you might have used something called NumPy before, and TensorFlow can be almost used as a replacement for NumPy. But what it's intended to be is a collection of tools, a very expansive API that gives you the ability to do these complex numerical tasks in a more straightforward way that can also scale. So not just on small amounts of data, but on any sort of data size that you have available and on a variety of data types; everything from text, to csv files, to video, to audio, to pictures... All sorts of stuff.\n[04:20] TensorFlow got a whole bunch of press around 2015 when it was first released, because it created this really first robust end-to-end machine learning framework for doing these complex deep neural nets. And it had been used at Google historically for years and years under a different name, but Jeff Dean, who's kind of a baller, was like, \"Hey man, we're gonna open source this...\" (it's true!), and then they did, and they've just been open sourcing more and more of it since then.\nSo that is kind of a long-winded example to what TensorFlow is. The TL;DR version is it's tools that help you do predictive models, and also any sort of complex numerical computation... Usually with Python, but it's grown to be a collection of languages, lots and lots of additional products. Now we have Swift for TensorFlow, we have TensorFlow.js, we have TensorFlow Lite if you wanna put TensorFlow on a phone, we have TensorFlow Extended if you wanna build these end-to-end machine learning pipelines, we have... Oh god, we've got TensorBoard to visualize machine learning, we've got JAX and XLA, and... The last time I checked, there were like 77 sub-projects under the TensorFlow organization repo on GitHub. So it's a big honking thing. Does that help clarify it a little bit, or should I give tangible examples of stuff you can do with TensorFlow?\nNick Nisi: I'm obviously very new to machine learning and looking into all of this, but when I look for YouTube videos and such and the topic of machine learning comes up - maybe I'm just drawn to the cool name, but \"neural networks\" is the thing that comes to mind... So is TensorFlow a way to build neural networks, or is neural networks just a generic term for all of the computational things that you can do with TensorFlow, or what's the relationship between those two.\nPaige Bailey: That's a great question. Neural networks are one kind of algorithm, or one kind of implementation that you can have for machine learning models. TensorFlow certainly helps you build those, and with the newer versions of TensorFlow, since Keras - which is a high-level API - has been embedded, you can build complex neural networks, train them, fit them, use them to predict things, with less than 10 lines of code of Python. And the same goes for TensorFlow.js - you can build complex neural network architectures capable of analyzing billions of images, or very massive input data, without having to think too hard about it. That's the idea - you shouldn't have to have a Ph.D. in machine learning, you shouldn't have to understand the intricacies of linear algebra and ordinary differential equations and all the rest of it to be able to implement a neural network.\nSuz Hinton: Can I ask what is the Hello World of a neural network, or what's the Hello World that you would normally do in TensorFlow when you were first getting started?\nPaige Bailey: [07:52] The Hello World of TensorFlow is probably the mnist example. Mnist is -- if you've been doing machine learning, it is horrifically painful, because the dataset is used everywhere... It's basically being able to take in images of integers, so handwritten digits from 0 to 9, and being able to classify them as to what digit they actually are. I am going in the Changelog Slack channel, I am going to put in the Python code that is sort of all that you would need to do in order to implement that model; it really is just a few lines... And what it's doing, if you take a look at the chat window, is that you import the TensorFlow library, you import the dataset, you divide it into Training and Testing...\nSo you would take a portion of your data to build the model off of, and then you would hold out a little bit to make sure that whatever prediction you made was accurate, so data that your model hadn't seen before, so it couldn't cheat, you know? Then you would build out a model, and here we have a dense layer, a dropout layer and another dense layer. You would compile it with a loss function called \"sparse categorical crossentropy\" and an optimizer called the AdamOptimizer. There are lots of different kinds for losses and optimizers, and you can have a lot of different metrics that you would care about, but those are just the ones that you would use there. You run model.fit and say how many epochs you want, how many times you wanna cycle completely through the data, and then you would use model.evaluate to get the answer of how right or how wrong you are. But that's all it is.\nAll machine learning models and all machine learning projects really follow that same pattern, in that you have training data, you have test data, you build some sort of model architecture, you run it on your training data, and then you test how accurate you were.\nThe intro to words that are used in TensorFlow glossary - I love it, yes! So we have a thing at Google called The Machine Learning Crash Course, and we have a machine learning glossary associated with the Machine Learning Crash Course. It is also a lot of words, but the words are explained, and you actually end up with some terms that are kind of cool, like crash blossom. Crash blossom should totally be the name of a band, but what it means is that it's a sentence of phrase with an ambiguous meaning. You see those a lot in newspaper headlines; I think that the version that they mention on the website is \"Red tape holds up skyscraper\", because it's like \"Wait, what? What does that actually mean?\" But I love it; they cause a lot of problems in natural language understanding tasks, because of ambiguous meanings.\nSuz Hinton: This is a Hello World example, but it's actually being applied to lots of different real-world cases, for like at least a decade or two, right? For example, recognizing handwritten numbers is very useful when you're trying to cash a check by taking a photo of the check. Is that sort of what that would be used for?\nPaige Bailey: [11:52] Absolutely. You are spot on. Also, I think the first use case that it was used for was back in the '90s... Whenever the U.S. postal service, whenever people still sent mail, they would use it to detect the zip codes on envelopes, and automatically sort them based on that. So it's sort of a very useful application; everybody loves being able to automatically transcribe something that they take a picture of, but it's also straightforward in that it's less than ten lines of code to do a thing.\nFor that last layer you might notice that it says \"activation = tf.nn.softmax\", and then there's also a 10 there. What the 10 means is that you have 10 different options for things that it could classify... So 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, and then softmax just means that it would be a classification problem. So you're picking one of those ten things, as opposed to giving a numeric value, like 9.2 or 12.5 as an estimate.\nNick Nisi: So this Hello World example with TensorFlow - is this specifically a neural network?\nPaige Bailey: That is a neural network, yeah. It's using the higher-level API that I was telling you about before, Keras... And that's one example of a neural network. And let me also link the tutorials page.\nNick Nisi: I actually watched a video on this beforehand, as research on this specific problem, and I think that this is actually doing the same thing, because I see 28 by 28 in there for input shape, and I'm assuming that that's the pixels of the image that you're trying to classify.\nPaige Bailey: Yeah, you are 100% spot on.\nNick Nisi: Yeah, so it's turning that into just like an array of pixel values for zeros or ones, or values that represent whether the pixel is colored or not, and then it's taking that from -- I forgot how many that is... I can't remember exactly how many are in a 28 by 28 array, but taking that and then boiling it down to a number 0 through 9.\nPaige Bailey: Yup. And the mentality behind... So the idea behind Keras and behind the super high-level APIs is that developers -- so if you're building a web application and you wanna be able to do image classification, or if you want to be able to do text classification or something of that nature, you shouldn't have to... I mean, it's cool to understand the internals of a neural network, and to understand that when you select this particular kind of loss, it's applying this sort of transformation, or if you select an atom optimizer, it's putting this much tweaking the numbers and turning the knobs and dials in this way in order to help better predict whatever value that you're trying to... But the idea is that if you're a web application developer, you shouldn't have to know all of the internals of how a neural network works in order to deploy a model to production. But it's good to know, and it's especially good to know about the ethics of models and about how data can influence model decisions, but in terms of having to know the linear algebra - that shouldn't be a prerequisite for being able to do cool things with machine learning.\nSuz Hinton: [15:57] You mentioned web developers, and you mentioned also before that TensorFlow.js is a thing; theoretically, is this just me running a library called TensorFlow.js in the browser, and then would I be able to actually load something like a model that is doing like the mnist dataset to figure out what the handwritten number is - is that something that you could practically run in the browser, and is the browser powerful enough to do that?\nPaige Bailey: Oh yeah, absolutely. Yes, the browser is 100% powerful enough to run TensorFlow.js, and they also recently released Node bindings...\nSuz Hinton: Uuh...\nPaige Bailey: Yeah, so that allows the same JavaScript code to work in both the browser and Node.js, while binding to the underlying C implementation. That's pretty rad... And there's also -- so being able to use the GPU that you have in your laptop to train, even though you're running and creating this model in the browser, is really nifty. Does that sort of answer the question?\nYou can do a lot of really interesting -- most of my favorite TensorFlow examples, actually, are all created with TensorFlow.js. You can do pose detection in the browser - so if you're standing in front of your webcam and you're sort of flailing your arms around, or doing a jumping jack or something, it's able to detect where your limbs happen to be, it's able to do eye-tracking, able to do basic object segmentation, so it's able to detect that I am a human and draw a little line around me...\nThere's this guy named Tero; let me also put a link to his work... His handle on CodePen is @teropa, but he does the most awesome CodePens for experimental drum machines using neural networks, and sort of manipulating harmonics using deep learning. So the idea is that you can create a melody with the guitar, and then automatically have a drum accompaniment, or a bass accompaniment created for you. I'm enchanted by the creativity that folks have been showing with the TensorFlow.js examples.\nNick Nisi: These examples - are they using a pre-trained model, and then just applying that in real-time in JS?\nPaige Bailey: Yes. I think the examples that you're playing with on the website - they're using a pre-trained model. But you would also be able to train your own models in the browser, if you wanted to. If you wanted to do object detection on custom images or custom entities, you could use transfer learning on top of the existing model to make those modifications. I love the pose detection, that's interesting.\nSuz Hinton: Would there be a time that you would train something in the browser and a time that you would not train stuff in the browser? Is there sort of performance considerations to take in account when deciding whether or not you actually need to train something in the TensorFlow.js environment?\nPaige Bailey: [19:56] That is a great, great question. I personally prefer -- hm, let me back-track... So if you have a very, very large model, you should probably be training it using TensorFlow Core, and then exporting it as a saved model to TensorFlow.js. The friendly 10 lines of code syntax that I showed you before - that works to export as a saved model.\nIf you have a small machine learning problem, it's fine to train it in TensorFlow.js. You might not see as high of accuracy as you would expect from a TensorFlow Core model, but it will still be good enough to solve the task. And then also the slowness factor... So if you train in a browser, using TensorFlow.js, it will probably be a bit slower to train than if you use TensorFlow Core... And especially for large-scale models. So the small-scale stuff - it will still train in a reasonable amount of time; the large-scale stuff - it might be 10 to 15 times slower.\nI think that there's a benchmark on the website as well, to kind of give an idea... Yeah, let me send a link over to that guide. So the idea is that, for the most part, you can train lots of models using TensorFlow.js. They're creating a models repo... Let me pull up the link for that one as well. But the idea for that is sort of a model garden where, again, you don't have to know everything in the world about neural networks and machine learning in order to implement and to use the things that researchers have created. So that link right there is a link to tfjs models on GitHub. You can see mobilenet, so classifying images with labels, posenet, so the real-time pose detection that you can see in the browser, object detection, speech commands, k-nearest neighbors, and they're growing out this repo pretty substantially and very, very quickly. You can use off-the-shelf, state of the art models without having to understand the machine learning internals.\nNick Nisi: That's really cool. So I can just pick a model based on the problem I want, whether it's trying to translate speech, or trying to find edges of things, or digits, like in that example... Is there a way to take a pre-made model like this and manipulate it a little bit, to change it for a slightly different problem set?\nPaige Bailey: Yes, and that's something called transfer learning. What transfer learning does is it takes a model that's been trained on sort of a large-scale dataset, or maybe with some very powerful architecture over a long period of time. It takes the insight that was gained from that model, and then it adds a couple of additional layers to the top.\n[23:28] For example, the image detection model - it can detect a lot of different entities out of the box. It can detect dogs, it can detect cats, it can detect coffee mugs potentially, and people... But if you wanted it to recognize specific people or specific kinds of dogs... So to say like \"This is a Chihuahua, and that is a Dachshund, and that is a Boston Terrier\", you would be able to build off all of the information that the model has already learned about \"Oh yeah, that's a dog\", provide maybe five to ten examples of what a Boston Terrier looks like, and five to ten examples of what a Chihuahua looks like, and five to ten examples of what whatever your favorite breed of dog is, and then that model would be able to re-train... It wouldn't take nearly as long, because you would have much less data, and it would have this entire, big, long history of things it's already learned to pull from, but it would be able to understand \"Okay, I see an image, and that is a Chihuahua. And that is a Boston Terrier etc.\" for that task.\nThat was an image example, but it works the same way for text - though text is a little bit trickier to apply in multiple domains - to video and to audio.\nSuz Hinton: I actually think that I've done this with audio, now that I think of it.\nPaige Bailey: What use case?\nSuz Hinton: Oh my Twitch stream I wanted to have automated closed-captions, because I couldn't pull together a budget to have live, human-made captions... So I took a regular American English conversational model and then I created a dataset of my own speaking, the words that I was saying on Twitch stream, obviously my accent and any background noise, and I used that along with some subtitle files in order to try and generate an additional layer on top to make it slightly more accurate. Is that the same as what you've just said?\nPaige Bailey: Absolutely, that's transfer learning. It's taking all of the information that it's used to understand English from a variety of different speakers, and then it's sort of specially tuning to your voice. So it already understands what specific words are, and now it understands what those words sound like when Suz says them. So yeah, you used transfer learning. Congratulations! [laughs]\nSuz Hinton: Yay! It did actually push the accuracy up. It didn't push it up enough for me... Like, still one in ten words is wrong, which sounds really great, but it does sort of go on a weird chain if one word is wrong, for example... But it was really exciting to see that that works, and that I didn't have to do the hard work of having to create that existing model in the first place, which is really cool.\nPaige Bailey: Yeah. And having to source all of the data, that's the other big thing. Because to train models to really high accuracies you need a massive amount of data, and also really high-powered hardware, so clusters of GPUs, or things like TPUs... Or if you wanted to roll your own [unintelligible 00:26:54.04] but sort of those high-end architectures that are also pretty pricey... And a lot of people, myself included - I don't have access to massive amounts of data, so being able to take the models that other folks have created and to build off them with my much smaller datasets, but still achieve high accuracy... It's pretty nifty.\nBreak: [27:29]\nSuz Hinton: So we talked about the fact that you can run models and also train models in the browser, but one thing that we sort of haven't really touched on is why are we trying to do this in the browser itself; what kind of advantages does that give us?\nPaige Bailey: That's a great question. I think one of the reasons that TensorFlow.js started was because not everybody has access to high-end computational power. Browsers are kind of ubiquitous. If you wanna hit everybody, you probably would want to implement it in the browser, as opposed to making somebody use Python, or making somebody use something like C++. So having machine learning in the browser was a natural choice, in that it's where you can impact the most developers, and give them the tools to create these impactful projects.\nAnother reason I think is because you have so many additional sort of -- like webcams, and being able to use posenet or object detection from the webcam on your laptop... That's also an amazing tool. And being able to open up a browser from a phone is also pretty rad. That was kind of the motivation - we wanna do machine learning for everybody. If we're wanting to do it for everybody, it can't just be Python; let's put it in the browser, too.\nSuz Hinton: That's really cool.\nNick Nisi: If it can be written in JavaScript, it eventually will be. [laughter]\nPaige Bailey: SkyNet's gonna be written in JavaScript, right? That's the thing...\nNick Nisi: For sure. We touched on this a little bit at the break, but could you maybe summarize what some production examples of TensorFlow might be?\nPaige Bailey: Oh, absolutely. This is one of my favorite topics - machine learning sounds great, but I don't really care about hot dog/not hot dog... [laughter] Or I don't think that there's a use case for determining if something is a cat or not. That seems kind of silly... And I agree, I agree 100%. But some tangible use cases that you could have, for example, would be - imagine how cool it would be if you were typing an email and you were typing a sentence that might be taken offensively, without recognizing it... Because it's the middle of the day, you haven't had coffee maybe; everybody feels kind of stressed at work... Think about how cool it would be if you had an automatic typo-looking suggestion pop-up saying \"Hey, this term might be taken in a bad way. Maybe try these other words instead, that might be a little bit less aggressive.\" Or maybe \"This sentence could be taken multiple ways. Maybe you should include an emoji to make sure that folks know that you're not being angry, you're just being playful\", or something of that nature.\n[32:09] Another great use case is Amazon - whenever it makes recommendations of what products you should buy, or Netflix, whenever it makes recommendations that \"Hey, you should watch Black Mirror.\" It's because it's looking at all of the other viewing patterns of people similar to you, analyzing all of them, doing something called Market Basket Analysis, or matrix factorization even. Market Basket Analysis is kind of computationally-intensive, but that's a rabbit hole.\nSo just think of it as it's looking at a lot of people who have interests similar to yours, and it's saying \"Well, Jane, who also liked A, B and C, watched D, so maybe Suz would also like D.\" That's another example.\nThe other use case that we talk about a lot at Google is a mobile application that's able to detect diseases in plants. This is being used in Africa, where Wi-Fi connectivity is kind of spotty. The model has actually been exported, so it doesn't have to rely on internet connectivity. Farmers can take a picture of a plant leaf, and based on a corpus of data that it's been trained against, the model can tell them what kind of disease that plant leaf has, and then also how they would go about treating it. Those kinds of specific use cases.\nI feel like the machine learning community latches on to some of the more playful aspects and the more fun examples, but in reality there are so many impactful ways that machine learning can help businesses, and they aren't quite as sexy as the Silicon Valley examples, but they are really cool. And TensorFlow.js and TensorFlow are more than capable of taking care of any machine learning task.\nSuz Hinton: That's really cool. And given that this is being used in production, and it's becoming really popular, of course another big topic in machine learning too is things like machine learning ethics, and where the data is actually coming from to train these models, and things like that... And then you even look at things like adversarial machine learning attacks as well. I wanted to leave enough time to talk about that as well, just so that people are aware of some of the gotcha's to look out for... But let's talk about maybe first some of the more foundational parts of machine learning ethics and data sources, and things like that. Can you introduce us to where machine learning can sometimes go wrong?\nPaige Bailey: Absolutely. I'm also going to -- I hope Slack supports GIFs. Let me put that in there. This is something called TensorFlow model analysis. Oh man, it didn't do it; gosh darn! Let me put the link there, and then also the link to the GitHub repo. There's that, and the what-if tool as well. So machine learning models - they're only as good as the data that you put into them. That is not a debatable topic.\n[36:00] If you have a child that you're teaching how to recognize squares and triangles and circles and all the rest of it, if you haven't been teaching the child what a circle looks like, there's no way that he/she would be able to understand that shape.\nOr say you're talking about dogs in a country that only has five particular breeds, and you go to a different country that has a dog that's not one of those five breeds - you probably wouldn't be able to accurately classify it, because you had never seen that data before. That's kind of a fumbled example of your data is incredibly impactful. And what you see whenever you have data that's biased being used to create machine learning models, is that groups that are marginalized or groups that are excluded from the dataset, or included in the dataset but in a negative way, just have those stereotypes perpetuated. And what does that mean?\nA lot of people have heard about -- so there's a test that incarcerated individuals take towards the end of their prison sentence, that determines whether or not they would be eligible for a parole. This test includes a lot of questions like \"Was anybody in your family also incarcerated?\" or \"Were your parents divorced?\" or \"Did you go to college?\" A lot of questions that really have nothing to do with the person themselves, and are completely out of control of the person. You don't have any control over whether or not your parents get divorced; you don't have any control over whether or not people in your family have gone to prison. And those questions - they negatively impact people in already marginalized groups, so people of color, and people who come from lower economic backgrounds. And what they've found is that this test was preferentially granting early release of prison or early parole to white males who came from wealthier backgrounds, and it was negatively impacting men of color who came from impoverished backgrounds. And that was entirely due to the fact that the machine learning model that was created to predict whether or not people would have recidivism, whether or not they would start doing crime, was being built on this corpus of data that was sort of pointing towards men of color being especially likely to do that, when that is not the case at all.\nSo building models on data that is already biased means that you're going to have a biased model, and it's really difficult to understand where some of those biases could arise in data, which is why we have built tools as part of TensorFlow, to help understand datasets and to spot those nuanced differences and features.\nSo here you have two links - one is the model analysis tool, and the other one is the what-if tool from our Google research entity called PAIR, which is People in AI Research What it does is it sort of guides you towards questions that would be useful to ask as you're creating your model, to say like \"Well, if we look at the distributions for marginalized groups, what does this mean?\" And also it helps sport related feature types; for example, zip code and race are very commonly related, and that might not necessarily be straightforward if you didn't have experience working with census data. Does that make sense?\nSuz Hinton: [40:17] It does, and I'm really glad that there are these frameworks coming out for you to ask those questions... And I even remember referring to one of your resources that you made (I think) at least a year ago, which was very helpful for me to understand where things can go wrong.\nPaige Bailey: Yeah, the one from rOpenSci. I can link to that as well. If you're a researcher, nobody ever wants to hurt anybody; \"assume no harm\" should be the first thought for all of us. If people aren't given insight into the questions that they should be asking, it's really hard for them to understand where things could go wrong.\nThe resource that Suz is mentioning was a collection of questions that can be asked throughout the entire model-building process about where is your data sourced, how is it refreshed, how are you intending to keep it up to date, what would be one of the ways that the ethical machine learning vignette, and it was for rOpenSci Unconf. It was very focused on spotting and preventing proxy biases in machine learning, and I used the example of race and zip code when predicting [unintelligible 00:41:55.12]\nNick Nisi: Very cool. We'll make sure to provide all of these in the show notes for the episode. It makes me wonder if we can eventually get meta with this kind of problem, because as you mentioned, there's so many problems out there that are already using machine learning to, you know, figure out what I wanna buy next on Amazon, or watch next on Netflix, or whatever, but then all of these models that might have been created that do have these biases in them - I'm wondering if machine learning can help you predict if your model is going to have bias, eventually.\nPaige Bailey: Yeah, I would love to see that... Or at least being able to better understand data sources, and to be able to spot when you might have unintentional bias in your data. That's a great idea.\nSuz Hinton: And just on that topic, if you're not really in the machine learning field and you're actually trying to choose a model to use for yourself, but you don't have a lot of that background knowledge, given that models can really be a black box, is there any way for you to be able to somehow judge if it's going to be a model that isn't biased in negative ways? What kind of questions can you ask yourself when you're on that side and you're not actually the person developing the model?\nPaige Bailey: Gotcha. It's always really hard to understand what data goes into a model if you don't have a direct influence on that model's creation process... But there are tools -- I'm thinking in particular of TensorBoard, which is... Let me put a link to that as well, and then also a link to the TensorBoard GIF, which is probably the best description of it. It allows you to look at model architectures and to understand what decisions are being made, where and when.\n[44:02] For example, one study that was done a while back - it's kind of notorious in the machine learning community - is that they had a collection of photos of people, just potrait photos of folks, and the research question was something to the effect of \"Can I detect whether or not this person is gay?\" Detecting whether or not a person was gay, based solely on a photo... Which is ridiculous. That is one of the silliest research questions that I have ever heard in my entire life. But an academic published a paper saying \"Yes, absolutely they could, and here's how, with machine learning.\"\nSo a group of researchers at Stanford challenged that assertion and said \"I don't think that you are able to accurately gauge whether or not a person is gay based on a photo.\" And they've found by highlighting the pixels that were being used to make those assessments during the machine learning process that what the model was picking up on wasn't anything about the human themselves; it was detecting piercings on the face, so people with alternative sexualities or people who prefer -- for whatever reason, the sourced images had preferentially more piercings that people who were heterosexual, and the model was picking up on that. It would detect a piercing, and it was using that as a proxy to say \"This person is gay\", which again, is ridiculous.\nAnd then there was the other aspect, that often the photos of people who were gay were taken from a different perspective, from looking up into the camera, as opposed to looking straight on, and that was also being picked up by the machine learning model... And it has nothing to do with the person themselves, just the sort of way that the photo was taken. It's very unnerving to think that that was a paper that was published, peer-reviewed before published, and that nobody challenged throughout that process.\nNick Nisi: Yeah, that's crazy.\nPaige Bailey: Yeah, and I can hunt down a link for the PDF of that guy as well... But it was awful. I see a question from David, \"AI leading to inadvertent discrimination is really interesting\" and that is 100% true. Tiny input differences do have massively different outputs over time.\nThe other thing is that if the models aren't kind of checked and QC-ed, they just perpetuate the bad assessments that they were making before, you know what I mean? So they will preferentially not give loans to people of color who come from low economic backgrounds, or they will preferentially not allow people of color to be able to be up for parole in a reasonable amount of time... Unless you are actively asking questions to challenge the model's assessments.\n[47:57] As an industry, I think that it's on all of us, if you're doing anything with machine learning, to ask these questions if something smells fishy... Again, it doesn't matter if you have a Ph.D. If it sounds like it a model assessment might be wrong or biased in some way, absolutely challenge the data science team that's being used to create it.\nThe entity that I was mentioning before, PAIR at Google, People in AI Research, is a human-centered research and design initiative to make AI partnerships fair, and to make sure that we have tools that will be able to help spot these biases. TensorBoard is one of them, the what-if tool is one of them, the visualizations that happen through this publication called Distill.pub - and that's supposed to be a link, but I guess it didn't go... But it's this beautiful publication that goes into what is actually happening whenever a machine learning model makes its assessment, and how can we really understand the mathematics behind it, because it's so dang complicated; it's more complicated than a human could possibly understand... But how can we shine a light onto these decisions.\nSuz Hinton: This is great... And I wanted to also throw in a couple of recommendations for myself, if you're trying to understand this topic at a higher level - I found two books that really helped me: Technically Wrong, and also Weapons of Math Destruction, which was a really clever title, but it was also very helpful. So if you were looking to get a high-level grasp of the topics before diving into some of these more technical resources, then I would definitely recommend those two books.\nPaige Bailey: Absolutely. And then there's also like a little one-hour ethics extension to Google's Machine Learning crash course - 60 minutes, self-paced, and it goes through a lot of biases that you experience in machine learning, but it's also interesting in that those biases are expressed in everyday life as well. So if it can fool a human, it can also fool a model. It's really interesting to see.\nBreak: [50:43]\nSuz Hinton: I am so excited to talk to you about this topic... [laughter] So Paige...\nPaige Bailey: I know what you're gonna ask, and I'm super-jacked about it! [laughter]\nSuz Hinton: For those who are listening, Paige and I actually still work together, and one particular topic that I got excited about, that I know that Paige is really excited about, that I couldn't not mention - Paige can you talk to us about the topic of adversarial machine learning? What is that? And it does actually tie into the ethics a little bit too, from the previous segment.\nPaige Bailey: Absolutely, and I just posted a link in the Slack channel about a library called CleverHans, which doesn't get nearly enough love, but which is something that I vitally enjoy. One of my colleagues, Ian Goodfellow, is the lead. Think of it as the Red Team from machine learning. The Red Team for security is like \"Okay, you've built this enchanting ivory tower system... I'm gonna see if I can bring it down.\" CleverHans is like the Red Team for machine learning.\nSuz Hinton: Uuh...!\nPaige Bailey: Yeah, right...? So a question - you have machine learning models, you have this great pipeline where you can input some sort of data, and then get back some sort of predictive assessments with some sort of confidence level, so \"I think that this is a dog with 85% confidence\", how would you go about breaking that? And the answer is that it is exceedingly fragile to be able to manipulate these systems in ways that would bring them down catastrophically. What do I mean by that?\nThere's this great example - and I'll send a link to the paper; it's probably listed on the CleverHans GitHub as well - there was a research team that was looking at a classification model for pandas and for gibbons (monkeys), so it was looking at various animal types... And you would have an image that was very clearly a panda; the machine learning model would correctly assess that it was a panda, with pretty good confidence, and then the question was made of \"Well, what if I introduce a small amount of noise into this image?\" What if I take just random noise, apply it -- here we go... I found the tweet from -- because everything I do, I tweet. And eventually, I will be an old lady and I will be delighted, because I will have this complete timeline of my life. But there we go.\nSo it has a panda, with 57.7% confidence. You introduce a very small amount of random noise to the image. To a human, it still looks exactly like a panda, it looks exactly the same, but suddenly your neural network thinks that it's a gibbon, a monkey, with 99.3% confidence - a massive amount of certainty that this is a gibbon, when in reality it is totally a panda.\nYou probably also saw the example a while back where you had a turtle that was painted in such a way that a neural network thought that it was a gun... And there are stickers that can be placed on street signs, so that neural networks that are used for self-driving cars might not be able to detect that those are street signs that they should stop at.\n[56:08] There are ways that you can put on make-up, that make it so that the facial recognition networks don't recognize who you are... It's amazing -- well, not amazing; it's terrifying, and awesome, that these systems have been so optimized for particular tasks that they just break if you show them something that's completely outside of the realm of their experience.\nI like to talk about over-fitting the same way that I talk about learning things in school. Everybody went to school with the kids that were super-great at memorizing stuff. You gave them a list of terms, and they were able to spit back out exactly the definition; or if you gave them a math problem that they'd already seen, they were able to regurgitate the answer without thinking too hard about it. But if you showed them something new, so if you gave them something that they had never seen before, a problem that required some sort of creativity, that required them to apply what they had learned previously to a new situation, they just weren't able to do it... And that is over-fitting a machine learning model - it's very good at making assessments on data that it's already seen before, and then when you show it something that's just a little bit new, it's unable to generalize to this new situation.\nAnd yes, the answer -- David, you were 100% spot on. Imagine if you had a system that was tasked with determining whether or not there would be a missile location in a satellite image, and you had a nefarious actor that was working either internally or externally, that decided to manipulate images with random noise, in the hopes that your system would think that there was some sort of missile location in a place that was completely innocuous. Or to be able to obfuscate a missile location from the satellite image itself.\nYou also see things like deep fakes, which is outside the realm of adversarial machine learning, but is also very troubling. The tooling that we build - again, things like the what-if tool, things like model analysis, things like TensorBoard, being able to spot these changes in data, being able to spot images that have been altered in some way... This is going to be huge.\nAnd again, it's all of our responsibility to make sure that we push companies to be doing this work, because again, it's just so easy for these fragile models to be compromised.\nSuz Hinton: Definitely some good food for thought. Thank you so much for covering that. I don't know about you, but I'm probably not gonna sleep as tight tonight, thinking about this kind of stuff... [laughter] But it's really important to share how exciting machine learning is, but obviously the gotcha's and the sort of Spiderman \"Great power, great responsibility\", so I really appreciate you being able to talk about such a massive breadth of what machine learning actually involves. This is awesome, thank you so much.\nNick Nisi: Yeah, thank you very much.\nPaige Bailey: [01:00:16.13] Thank you for inviting me. This was fun, and I highly encourage everybody to try out TensorFlow.js. If something breaks, please yell at me on Twitter, or yell at me via email. My address is webpaige@google.com. Also, again, just to reiterate, you don't have to have a Ph.D. to challenge what a model is assessing. If something doesn't strike you as being particularly fair, or if something strikes you as being biased, definitely speak up and make those concerns known, because it's all of our responsibility to be the watchmen for this stuff.\nI have huge optimism for what machine learning can do for society and for businesses and for people, but also a very healthy respect for how much it's going to take all of us working together to make sure that that reality is the reality that happens.\nSuz Hinton: Oh, Paige, that was the perfect last sentence to take us out. Thanks. I'm gonna stop it right there. [laughter]"
   }, 
   {
    "title": "go-time-4.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/gotime/go-time-4.md",
    "transcript": "Erik St. Martin: It's Go Time! A weekly podcast where we discuss interesting topics around the Go programming language, the community and everything in between. If you currently write Go or aspire to, this is the show for you.\nWelcome back for another episode of Go Time. This is episode number four. Today we'll be talking about Gopher data science and other interesting news and projects we've come across this week. I'm Erik St. Martin and with me is always our other amazing hosts, Brian Ketelsen - say hello, Brian.\nBrian Ketelsen: Hello!\nErik St. Martin: And also Carlisia Campos. Say hello, Carlisia.\nCarlisia Thompson: Glad to be here, hi!\nErik St. Martin: And for anybody who's already listening, today we're joined by Daniel Whitenack, who is very vested in Gopher data science. He's also going to be speaking at GopherCon this year about it. How are you, Daniel?\nDaniel Whitenack: Good, good to be here.\nErik St. Martin: So let's kick this episode off by talking about anything we've kind of run across this weeks in news and just random articles and things. What's everybody got?\nBrian Ketelsen: The biggest thing this week is the feature freeze for Go 1.7. It was announced on the Golang-nuts and Golang-dev mailing list. There's a lot of changes in this, with the SSA and compiler changes, so everybody out there needs to download Go 1.7 and compile it, test your programs, because this is a really big change, and there's opportunity for breakage. Of course, our tests cover everything, but it's a big place for us. Compiler speeds are down, down-down-down.\nCarlisia Thompson: I saw something about binaries. Is it vendoring binaries? I didn't have a chance to investigate, I was super-interested. Does anybody know?\nDaniel Whitenack: Yeah, I think it was binary-only packages, without providing the source.\nBrian Ketelsen: Exactly, so you can get a binary on your package now.\nCarlisia Thompson: So you can do it both ways?\nBrian Ketelsen: Correct. If you want to release a precompiled package that was only a binary with no source, you could do that by giving somebody a URL to a go get, or to use go get.\nCarlisia Thompson: Oh, I see what you're saying, gotcha.\nErik St. Martin: Yeah, so kind of more along the lines of like the commercial packages and libraries that you can buy, say, for the Windows side of the world.\nCarlisia Thompson: So then if I'm using your package as a binary, I can pop it in my projects and use it as a binary?\nBrian Ketelsen: I don't know if it applies to precompiled libraries. I think it was only commands, but it would be interesting to see if it actually applied to the library files, the A files.\nErik St. Martin: I have to look more into that. I briefly saw something about that, and I kind of breezed over it, I've been really busy this week. But there's something like 300 closed tickets for that release.\nDaniel Whitenack: Exciting. I'm excited for the compile times.\nErik St. Martin: Yeah, me too. I can wait to get back to 1.4 speeds.\nBrian Ketelsen: We're getting closer. It's still slower that 1.4, but we've regained a lot of that lost territory, and that makes everybody happy.\nErik St. Martin: The other interesting thing that I saw this week too was Brad and Andrew's live coding sessions. Did you guys see that? Where they're putting out a callout for people who want live code reviews.\nBrian Ketelsen: That's frightening.\nCarlisia Thompson: I didn't see that, but that sounds great.\nDaniel Whitenack: I didn't see it either, but I would love to participate in that.\nCarlisia Thompson: I've seen them doing it in the past, and it's great.\nBrian Ketelsen: I don't know... If you didn't have impostor syndrome before, imagine Brad and Andrew tearing up your code. They're both great guys, so don't get me wrong, but that is a tough crowd to please.\nErik St. Martin: I don't know, I think that it would just make my own thoughts of myself come to light. I'd be like, \"I knew it. See?\" [laughter]\nBrian Ketelsen: I knew I was a terrible coder. Yeah... GoTimeFM, where we talk about our impostor syndrome for an hour. [laughter] There's another big news item this week, and that was Peter Bourgon's article, his update of his Go Best Practices talk from 2014. He updated that to 2016, and there's a lot of really good takeaways in there; I don't think we have time on the show to cover them all, but some really good tips in there about dependency management, about testing, how to structure your library, what to name your packages - you name it, it's covered really nicely in there. Like I said on Twitter, I think this is really a cannon. Every Go developer should read this and try to internalize all of these rules, because they're really good stuff.\nDaniel Whitenack: Yeah, I think it's gonna take a while for me to unpack, but I think it's one of those things... You know, I have a bookmark that I'm gonna visit every week, and as I'm implementing different things, I think referencing that and just seeing if I'm doing things in a sane way is gonna be great.\nErik St. Martin: I think that that talk was a favorite, still to this day, from GopherCon 2014. People really loved that talk, so it's fun to see him go back and kind of reflect on his thoughts and to shoot down the things that he thought were the way. Although I don't know whether he fully dismissed any of the concepts that he presented in 2014. I think he got a little looser on his beliefs on a couple of things, and then a couple of added new ones. I need to read through it again. And like you said, Daniel, it's like that - you read it one time and you're like \"What did I just read?\" You kind of have to keep going back to it.\nBrian Ketelsen: Yeah, something this big takes a long time to internalize all of it. I would love to take this article, mix it with Dave Cheney's error-handling article from a week or two ago, and just put it under my pillow and sleep on it every night, hoping that I could absorb all of that at once. That's be great.\nCarlisia Thompson: I'm holding myself back, as I don't wanna be such a big fan girl, but for people new to the community and to Go, Peter is definitely somebody to absorb. I would say Peter and Dave Cheney are at the top of my list as far as best practices and things I think are best to follow.\nDaniel Whitenack: Yeah, I would agree, and I think coming into Go not too long ago, of course you search around different Stack Overflow responses and whatever, and you can really get a mixed bag of ideas about - like Erik said - about error handling or what have you. But going to these resources, I found, gives some clarity on that mixed bag that you find across the interweb.\nErik St. Martin: I'm interested to see some more best practices too, just to kind of compare and contrast, because I think people have different success stories with different things, and especially when it comes to vendoring, that can be a hot topic. We could probably talk for a full episode about vendoring.\nBrian Ketelsen: I think we could have an entire GopherCon on vendoring, and still not get any consensus from anybody. [laughter]\nCarlisia Thompson: Who needs consensus?\nBrian Ketelsen: Nobody needs consensus, good point.\nErik St. Martin: Alright, moving on - interesting Go projects. And speaking on sleeping and downloading information, Brian, with your nightly download of cool projects.\nBrian Ketelsen: Here's one that I saw a couple weeks ago and I wasn't too sure about it, because I didn't see all of the code there. This one's called GAFKA, and it's a suite of Go tools for managing KAFKA clusters. It's at github.com/funkygao/GAFKA and it looks really complete. It looks really complete now. Very interesting if you manage KAFKA, which a lot of people do, and it's got a lot of nice little Go commands and Go tools for working with your cluster, things that will save you from the ugly mounting of Java shell scripts that you have to do generally when you're messing with KAFKA.\nErik St. Martin: This is just helpers for administering and kind of... That world for KAFKA? Or for places as Sarama and some of those client libraries?\nBrian Ketelsen: I didn't see any client libraries in there, this is only a suite of tools for managing the cluster, looking at consumer groups, that sort of thing. I wanna say there are at least a dozen different utilities in there for dealing with your cluster.\nErik St. Martin: And Daniel, I imagine you're quite versed in KAFKA, coming from the data science world?\nDaniel Whitenack: Yeah, we use KAFKA in production and I think with this I might be able to give those Java scholar guys that run for their mommy... I also like the part of it about admitting health info to InfluxDB; that's something I can imagine being super useful on my end.\nErik St. Martin: Alright, what else have we got?\nCarlisia Thompson: Well, I've run into this concept of ChatOps this past week, from two different places. One was the Remote Meetup group, they had somebody come in and do a talk about ChatOps, and they did it using GitHub Hubot. He did a marvelous job. He said what it was, he demonstrated it, he did a demo, he explained how you can use it... It was fantastic. And I've never worked in a place that was using it, I don't even know if this is super new. I know the concept of chat bots is not, but the concept of having chat ops right there where you are doing your communication...\nAnd then I also came across this microlibrary which is a Go library. It's a Micro services kit or a library, and it has capabilities for chat bots. They have a blog post, and we'll have a link to it - they say chat ops bots should be a first-class citizen. I think that's great. I work on the command line a lot and I love it, but I also love the concept of bringing operations into the place where you are communicating with people, and also all the extra capabilities that you can get from these new modern tools. You have to watch the Remote Meetup video to see what I'm talking about. I can't thoroughly describe it; I've worked with this, and it's at the tip of my tongue here to describe. I was just fascinated, and I definitely would love to work using this tool, so there it is.\nDaniel Whitenack: Yeah, and I think part of what I see that's appealing is kind of moving away from being in Slack and always copy-pasting screenshots of my terminal into the Slack channel, but rather executing the command via the chat bot and kind of having a human understandable version of what I'm doing, and enter right into the conversation so everybody is on the same page and doesn't have to wonder where I executed that and what my environment is and why it looks weird - getting over that hurdle.\nErik St. Martin: It's hard though, because I used to love the chat ops stuff, and then I've been kind of pulled more and more away from it because I try not to look in the chat channels nearly as often as I used to, because it gets really distracting. You kind of see your notification, you look in there, and it's like \"Oh, it's just somebody deploying something...\"\nCarlisia Thompson: Yeah, exactly. I'm glad you brought that up, because I wanted to mention it and I forgot - what I saw on this video was not at all notifications. Because yeah, we get notifications, we get these hiccups to get there. This was more about having the extra features. For example, querying something and getting the response from different services across your services; it's more like you're in command and you query, and you're asking for information. And maybe somebody else is there as well, and you can share the information, as opposed to being just a passive consumer, just like being dumped information. I thought that was extremely cool.\nBrian Ketelsen: Yeah, I think from a framework perspective, Micro is probably the most interesting thing in the Go world that's come out in 2016.\nErik St. Martin: That's bold.\nBrian Ketelsen: It is bold, but I called Rails, I called Go, I called Docker - you're gonna have to trust me on this one. Micro is big. And it's big because it offers a much broader view of Micro services. It's not just a set of tools to help you make Micro services, it's a whole ecosystem. And I think that's important, because making Micro services on their own is not as important as deploying and managing, operating, and consuming those Micro services. So having that big framework, that whole ecosystem of tools I think will make Micro services more accessible to everyone, and certainly more manageable. The ChatOps is a great side of it, but it just goes to show the power of Go's interfaces, because it's the same interface that you can use to interact with it by protobuf or by a web page. You can take the same Micro service in the Micro framework and interact with it from the command line, you can interact with it from a web page, you can interact with it from Slack, and it's all using that same interface. I think there's a lot of power behind this, and you need to star it in GitHub, because this one's going places. And he's hiring, I saw a tweet this morning - Asim Aslam is the guy who's running Micro right now, and he's looking for people.\nErik St. Martin: Awesome, I'm interested to see what comes out with it.\nOne thing that I came across this week was a project called UNIK, which is spelled interesting; that wouldn't be the first way I'd think to spell it. One of the things I know that at least Brian and I have discussed before was this whole motivation behind containerization and Micro services and things of that nature, was how long before unikernels started taking off. So one thing I came across was this project called UNIK, which allows you to compile your Go app, and it does Java and C and C++ as well, to compile it into a unikernel. So you got Micro on my mind here.\nBrian Ketelsen: Sorry. It's my fault.\nErik St. Martin: So I'm interested what comes along there, what people do with it and how unikernels evolve.\nDaniel Whitenack: Do you guys have previous experience with unikernels in general?\nErik St. Martin: Only in building some to play with for toy reasons, not so much as far as like production usage.\nCarlisia Thompson: I don't, at all.\nErik St. Martin: Yeah, basically the notion of unikernel is it's just a really trimmed down kernel, a bootable program. When you look at your container, like PID 1 the process that starts up is your application, but you still have an operating system that bootstraps that particular process. And a unikernel is basically your app is the operating system. And I think they have some stuff tied in under the covers, but I'm no unikernel expert either, so I wouldn't take my word for it.\nDaniel Whitenack: Yeah, it's definitely an interesting concept and something that's been on my radar to play around with, but I haven't quite got there yet.\nBrian Ketelsen: I think the interesting thing for me is, from the security world, the most secure code is the code that isn't there, and the idea of a unikernel is that you take your app and only the pieces that you need to talk to the hardware and compile that down into something that feels like an operating system to run your app. So the attack surface of your application is significantly smaller because you don't have all of the extraneous stuff that comes in an Ubuntu distribution, for example. So you've only got the one port open because you're only listening on port 80. There's significantly smaller attack surface, and I think that's one of the main benefits of unikernels, at least in my mind.\nErik St. Martin: So I think we have roughly 30 minutes left in the show, so let's get chatting with Daniel about data science.\nBrian Ketelsen: Oh, this is exciting. We've been twitching for weeks to talk about data science. This is big.\nDaniel Whitenack: Sweet, I'm excited.\nErik St. Martin: Brian and I are on the analytics side of things. I mean, we've spent a good 4-5 years in this space working with analytics side and building software to support them.\nBrian Ketelsen: I'm the fringe. [laughs] You could call us data scientists; you could call us the programmers that enable data scientists. [laughter]\nErik St. Martin: Or the interns\nBrian Ketelsen: That's right. Maybe you can start - for all of us, can you give us kind of a background? A primer? What is data science? Where does it fit? What are the things that are data science and what are the things that aren't data science?\nDaniel Whitenack: Yeah, I think that's definitely a good place to start, because depending on who you'll ask, you'll get very different answers. I think one useful differentiator that I like to keep in mind is what is #datascience and what are people talking about when they say 'data science' on Twitter, and then what are data scientists, those employed as data scientists actually doing in the industry. So I think in the first case what people are talking about a lot are things like AlphaGo beating the Go Grandmaster... If you're not familiar, AlphaGo is a deep neural network trained by Google. They basically train these neural networks such that it could beat the grandmaster Go champion - Go being the boardgame, not the programming language. I think this is really amazing. This is a huge achievement and should be talked about a lot.\nOn the other side of things, you look at what do most of the data scientists employed in the industry do? There was an interesting article recently in Forbes that actually pulled a bunch of data scientists and found out what they spend their time doing. Actually a lot of it, 90% of it was gathering data sets, collecting data sets, parsing data and extracting patterns from data. So about 90% of what data scientists do doesn't necessarily involve some nifty machine learning, but more of the process of moving data around, transforming it and extracting patterns to make it useful. Then that other last 10% could be various things. So a little sliver of that is doing kind of interesting machine learning techniques; maybe another sliver of that is making dashboards or visualizations, and then various other tasks. So I would say in general for me data science is the process of transforming data - wherever that might be - into insights for your business. Sometimes that might require a neural network, but pretty much always it requires some problem-solving and some ETL, and maybe some arithmetic. I think those are kind of the pillars of data science.\nBrian Ketelsen: I've got a question for you, and this is a little bit crass, so forgive me in advance. I read an article a couple of years ago, maybe two years ago, about how Target knows when your daughter's pregnant before you do.\nDaniel Whitenack: Yeah, my wife works for Target, and it's apparently true.\nBrian Ketelsen: Yeah, it scared the hell out of me, it really did. Because people buying just the things that you buy every day, it never occurred to me that they could take the patterns of things that I buy, compare them to other patterns and realize, \"Hey, this guy's getting a divorce. This one's pregnant. These guys are having a baby next month.\" They can tell by that data what my life is. It's almost the metadata thing from the cell phone world, it's really scary. How much of data science is being pushed because of commerce, and how much of it is being pushed because of advertising? Where does that fit in the grand scheme of things? What's the real driver behind the advances in data science?\nDaniel Whitenack: Yeah, sure. I think if we look a little bit back over the years, there's been certain industries that have always been involved in data science in some sense. If we look at insurance companies or other companies like that that are interested in assessing risk of a person based on things that have happened to them, and other things like that. So that's been going on for a while, and then there was this time when people learned, \"Oh, we can target certain types of people with advertising\", so for a while there a lot of the data science job postings were advertising-related. Now I think it would be fair to say that data science - again, I'm calling data science this process of creating data-driven insights - is really permeating pretty much every level of businesses. A lot of data scientists now are working to inform even internal business people, not even necessarily to make a company more money directly; they might be concerned about intelligently monitoring outages in their infrastructure, right?\nThen it goes from that kind of lowest level all the way to the directly applicable processes to the money side of things, having to do with marketing, improving your ads and all of that. So I think from the very lowest level in the backend processes, all the way up to marketing yourselves to the outside world, I think you're seeing data science permeate all of that. I think the idea is really that data scientists now, when you're employed and you're coming into a company, the idea is not necessarily to say \"I'm gonna come in and I'm gonna optimize ads\" or \"I'm gonna come in and I'm going to predict risk, predict fraud\" or whatever it is. A lot of companies are building data science teams and even embedding data science teams across the organization to, say, \"How do we make our processes at each level of our organization data-driven?\"\nBrian Ketelsen: It's interesting that you mentioned the dev-op side of it. I didn't see the whole talk, but I saw the slides on a conference that happened a week or two ago, it escapes me which. I wanna say that company was one of the bigger companies, like Uber or Halo or something like that, and they were talking about how they use data science to reduce the false positives in their monitoring systems. They knew because of the cycles and the patterns of their monitoring, they could reduce the false positives, the pages, 90% of the time, and that cut down their duty calls while they were in the middle of an outage that wasn't really an outage by 90%. There's real cost savings, real benefits behind that.\nDaniel Whitenack: Yeah, exactly. So in that case you're really optimizing a lot around your business processes and your engineering processes. Yeah, so that's from Uber... That's their system, Argos, which is their alerting system, and actually on the backend of that, the time series database, they wrote internally in Go. I was at that talk and it was super impressive; I was kind of blown away by all the intelligence that they're putting into that learning, and really making some pretty astounding gains in reducing their false positives.\nBrian Ketelsen: Nice. Was there any open source component to that? Have they released any of that yet?\nDaniel Whitenack: As far as I know not. I mean, hopefully they will, given the trends we've been seeing lately. Hopefully at some point they're able to release the database or the frontend or whatever. Right now I think - at least the last I saw - most of it was still internal. But they did give a pretty good discussion of their logic around how they're modelling things and how they're hoping to keep improving the system over time. It's definitely an interesting talk to see. I'm not sure if the video is up online, I know the slides are.\nBrian Ketelsen: Alright, we'll put those in the show notes, for sure.\nErik St. Martin: Let's talk for a moment about the tools of the trade - what are the current tools of the trade (languages and frameworks) and what do you see those being replaced with on the Go side? Because I know that's something we've chatted backchannel about that a bit in our excitement on watching some of these things evolve.\nDaniel Whitenack: Yeah, sure. So I would say even just like a year ago, if I was to go to some data science event, one of the big questions was \"Should I learn R or should I learn Python?\" These have traditionally been the big players in this space. There's a lot of great tools... I'm not as familiar on the R side, but I worked a lot in Python. On the Python side you've got this whole suite of numerical and data science type tools like Python Pandas and SciPy, NumPy, all of these things. That was kind of how things went for a while.\nThen recently, at that same conference where they discussed the Uber alerting stuff, I was seeing definitely much more of an attitude in the community about... Well, a question was posed, \"What language should I learn?\" and I think they were expecting to hear R or Python, but the answer that the speaker gave - who happened to be Josh Wills from Slack... He basically said, \"Learn them all, because every week I use Python, I use JavaScript\", and he mentioned Go as well. I think and I hope that the community is kind of opening up to see that each of these languages has unique capabilities and unique use cases, and the hope is that we don't kind of morph all of these languages together as all kind of doing the same thing, but we utilize them where they're particularly useful, and utilize their unique features. Then of course there's a whole suite of tools around \"big data technologies\", like Apache Spark and Hadoop. These are mostly kind of Java Scala applications. But even then, a year ago or something, there was a lot on that side of things, there was Java Scala, and now you're seeing a kind of broader range. There's things like looking at InfluxDB or the time series database that Uber worked on, or even things like Pachyderm, which is an interesting project - these are big data frameworks that are not Java Scala based, and utilizing technologies like Go and Docker. So I think there is a shift going on right now in the community; I don't know if you guys have seen any of that as well.\nBrian Ketelsen: I think Pachyderm is probably one of the more interesting things I've seen in a while, because it almost takes that \"You can do everything on your laptop\" philosophy with awk and sed and moves it into the Docker world. So instead of piping UNIX commands together, you're just piping Docker containers together, and that makes an interesting big data workflow, especially when you add something like Mesos or Kubernetes into the mix, where you've got large orchestrations of big data things happening. It sounds really interesting.\nErik St. Martin: Yeah, I've seen a few projects over the years where people have started trying to do text parsing and some probabilistic stuff in Go... But what was that project we ran across...? We were kind of researching the show and it was just astonishing how big that page was.\nCarlisia Thompson: Oh, yeah...\nBrian Ketelsen: Oh, I know what you're talking about - the golang data library page. It's at mjhall.org/golang-data-science-libraries. It's a huge page full of data science libraries in Go and we all just kind of stopped and said, \"Wow! There's 500 links on this page.\" I was thinking there were two or three data libraries for Go, but no, there's a lot.\nDaniel Whitenack: Yeah, and something I've seen is... Even still you talk to a lot of data people and they talk about Python or R, and you hear about people working in those languages, but the newer companies that I've interacted with or contracted with, they are adopting Go and other modern languages more readily, and they're not abandoning that strategy for data science; they're also using those languages for data science. Maybe no one's kind of rallying around a certain small subset of tools like they are in Python. Pretty much the data science community has rallied around Pandas and SciPy and NumPy and these other tools. Maybe that hasn't gone on in Go yet, but there are, like you said - if you look into it, there are a lot of libraries that will allow you to do generally what you want to do, and maybe with a little bit more investigation and a little bit of custom package building on your end, but generally there's nothing preventing you from doing those same things in Go.\nErik St. Martin: Are there any specific Go packages or frameworks that you're currently using?\nDaniel Whitenack: Sure, yeah. I mentioned Pachyderm, I am using that currently, and have had some great experience with that. I also very much like the idea that you can think in terms of these data pipelines and think in terms of piping data from one container to another. This is very useful, because let's say I want to do something very efficiently; concurrently at one stage of my pipeline I can write that very easily in Go and wrap that up in a container. If there was a case where maybe there's a very certain Python library that I'm very interested in, there's nothing preventing me from having that be part of another stage of the pipeline.\nGenerally a lot of what I'm writing is in Go, but I like that flexibility. I also like the reproducibility of it, which is a pretty huge problem in data science right now. So the fact that you can commit your input data, your output data at every stage of the pipeline is very useful and powerful, I think. Also I've been using a variety of databases. I've recently used BoltDB and looking at some other embedded databases has been useful for me to kind of speed up some operations. Then also using some tools from Gonum as well. Gonum has a variety of packages that are in development or have been developed to some degree, like Matrix manipulation, implementation of Lapack and even plotting functionality. That's been useful, because there's been certain times... I like to do something in Go, maybe the package doesn't exist, but I can take stuff from Gonum and very easily implement the algorithm that I'm wanting.\nFor example, I recently did a k nearest neighbours sort of thing. In the spirit of the Go proverb, \"A little copying is better than a little dependency\", I basically just stole some of the Euclidean distance functions and that sort of thing out of Gonum and was able to throw together exactly the k nearest neighbours thing I wanted, pretty quickly. So those are some of the things that I've been using.\nBrian Ketelsen: We did a project recently, last year, where I needed to do some data processing, and I found it really easy to take Python libraries and port them over to Go for data science type things. I can't remember what I needed to do, it was one of those numeric-type things, but it really was not difficult at all, and very performant.\nDaniel Whitenack: Yeah, and I think part of the mindset of like... In Go sometimes it's easier... Something I've seen - maybe you guys can comment on this - is doing... In Go sometimes it's just faster to write a for loop than it is to import a certain package to do some relatively simple thing. And I think it applies similarly in the context that you just described. Maybe there's not this very specific thing in Go that you want, but you can steal a little bit by porting over from this Python package that describes what they did, and you can utilize some of the things from Gonum maybe, and you can piece it together really quickly, and out of that you get something that's very performant, and something that you can put into the context of asynchronous communication and all of that that Go handles so well.\nBrian Ketelsen: Right.\nErik St. Martin: Matt Holt is in our backchannel, which is GoTimeFM channel on Slack, the Gophers Chat. He said that he implemented k nearest neighbour in Go for his machine learning class. He said, \"Great experience, totally worth it. Just inline it.\"\nDaniel Whitenack: Yeah, I totally agree.\nErik St. Martin: To your point, I think that that's a good pattern when looking at importing dependencies in general, right? If you need one function - especially if it's small - do you need to import that giant library? All of it has implications too, so I guess it's always something to evaluate whenever you pull in a big dependency.\nDaniel Whitenack: Yeah. And there are a good number of packages related to data science, including machine learning packages. I recently saw a data frame package called Gota that's in development, which will be definitely very nice for exploratory analysis, I think. I would be sad if doing data science in Go just felt like doing data science in Python. For me, part of the joy of Go is that I can kind of piece things together in this way; I can take a little bit from here, bring over a little bit from Python maybe, and throw it together in a way that is very performant, very efficient, and very easy to deploy, and has those unique characteristics. So yeah, that's kind of my mindset, I guess.\nBrian Ketelsen: So what kind of advice do you have for somebody who wants to get started with playing in data science in Go? Do you have resources or advice, or places you like to send people?\nDaniel Whitenack: Sure, sure. First of all, like I said, I think doing data science in Go should be a little bit different, so I think definitely starting out I would say that those same resources that other people starting out in Go find useful, like Peter's resources or Dave Cheney's, and kind of getting into that mindset of \"Where does our mindset in programming go? Why do we do things in this way and not that way?\" Those are definitely useful in getting started and playing around on the Go playground and all of that.\nThen a lot of what I've learned has been trial and error; importing this package and trying that, writing my own custom stuff... Hopefully that's changing. A lot of data scientists come into Python and try things in Jupyter notebooks to try to figure out interactively how does this work. One of the things I've been working on recently is a Jupyter kernel for Go. It's functional right now, it needs some work, but I'm hoping that that along with further development of plotting things and other things like that will kind of ease the burden of people coming from a Python world to the Go world, and be able to do some things interactively and see what happens in that respect.\nThen of course there is the list of things that have already been done in Go, like InfluxDB and Pachyderm and most sorts of things. Generally there is Getting Started sections to those projects. In Pachyderm they have a great Getting Started example where they do word count with simple grep and awk commands. That's kind of a fun way to get started in doing data science in that way.\nCarlisia Thompson: Daniel, we shouldn't be surprised that you're going to talk about Go And Data Science at the upcoming GopherCon, but can you give us a little teaser about the talk? Who should be looking forward to being there and seeing that talk?\nDaniel Whitenack: Sure, sure. So it's still in the works, but the teaser I'll give is that from start to finish basically I'm gonna do data science, and do it hopefully in a distributed way, all with Go. So starting out saying like \"This is a problem we wanna solve. We're gonna explore the data with Go tools, and then once we know what we're gonna do, we're gonna implement something simple in Go that will do that\" and then we can think about how will that scale, and we'll use a Go tool, maybe Pachyderm or something like that to scale that up and illustrate how you can go through that whole data science process using nothing but Go.\nThen also I'll definitely provide some call-to-action to the audience to start doing some data sciency things with Go and point them to some packages and some projects that they can contribute to.\nCarlisia Thompson: So is it going to be like a live demo?\nDaniel Whitenack: Yeah, I mean it will be a combination between some code that I'll show on the screen, and then depending on how things work out, I'm hoping to show some type of live demo.\nBrian Ketelsen: I say you gotta go Kelsey Hightower or go home.\nDaniel Whitenack: Exactly. It's a scary proposition, but it could be a lot of fun.\nBrian Ketelsen: Just live code on the screen.\nErik St. Martin: If you have slides, you have to deploy VMs that do this stuff from the slides.\nDaniel Whitenack: Sure, sure. Actually, I'll point to some Go notebooks and you can do it yourself in the notebook.\nCarlisia Thompson: Very cool.\nErik St. Martin: So speaking of Go notebook, there's the Jupyter, right? And there's now a Go library for that?\nDaniel Whitenack: Yes, so there's a working kernel for Jupyter, it's called Gopher Notes. I started this back in, I guess it was January. It's functional now, so you can use it to make Go notebooks. There's definitely open issues and things to work on, so this is one of those things that I think hopefully some people find useful right now, but it's also a great place for people to get involved and knock out some of those issues and get plotting enabled in the notebook. I'm hoping, like I said, that this project will kind of help ease people into Gopher data science. Also, I think there is a part of data science that is very interactive - you wanna explore the data, you wanna see what it looks like, you wanna plot a histogram, and a lot of that is interactive, so bringing some of that interactivity to this world would be fun.\nErik St. Martin: I think we're running very short on time, but for anybody who's not aware, can you give a brief rundown of what Jupyter is?\nDaniel Whitenack: Sure, yeah. There's actually a whole ecosystem of Jupyter projects right now. The main project is called Jupyter Notebooks, and what you can do is you can start a Jupyter Notebook server on your computer, and then if you go to the browser, you can start a Python notebook, and there's a lot of other kernels now. You can start a Go notebook or a Scala Notebook. When you open that, it's kind of similar to - I don't know if anybody's used Mathematica before, but there's different cells, and you can put code in those cells and evaluate that interactively. So it's live code in the cells, but you can also interject other things into the notebook; you can put in markdown into the notebook and render that, you can put images in, and then at the end of your notebook you can hand that off to someone else and say \"Hey, here's what I did.\" You can also run it in your browser, or you can export it as a PDF or a slideshow and share it with other people, or turn it into a dashboard even. There's a variety of plugins that allow this functionality.\nErik St. Martin: Excellent. We've just about exhausted our time here, but before we kind of transition into closing out the show, is there anything that you wanted a chance to share with everybody that you have not got a chance to?\nDaniel Whitenack: I think a lot of what we've talked about is definitely what I wanted to talk about. I would encourage people out there - there are a good number of people doing data science in Go out there, even if they're not the most visible in the data science community... So let' s say, all of you Go engineers out there start playing around with some of these data sciency applications and I think you'll find that the experience is really good and you can come out with some great deliverables in Go and things that can actually be deployed, and scale, and all of those good things we like about Go.\nErik St. Martin: The way we typically wrap this thing up is we have our #FreeSoftwareFriday where all of us go around and thank some projects or contributors - or both - that are making our lives easier currently or in the past. With that being said - Brian, who do you wanna thank?\nBrian Ketelsen: I know our rule is no more than one, but I have two - forgive me in advance.\nErik St. Martin: I did three one week, it's cool. [laughter]\nBrian Ketelsen: Okay, good. So the first is ngrok from Alan Shreve. My god, there isn't a day that I don't go by without using ngrok. It's just the best tool on the planet for sharing something that's running on your machine with people that are somewhere else. If you haven't used it, I think it's at ngrok.io, but you can just search for ngrok. What an awesome tool... I use it constantly, I love ngrok. And then, a kind of an extra special shout out to the people in GopherJS room on the Gopher Slack who have had unbelievable patience with my sad, sad JavaScript skills - thank you guys!\nErik St. Martin: Carlisia, how about you?\nCarlisia Thompson: I'm going to mention Jupyter Notebook and the Go kernel. Daniel did a great job describing Jupyter Notebook, but I still wanna mention it because it is not just for data science, and I'm gonna tell you why. I came across this commercial tool that is a notebook, and my mind was blown. This is the tool that I looked for all my life, and it's what I use now to take notes. Just like Jupyter, it has cells. You can have code cells or markdown cells or tech cells - it's been the most amazing thing. And I keep telling my husband - he's a data scientist - \"You have to try it, this is the most amazing thing!\" Two weeks go by and I'm telling him, \"You gotta try it, you gotta try it\", he finally comes over and looks at it, and he's like \"Huh, I have this. But it's free, open source, and it's called Jupyter.\" I'm like, \"That's what Jupyter is!?\" Because I ran across Jupyter when I ran across the Go kernel that Daniel did for Gopher Gala, when I was browsing Gopher Gala submissions. Then I went and looked at Jupyter, and I was like \"I don't understand what this is. It's not for me, and I'm not willing to spend the time.\" So I find this tool and then I'm like, \"Oh, that's what it is!\" So actually last night spent time setting up Jupyter and hooking up the Go kernel to it, and it is super amazing. It's not just for data science - you can keep your notes, you can run code... I have ideas to put together Go courses, and I would totally use Jupyter for that, because everything is self-contained, it can have different sections, I can run the code right there, you can do a presentation... Just like Daniel was saying, you can export it and when you host it on GitHub you see the whole thing formatted; it's not interactive, but the whole formatting is there and it looks beautiful. It's great.\nBrian Ketelsen: I'm sold.\nErik St. Martin: I kind of wanna look at it just for normal note taking.\nDaniel Whitenack: Yeah, and thanks to Carlisia for going through the setup and giving me feedback on the different issues as well. I definitely appreciate it and I'm glad people are starting to use it.\nCarlisia Thompson: Yeah, I did run into just a super minor hiccup, and I opened an issue. Daniel was so quick, he was instantaneously responding to what I was having trouble with. I think he'll do the same for everybody.\nErik St. Martin: Uh-oh, she's setting a precedent.\nBrian Ketelsen: There's pressure... [laughter] On next week's show we're gonna talk about open source pressure... [laughter]\nErik St. Martin: ...and how we can add more to the contributor. [laughter]\nCarlisia Thompson: Setting expectations...\nErik St. Martin: We also like to ask our guests too if there's anybody they kind of wanna thank, any projects they'd like to bring highlights to...\nDaniel Whitenack: Yeah, I wanted to mention Vim Go because I've started using it recently. I know a lot of people use it out there, but I'm kind of a recent convert. I've just found it amazing, and I think it's... Once I kind of got in the process of using it and writing Go with Vim Go, I think it's improved my development process quite a bit, and that's really the one I would like to thank. I think his name is Fatih Arslan. I'm definitely thankful to that; I think it's super powerful and it can improve your workflow. Previously I was using Atom, and now I've pretty much just been using Vim Go recently and I think it's a great project.\nBrian Ketelsen: Yeah, Fatih is now a new dad, so congratulations to everybody...\nDaniel Whitenack: Congrats!\nCarlisia Thompson: Congrats!\nErik St. Martin: That's a week ago, two weeks ago now?\nBrian Ketelsen: I don't think there's been that's gone by that we haven't talked about Vim Go.\nErik St. Martin: Yeah, one of us always has Vim Go, and I'm gonna play right along with it, because who I'm gonna thank is Nvim. I've been a Vim user for a long time, and I kind of tinkered with Nvim. I don't even remember why I went back to standard Vim, and then Brian's like \"Dude, why are you still using regular Vim?\", so I went back to Nvim, and I'm loving it. And then of course, it wouldn't be the same without Vim Go, so I'll thank Vim Go again.\nCarlisia Thompson: Is it Nvim or Neovim?\nBrian Ketelsen: Neovim. The command line you type is nvim. Yeah, and those are two great tastes that taste great together, because Neovim does asynchronous processing and Vim Go enables that very nicely, so you can do things like compile while you continue to edit, and that's not possible in regular Vim, and it's really tasty in Neovim.\nDaniel Whitenack: Oh, cool. You guys are giving me something to do after the talk ends. [laughter]\nErik St. Martin: We're always learning with Vim. It's doesn't matter how long you've been doing it, you still find new plugins, you find new versions. And I think we are actually over time, but it's been fun.\nDaniel Whitenack: It's been a lot of fun!\nErik St. Martin: Yeah, this has been great, and I'm looking forward to your talk at GopherCon as well. And for anybody who wants to hear more from Daniel, you should attend his talk at GopherCon.\nDaniel Whitenack: Yeah, and I'll be around and be happy to talk about Go and data science throughout the conference, so hit me up.\nBrian Ketelsen: Yeah, just on that note real quick, as we're wrapping up, we're gonna have panels with the speakers in the afternoons, so if you wanna get some quality time with the experts in the field, the afternoons of GopherCon on your time, GopherCon.com, buy your tickets now. Did that sound like a soap commercial? [laughter] I tried.\nErik St. Martin: You gotta do the fast talking thing if you're gonna do the commercial, because you gotta get that in like five seconds.\nBrian Ketelsen: That's what I was going for... I guess I can't talk fast, sorry.\nErik St. Martin: Alright, so I wanna thank everybody who's on the show, the entire panel. I want everybody who is listening and who will be listening, definitely share the show if you guys wanna hear more. We're gonna kind of vary topics between community and what's going on, and talking to people, as well as deep-dive technical content. Go to GoTime.fm if you wanna subscribe. We're @GoTimeFM on Twitter, and then we also have a Slack channel if you wanna catch backchannel action during the shows. That's GoTimeFM on the Gopher Slack. We also will be doing this thing live too, so we'll get a link up so that we can continue to do this; I think it went really well this episode. So with that being said, goodbye everybody.\nBrian Ketelsen: Goodbye. Thanks, Daniel.\nDaniel Whitenack: Goodbye.\nCarlisia Thompson: Goodbye."
   },
   {
    "title": "js-party-38.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/jsparty/js-party-38.md",
    "transcript": "Jerod Santo: Oh yes, the sound of those beats means it's time once again for JS Party. Now, if you watched The Office, you already know that the first rule in roadside beet sales is that you put the most attractive beets on top; the ones that make you pull the car over and go \"Wow, I need this beet right now.\" Those are the money beets. Special thanks to BMC (Breakmaster Cylinder) for helping us put the money beets right up top.\nMy name is Jerod Santo and I'm happy to be here today. We have Suz with us. Suz Hinton, say hi.\nSuz Hinton: Hello! Coming to you from sunny Hawaii.\nJerod Santo: Suz, you're in Hawaii... I just got all jealous. Please tell us why.\nSuz Hinton: I'm very excited. This is the first day of my vacation, so I'm gonna have a JavaScript party with you all, and then I'm gonna go and have a party on the beach.\nJerod Santo: That sounds better than what I'm going to do next, for sure...\nSuz Hinton: [laughs] I'm very excited. I haven't gone on a big sort of travel vacation since 2011, so I'm so freakin' excited.\nJerod Santo: Very cool. We appreciate you joining us from Hawaii, and waking up extra early to kick off this party with us... But you had to be here for John Resig, so... Special guest today - John Resig. You all know who he is. He's here to talk about GraphQL, why he's excited about it, why he thinks it's the new REST... John, thanks so much for joining us.\nJohn Resig: Thank you so much for having me.\nJerod Santo: So let's just get a little bit of a catch-up with you and what you're up to these days. We know you've been working at Khan Academy for a while now... Is that still your day job? And what have you been up to?\nJohn Resig: Yeah, so I've been at Khan Academy now for a little over seven years; I'm still working there. These days, my role is as a front-end architect, so thinking a lot about the systems that we're building, thinking about the hard problems like what sort of things do we need to have in place to ensure that we can write stuff quickly and be scalable, but then additionally working on things like our design system, and stuff like that.\nSo it's pretty wide-ranging, but it's all very front-end focused. I really enjoy it. I think being there seven years is probably a testament to that. I really, really like it.\nSuz Hinton: [04:01] It must be so cool to see how Khan Academy has changed as well, in both product and technically over the last seven years. I think that's really a wonderful opportunity to have, when you're so happy somewhere that you actually get to really be there to influence it to evolve, but also just watch the audience change over time, too.\nJohn Resig: Absolutely. When I started, there was I think three -- I was the third engineer, and the whole team was incredibly small. I forget how many users we had at that point, but at this point now we have tens of millions of users every month, from all over the world, so the challenges of scaling up from those tiny beginnings up to where we are now - it's been very monumental.\nI really enjoy, at least for myself, the technical challenge of working on these problems, but also I really appreciate the impact that we're having... Being able to bring educational materials to people all over the world for free - that's something that I feel very good about.\nJerod Santo: A little bit of insight into some of that impact, at least anecdotally, with myself and my family - we're homeschoolers, and we use Khan Academy extensively, so we're very grateful for it. It's been instrumental in teaching our children, so thank you very much for all your work there.\nJohn Resig: Fantastic, I'm glad to hear it. You're very welcome.\nJerod Santo: Seven years is a long time in internet years; that's eternity. It must be very satisfying to keep you there that long.\nJohn Resig: Yeah, it definitely is. I think it's nice because as Khan Academy has grown, I certainly feel like I've grown a lot, too. I think one of the reasons why I decided to work at Khan Academy in the first place - and this might come up later, but when I joined Khan Academy, I stepped down from jQuery; I left the project. I left it in good hands, but I deliberately wanted to move on, to be able to work on a product, actually getting to ship something and get it out to users, and have that sort of flow and that process... So that's something I've been really just enjoying and really relishing.\nWe have excellent teams, really good designers, engineers, front-end and back-end, QA people, and being able to ship really high-quality stuff is -- I don't know, it's a lot of fun... So that's something that -- I feel like we haven't always been able to do that; certainly back in the beginning it was much more loose, and everyone had to do everything, but now we're larger(ish); we're still less than 200 people, but we're certainly a lot more professional and we're hitting things that at least I'm very proud of.\nSuz Hinton: That's the dream.\nJerod Santo: So John, we have you here today not to talk about jQuery, but to talk about GraphQL. Khan Academy was an early adopted of React, and now you dove head-deep into GraphQL and you're so excited about it that you have a GraphQL Guide which seems to be in progress, but has some [unintelligible 00:07:26.27] book that you're writing with Loren Sands-Ramshaw. Tell us the back-story and the introduction, which we'll link up in the show notes the Introducing the GraphQL Guide post... You give kind of the insights into how GraphQL was exposed to your team there at Khan Academy, and then some of the transition of getting into it. Can you tell us that story?\nJohn Resig: [07:47] Sure. At Khan Academy I guess we take a very different approach to architectural decisions than maybe most organizations. My role - I'm a front-end architect; I'm THE front-end architect, but I don't dictate anything about what we do or what we should be doing, what technologies we should be choosing. I sort of see my role as a facilitator.\nIf people are interested and excited about things, my job is to help them define it and refine it, and get it to the point where we can start using it. For GraphQL, that was a thing that had come up in a number of our front-end guild meetings. We have these bi-weekly discussions with all the front-end folk there and we get to talk about things we're working on, or interested in, and GraphQL had come up a number of times. People had gone and seen different talks on GraphQL, or read blog posts, and started to experiment with it in side projects... It was at that point that we were like, \"Hey, this is pretty interesting.\"\nI think early on we were looking at a number of different technologies and GraphQL seemed interesting. Relay and then Apollo came later on, and all these different things... And it's like, okay, how do these play in together, how are these interacting, and how is this compared to what we're doing right now with our REST APIs?\nAt least for us - we have a lot of REST APIs, both public and private, and maintaining them was a real project, and it was really hard for us to kind of understand the data requirements that we had and that existed across all these different APIs.\nSo we knew we were kind of interested in GraphQL, but we needed to kind of understand whether or not this was going to work for us... So what we ended up doing was a number of experiments. We hold hackathons and Khan Academy, so during the hackathons we did some experimentation with trying out GraphQL on parts of our website. This was not intended to ship; obviously, it's a hackathon, you're just doing something to see if it works... But in that process, we were like \"Hey, this is pretty cool.\"\nSo the next phase of that was I was on the classroom team last year... The classroom is all developing products for teachers and students, in a classroom setting. And in there, we were gonna be redesigning and redeveloping a number of our products, and I realized \"This is actually a really good opportunity to experiment with using GraphQL, because since it's a greenfield opportunity, we don't need to be relying upon existing REST APIs necessarily (we would be writing new ones anyway), so let's use this as a chance to define a GraphQL architecture, implement it, and start using it for these new products.\"\nIn doing so, it ended up working really well. As we were using this, we were just like \"Hey, this is amazing. It is so much easier to use.\" Then we in the classroom team started talking to other teams, and we were like \"Okay, this is actually really legitimate\", and we started to get other teams to kind of like start experimenting with their architectures.\nThen eventually, after a few months of this, we all kind of decided that this is actually what we wanna be doing... That GraphQL is just fundamentally so much better than what REST has provided for us. So we were willing to put in the hard work of moving over, rewriting a lot of our APIs, and all that. [11:53] This is still very much an ongoing process; we sort of have a mandate now in place where we're using GraphQL for all new things that we're writing, and we're starting to convert existing things over to use GraphQL... But it's gonna be a lot of work... So we'll see. I don't know when the day is gonna arrive that 100% of our RESTful APIs are gone and we're using GraphQL for everything.\nI mean, frankly, we're not even to that point yet with React. We still have some pages lingering somewhere on our website that we're using jQuery, and stuff... The process of pulling out technical debt is a long one, but yeah...\nJerod Santo: About how many REST APIs are you talking about here? Give us an order of magnitude - hundreds, thousands, dozens...?\nJohn Resig: I think maybe a hundred(ish) would be my guess, in stuff that is both public and private.\nSuz Hinton: So it feels like the GraphQL guide is aimed to be that missing manual that you didn't have when you went through this with Khan Academy... Which is awesome, because now other people can learn from this journey that you've been on, and I think it's also really refreshing for you to say that \"Well, this is an ongoing journey...\" You know, because a lot of people feel that they have to do everything all at once, and that can be really scary.\nI really appreciate that you wanted to go back and actually then create this missing manual. Is that sort of the thought process you had?\nJohn Resig: Yeah... I think it's a couple things. One is having a missing manual -- and then there's a couple of things, which is that I think when we started using GraphQL versus now, there is just a lot more documentation and tool now than a year and a half ago... Which is the reality of pretty much any new technology. But additionally, I was very interested in getting people excited about this technology... I was, and am.\nI wanted to not only have there be a good resource for people to use, but also just that -- I feel like there's some work to be done to even convince people that GraphQL is interesting in the first place. I'm convinced, but yeah... So I think part of the [unintelligible 00:14:23.06] is explaining and looking at REST APIs, looking at GraphQL, and looking at the benefits that GraphQL provides. So yeah, that's where my heart and mind is at.\nJerod Santo: It's always interesting seeing large software companies adopt these new technologies... Especially when Facebook came out and announced GraphQL and released it, they had already had a successful track record with React, but then they also had Relay, and they wanted everybody to use Relay; that hasn't panned out quite as well, but with GraphQL I think you had early signs of success when GitHub decided that GraphQL was worth them investing in, and now we see Khan Academy - especially yourself, John - writing a book about GraphQL. That's going to, I think, sway a lot of people, if they were just saying \"Yeah, no big deal\", to take a look at it. Is that some of your intention, and then why would you necessarily want that to be the case - so that it has a brighter future?\nJohn Resig: I think one of the things that has been most changing for me - and again, I will say that I just have an extremely heavy front-end bias in everything I do... [laughter] I mean, perhaps understandably so... But to me, GraphQL is the most front-end friendly API mechanic you can have.\nSo at least for me, the more GraphQL that's out there, the easier it's gonna be for developers - front-end developers, especially - to interact and use different APIs.\n[16:05] When we use GraphQL and we're developing new products, the rate at which we can iterate and prototype is so much faster than with REST API... At least with how we had our REST APIs designed. You would specify your data requirements on the server side and say \"Okay, we need to get these fields from these models, and pass them up into a JSON object and send it up to the client...\" Whereas with GraphQL, you're defining your schema; you're saying, okay, this is your model and what properties exist on it, and then on the client you've specified, and it completely changes everything.\nNow, instead of having to do some server-side -- if you want a property that's missing, you have to change some server-side code with the REST API, then go to the client, and change the fields you're getting... Whereas now with GraphQL you can just do all on the client. Since everything's been specified in the schema, you can just say \"Hey, I need the username here. I wasn't getting it before, but now I want it.\" You just add it in, and there it is. In that way, your ability to iterate is so dramatically improved, and you can just get stuff out very fast... And that's great for us - we're working with designers and we're doing a lot of testing in schools, and we can just try stuff out, get it out there, experiment, get the results back and just keep iterating again and again. So yeah, I think that's something that's worked out very well for us.\nBreak: [17:52]\nSuz Hinton: So as you've been doing these iterations, has there been anything that's popped up that you didn't expect to run into with GraphQL? ...such as the way you write schemas, or even just how those queries end up connecting on the back-end... Or is there any sort of little polls that came out of it that you could share with us today?\nJohn Resig: [19:48] I will mention that at least at Khan Academy we -- I think we're probably different from most shops that would be using GraphQL, which is that our back-end is on Google App Engine, and we use Python for our back-end. I suspect that probably a lot of people who are using (or would end up using GraphQL) are gonna be probably with a Node.js back-end of some sort... I don't know what platform they were running on.\nSo yeah, I think some of the things that we learned were sort of about the differences in server-side implementation... And I think there may be some things that we are maybe a little envious now of. I've been seeing the exciting news and stuff coming out about Apollo server, for example, and all sorts of really interesting hashing mechanisms, and things like that that are there... But you have to be using Apollo server and kind of have it integrated in your stack, whereas for us, that would be challenging to do.\nSo yeah, I don't have a good answer to this at this point, other than to say that if -- I suspect that if you're sticking in Node.js land, you're gonna have a really good time. [laughter] And if you're kind of skirting out the edges like we are with Python and Graphene, and things like that. You can definitely make things work, and we are... It's just that it's gonna be a little bit different.\nAt Khan Academy we're also starting to experiment with Kotlin as a server-side language, and I'm not sure what their GraphQL store is like, but it can't be better than what's happening in Python, I can almost guarantee that.\nSo yeah, anyway, that's something that we've been actively learning. At least in my side projects where I've been using GraphQL, it's been very smooth sailing and I've enjoyed that.\nSuz Hinton: That's great. Is this something that you're covering a little bit more in your guide, as well?\nJohn Resig: Yes, absolutely. We're covering many of the different client-side implementations, and many of the different server-side implementations. We do have a bias towards sort of the primary stack, I wanna say, with a Node.js back-end and a front-end that's using React, because I think that's something that a lot of people are probably gonna be using who use GraphQL... But we do cover a lot of the other options as well, because that's the nice thing about GraphQL - it's relatively generic; nothing about GraphQL dictates that you have to be using React, or using Node.js.\nWhat's interesting is that -- like, we're using Python on our back-end, and on our front-end we're actually going through old pages of our site and replacing REST API calls or GraphQL calls... And some of those pages are older; they aren't using the latest Apollo and all these wonderful frameworks... But we've kind of created little shims where we can stick these GraphQL calls.\nSo yeah, you can really make it work wherever you want it to run, no matter what technology stack you have. So yeah, I think that's something that's nice, and I think people don't necessarily always realize that.\nJerod Santo: I can speak a little bit to the back-end ecosystem, because just as part of my work at Changelog and Changelog News, we obviously keep our thumb on the pulse of what's going around, in as much of a polyglot way as we can... And I would say in the last 18 months or so, across many of the different ecosystems - Node was very early and often in terms of tooling and support for GraphQL back-ends, but I've seen a lot of advancements in the Elixir ecosystem, in Ruby, as well as Python... [24:03] So there's just a lot going on, and a lot of the different back-end technologies are racing to get their tooling and support for building GraphQL APIs as solid and quality as they can. So you've definitely seen a groundswell support across different ecosystems.\nSo John, what else from the front-end? This is obviously where you focus. You said GraphQL was just so much better than REST from your guys' perspective, so I guess just -- I know you've mentioned a few pieces of it, but maybe a chance to sing its praises and enumerate all the ways... You know, let me count the ways that GraphQL has won you over on the front-end. What's the biggest wins and how many are there?\nJohn Resig: So I've mentioned rapid prototyping, but I think one of the things that so shocked me about GraphQL is that when you have your queries defined on the client or in your JavaScript code, you can statically analyze the queries. The benefit of this is that -- we have a linting rule set up where if there are any changes to a GraphQL schema or something like that and it's gonna cause one of our queries to break, it'll produce an error about that.\nNow, the cool thing about this is that it allows us to refactor our APIs, our GraphQL, in ways that were never possible with our REST APIs... Because with a REST API - at least the ones we had - it was just like, okay, here's a JSON blob; we don't know what data is being accessed or how it's being used or where it's being used, so therefore we don't know if it's ever safe to remove any data.\nSo if we wanna rework our API and be like, \"Can we delete this data? Can we work this schema?\" etc. it's a huge, very frustrating project... Whereas with GraphQL you can do that static analysis and just be like -- and we've done this, where you're like, \"Oh, I wanna rename this property to be more descriptive.\" So you rename it, you run the linter, and you get a nice little list there of every file that's breaking now; you go through and change those names, and you're done.\nSuz Hinton: Oh, my God...\nJerod Santo: [laughs] Suz likes that.\nJohn Resig: Yeah... So the refactoring process takes minutes, as opposed to hours and things just breaking in weird ways that you can't quantify. So this is something that is -- for me, when I saw that, I was just like \"Okay, that makes all this worth it.\" [laughs] It's the sort of thing that is truly important.\nI think one of the technologies we've been using a lot at Khan Academy additionally is Flow, with Flow types. The nice part is that if you have this GraphQL data come in, you can define the Flow types for the GraphQL data structure, and then you can sort of trace a whole path through your applications. So again, if we change the name of one of these props, I can just go change that in the Flow type definition and now I can see every single place in my application that's breaking as a result of that.\nThis sort of stuff - again, it's making refactoring possible in ways that really just weren't feasible before... So this is something that really, really excites me.\n[28:02] Other things that have excited me from a front-end perspective about GraphQL - I think I've really enjoyed the Apollo client-side implementation. We've been using it with React, and it makes it really nice to really understand things about like loading states, error states - all this sort of stuff. A good side effect of this is that it encourages you to write React components in a way that are very robust to changes... Because your data could be in a loading state or an error state, but you have to account for that, and I feel like in a Rust world it's very easy to write something where you're just like \"Oh, when I get some data\" and then like never handle the data [unintelligible 00:29:00.12] In the Apollo world I feel like you kind of have to do it. It's defined explicitly, and especially if you're using things like Flow types; you can verify -- you have to make your code more robust... Which is good; it's better coding practices, frankly.\nThat's something that I've also really enjoyed - I feel like the quality of the components that we're building that use GraphQL are just better than what we were building in REST land, because we're able to enforce these really good practices from the start.\nSuz Hinton: Speaking of enforcing things from the start, I had a question just about back-end data and setting up databases, and things like that... You're obviously on a journey where you're taking existing data structures on the back-end and you're getting it to work with GraphQL. Is there anything that people should do differently if, let's say, they know immediately from the get-go that they're gonna be using GraphQL? Do you have any advice on how back-end developers could set up their databases and their data structures in the first place on the back-end in order for it to be as easy as possible to work the GraphQL?\nI know that it's obviously a very generic technology, but are there any sort of nuances in there that you can share?\nJohn Resig: That's a good question. It's not something I've had a ton of experience with, honestly... But as I've played around with GraphQL and experimented with it, I guess it really felt like it is able to handle lots of different cases and lots of different database styles or querying mechanics. I think generally it does work better or it's a little bit better-suited to document-centric databases.\nWhen I've gone through and implemented GraphQL on top of MongoDB or something like that, it's really simple; it couldn't possibly be much simpler. It's a little more work if you're doing a SQL database, or something... But again, it's not insurmountable at all.\nUnfortunately, I don't feel like I have very good advice here to give specifically, and I wouldn't be surprised -- this is something I haven't done much research into at this point, but it wouldn't surprise me if there are people building just like databases design for GraphQL at this point, or kind of all-in-one type of deals, that are designed for performance in caching and all these sorts of things from the get-go, so you don't have to weld them on your own... But that's something that unfortunately I haven't done a lot of research into at this point.\nSuz Hinton: [31:57] Yeah, I think there's a certain -- I think you're very lucky if you are actually entering now and you're starting something from scratch, which generally isn't always the very common case, right? Unless you're a startup that just exploded onto the scene right now, you're going to be dealing with transitions and things like that, which is very similar to what you're going through at Khan Academy... But it's good to know that there are some sort of cases or situations where it is a lot easier to get started immediately. That's cool to know.\nJerod Santo: So from the front-end perspective, I've had a few of these conversations - we can link up a few old Changelog episodes... And not even that old; we had a Prisma and GraphQL episode just this spring even... About GraphQL, and I talked about it with a lot of people and it seems like from the front-end it is demonstrably - and I'll maybe even say objectively - better in terms of, like you said, prototyping, speed of development... I didn't realize at this point about refactoring, which is really cool... But it seems like on the back-end, building the back-end, dealing with caching, dealing with perhaps inappropriate or poorly-crafted queries - that's kind of where the \"there be dragons\" are.\nI know you've been very much on the front-end of the Khan Academy team, but has that been a real issue? Put differently, is the back-end team - or the people who are doing both - as excited as you are, or is it like the front-end is driving this and the back-end is just like along for the ride?\nJohn Resig: Yeah, so it's interesting... I think a couple things that I wanna caveat the work that we've been dealing with is that so far we have not exposed our GraphQL stuff public. We have not replaced our public REST APIs with GraphQL yet. That's gonna be a process in and of itself. But we are not letting people write arbitrary GraphQL against our servers.\nGitHub allows people to do that, and I'm very curious to hear about how they do that in a way that they feel is safe. But at least so far, that has not been a priority for us.\nNow, additionally, another thing that we do is we have lots of monitoring and logging for all of our GraphQL queries... So we track the performance of every query, we track this performance over time, and then we have alerts for when queries are being especially slow. That way, we can look at them and be like, \"Hey, this query is taking five seconds. That seems excessive. What can we do to make this faster?\" With this data, we can delegate this to the teams to work on and improve.\nBut at least so far, what's interesting is that initially the front-end team - we were champing at this, we were like \"We really want this. It's gonna make our lives easier\", but I think an interesting part about the GraphQL switch here is that the back-end team now is very excited about this change, too... And one of the reasons for this is that it dramatically simplifies the back-end.\nPreviously, we would have a REST endpoint, and we would get some information about a teacher and their students, or something like that... And within that single REST endpoint is many different queries, data being transformed and mutated and all this sort of stuff, and then it gets mushed back into a JSON blob and put out.\n[35:51] This code ends up being pretty complicated... Like, it's hard to look at and reason about, and especially when you have a number of endpoints that are doing very similar things, but just pulling the data in slightly different ways. But in GraphQL land, since you define a schema, just a generic schema - this is the sort of thing that pretty much anyone can do... You know, front-end engineer, back-end engineer - it's relatively easy to write these schemas. Then once you have that, you don't really have to worry about the logic of mutating this data into a good form. GraphQL takes care of that for you.\nSo in a lot of ways, it's made a lot of our data structures much easier to understand, and the back-end team has been excited about that because it's reducing the surface area of the application. Now they can just look at one place and be like \"Well, the only place where this data model is being used is in this one GraphQL schema, and that's it.\" They can just look at that one place and understand how it's being used entirely... As opposed to trying to hunt around the application through all the different REST APIs that could be using this thing; it's just very complicated.\nSo yeah, this is something that they're seeing as a way to reduce the amount of code that we have, and the amount of service area, and just simplify things overall.\nJerod Santo: That's interesting. I find myself often -- I often do small teams, or sometimes team of one style projects, so very often I'm the consumer of my own REST APIs, so I only have to nag myself for slightly different data or a new endpoint... But I still have that mental back and forth of like \"Oh, I guess I need the data this way.\" I'm going to go add an endpoint or adjust an endpoint to massage it to be better, and I have worked in a situation where I was contracting to build a back-end API for a startup that had multiple devices. An iOS app as well as a web app for the first two; they weren't quite successful enough to make it to their eventual Android app situation... But in that circumstance it was me, a contractor working on the API, and then a completely different company building the iOS app... So if you look at the bottleneck of development speed there, it is the integration point between those two actors, and the slowdown when they are waiting on me or vice-versa was troublesome.\nI could see where if it was a GraphQL API with a well-defined schema that a lot of the stuff that they were waiting on me for, waiting on back-end for, they wouldn't have to wait; they would just change the way the query worked, and as long as the schema supported that, then they would have been off to the races.\nHave you felt less communication lag or maybe tension between -- I don't know how big your teams are, if you have walls and whatnot between them... I know some companies have very strong walls between teams. What are your thoughts on that?\nJohn Resig: Yeah, so one thing I'll mention briefly is that we do have a front-end team and back-end team, and we do have people who are full-stack... But additionally, we're pretty porous; front-end people are making back-end changes, back-end people are doing front-end changes.\nJerod Santo: Well, that's the way it should be, right? ...I think.\nJohn Resig: [laughs] So we aren't one of those super-strict organizations. I think some people just may have preferences of just doing front-end or back-end, and as a result they do less... But yeah, I think one of the things that's been interesting is that even in cases where a front-end engineer has had to go in and add in an additional field to the scheme, I would say that it's just easier to do in general, even compared with how we had things previously... So even in the worst case, where a front-end engineer has to make back-end changes, frankly, any of our engineers escape all that, from our most junior to senior.\n[40:08] I think that's something that feels empowering. You don't have to wait and rely upon getting a more senior engineer or back-end engineer in to go work on this... But I think the thing is that there's far more common cases just like \"Oh, we're just missing this field, but it already exists in the schema, so we just add it in and now we're done.\" That's the sort of thing that is -- yeah, the velocity impact is tremendous. And of course, that's helping the individual engineers so we don't have to go into the back-end, or we find someone else to finish it... Whatever the case might be. So yeah, it's been pretty great.\nBreak: [40:52]\nSuz Hinton: John, we have some really cool community questions from our JS Party/Changelog community for you... We're gonna read some of them out to you on this segment.\nJohn Resig: Okay.\nSuz Hinton: The first question is from Dan McKlein. He says \"Without subscriptions, what's the benefit of GraphQL over REST? With HTTP too you get maxing of connections, so the limit of open connections is higher, somewhat negating the benefit of grouping queries. And the pain point comes when one of those queries is slow in that group, causing your whole payload to be delayed until your slowest query returns, which is arguably worse than firing off ten REST requests.\"\nI think the first part was the question, which is like \"What is the benefit of it over REST if you don't have the HTTP bottlenecks?\" So this less probably about the user experience, I guess, on the surface layer.\nJohn Resig: Yeah... So there's a couple things. One, GraphQL queries don't necessarily have to wait until everything is done before returning. I know that Apollo and with a compile server you can start to return data in batches. You can get some of the initial layers of requests and return those, and keep returning more as you're getting deeper and deeper.\nSo it isn't necessarily the case that it's an all-or-nothing proposition with GraphQL. Certainly, the simple implementation would be all or nothing, but I'm looking at a lot of the different tech stacks that exist now, like Apollo server... They're much more robust, and can handle incremental data.\nI guess the question about performance... I think one of the things that is certainly a little bit tricky, and one thing that's trickier with GraphQL than with traditional REST APIs is that -- I guess typically the traditional REST APIs, especially the ones that aren't authenticated, it's a lot easier to do browser-based caching, or caching at an edge cache or stuff like that... Whereas with GraphQL, since typically you have a single endpoint, it's hard to do caching at that level.\n[44:08] So usually, what you end up having to do is either having a different sort of client-side cache, like in browser... We use Apollo, and in that case it caches the data that we've requested, and if it looks like we're going to try re-requesting data that we already have, it just pulls from that cached data, so we don't have to send off another request.\nThen additionally, you can do caching on the server-side, but it's lower-level at like the software level, so you can see that you have certain queries coming in, and if you know that certain data is always gonna come back, you can just return that cash response.\nYeah, so I think there are definitely ways of improving the performance, improving the caching of GraphQL... One of the things is that it's just gonna work in a different way than what typically happens with the normal REST API.\nJerod Santo: So I guess as a side question or follow-up for that - I guess it's more of a side question... Dan says without subscriptions, but he's now assuming that we all know what subscriptions are in the context of GraphQL... Can you explain what subscriptions are?\nJohn Resig: I'm gonna try and explain... I mean, essentially, you can subscribe to a data source and get periodic updates; as more and more data comes in, it gets updated with that additional data. Now, subscriptions are a little bit different from what I was describing before with the Apollo server, which is like a single query, but then the data that you're returning is complex, it's coming from multiple different queries, subqueries, and stuff like that. In that case, it could potentially come back incrementally, as the data is ready... Whereas a subscription is more like -- you would use a subscription to implement a chat room, or something like that... Or [unintelligible 00:46:12.26] where there's lots of updates coming in, or a stock ticker feed...\nJerod Santo: Right. So it's more like a real-time connection that gets pushed data from the GraphQL server?\nJohn Resig: Yeah. That's more what the subscription is, rather than the other thing I was describing.\nJerod Santo: Gotcha. Very good. Okay, next question from the community... This one comes from Dylan Schiemann, who listeners may remember from the Dojo episode back on JS Party #25... Dylan says \"So jQuery... That's like a query language for GraphQL, right...?\"\nJohn Resig: [laughs] Yeah, it's funny, because Dylan and I go way back... He was working at Dojo, I was working at jQuery... All this, at this point, old-timer JavaScript framework folk... [laughs]\nJerod Santo: Yup. In our chat room, he mentioned that you guys have been trolling each other for years, so he thought that would be appropriate...\nJohn Resig: [laughs] But I think it's funny... It's like one of those things where we -- at the time, the competition felt intense, or at least it did for me... It was just like, \"Oh man, we're trying to change things and get recognition, and all this sort of stuff...\", but then as things have changed and as the world has changed, and everything, now we just look back at those times... We're like, \"Oh yeah, that was a thing that was happening...\" [laughs]\n[47:49] He's jokingly saying is jQuery a thing for creating GraphQL databases, but like, back when I named jQuery, my first name was jSelect, just for like JavaScriptSelect... But I couldn't, because the domain was taken, so I didn't choose that... And I saw that jQuery was available, but there was an open source project called jQuery, and it was like a Java library for doing SQL queries, or something like that. It looked like it hadn't been updated in a while, so I was like \"Okay, it's probably fine. I can just use this name.\" If the domain is available, I'll get the domain and I can use it.\nI remember at some point in the future the person running the open source project got in touch with me and was like \"Hey, you're kind of using my name.\" I'm like, \"Oh, sorry... I thought the project was dead. I didn't realize that it was still going on...\" [laughter] But the thing is that yeah, obviously, I feel pretty certain that web-based jQuery is far more popular than the jQuery Java SQL querying thing... [laughs] But yeah, I did feel a little bit bad about that.\nSuz Hinton: This is such a classic naming problem, you know what I mean? Like, \"Is the domain available? Is there already a project called this?\" These days it's like \"Is the name taken on npm?\"\nJerod Santo: Right. The age-old programming problem is naming things, and cache invalidation, and off-by-one errors.\nOkay, so Dylan does actually have a serious question following up on his troll, which actually plays into some of the stuff you're talking about there, John, about jQuery... He says he's curious to find out what you think of jQuery's place in JS history now. \"Do you have regrets with the project? Would you go back and focus more on architecture-type problems with jQuery before things got out of hand for people trying to build large apps, or do you see it as a good bridge for people from the days of old to the v-dom-based dev?\"\nJohn Resig: I do see it as a relatively good bridge. It's certainly of its time, where jQuery was so DOM-centric... Like, you are querying DOM elements, manipulating those elements directly... Certainly whenever I do stuff like that these days, it feels very antiquated. [laughs]\nPersonally, I don't have regrets about not doing architectural things, and it's not because I feel like I missed out... At the time, I made very deliberate decisions not to work on that. We knew that jQuery was opinionated in some ways, in that \"These are the ways of querying DOM elements\", and things, but it was not opinionated about how you built your application. You can build it in any way you want it, you can use jQuery in that context, but we weren't dictating how that should work... So I'm okay with this.\nIf you look at React -- I was mentioning earlier that we were early adopters of React at Khan Academy, but we were (I believe) the first organization outside of Facebook to adopt React... And React is so dramatically different from the jQuery way of doing things. I don't think we could ever have iterated on jQuery to the point at which we arrived at React. It's a fundamentally different branch of the evolutionary tree, and frankly, I feel like React is a lot better for the kind of things that it's trying to do.\n[51:59] These days, as a front-end dev, I feel like I'm much, much happier trying to build the complex things that I'm trying to build, than I was a long time ago... And it isn't necessarily because of jQuery, it's just because that we as an industry have dramatically changed how we're doing things and what we're willing to consider to be acceptable. Essentially, the industry is growing up, and a part of that is having a lot of these frameworks that take care of things for you.\nSo yeah, I don't know; I don't have regrets about it. I think jQuery was great, it did a very good thing for a lot of people... I certainly enjoyed using it, and really when I first created it, that's all I wanted - I just wanted a framework that would solve my problems. Yeah, I'm okay. I sleep fine at night. [laughter]\nJerod Santo: As you should.\nSuz Hinton: Our next question comes from Louis Montez; it relates a little bit to Dan's question earlier - it's about REST vs. HTTP, and the advantages outside of that. They ask \"Since we've had things like JSON-RPC over websockets for years, how much of the GraphQL as \"the new REST\" comes from REST being typically tied to HTTP, while GraphQL is transport-agnostic?\" I think that's a great point. They're asking \"Is the query language itself the killer feature?\"\nJohn Resig: Yeah, I think so. I think the query language is really good, because a lot of the features that I describe are benefitting directly from that... Being able to specify the query on the client side, being able to do static analysis, and all this sort of things. So that's certainly a benefit.\nI think additionally, having a schema defined on the back-end - like, you have the schema on the back-end and then queries on the front-end - those two together really make GraphQL what it is. So yeah, I don't think the transport layer -- as I'm developing in using GraphQL, I don't think about how it's getting to the client necessarily. That's not my primary concern; my primary concern is more about \"Okay, what data am I requesting as the data that I need?\" And I feel pretty good about that.\nSo I guess to answer the question - yeah, I would agree that probably the query language itself, but then combined with the schema definitions is really what makes GraphQL special.\nSuz Hinton: That makes a lot of sense.\nJerod Santo: The next question comes from Chris, a.k.a. CanadaUni in our JS Party chat room; Chris was just talking about an ArrowPress project to learn Apollo stack with GraphQL; we were talking about coffee during the break, so Chris was much into that conversation... Chris has a thought, a question, and a concern; I'll kind of give them to you in that order.\nThe thought is \"It was really easy to set up a Node server with the new Apollo server\" - good to hear that. The question is \"When should someone not use GraphQL?\"\nJohn Resig: Personally - this is my opinion - I'm not convinced yet about using GraphQL for a project where you are the only developer working on it. If you're just building a thing for yourself, and you're doing the front-end and the back-end and everything, you can probably get some benefit from GraphQL, but I think there's gonna be diminishing returns.\n[55:59] I think you're gonna get the most benefit from GraphQL when you're on a team of engineers, and you're trying to all share and use the same API. Additionally, I'm also not sold about using GraphQL for a public-facing API. I know there are people who do it, and more power to them; it just seems like an unnecessarily complicated thing to implement, especially since you're letting people run semi-arbitrary queries against your data. That's the sort of thing you need to be very, very vigilant about.\nThose are two things that (at least to me) I still have questions about. But at least the more common case of having a team of engineers, working against a single GraphQL endpoint - it's amazing. It couldn't be better. In that way, REST looks a bit inferior.\nJerod Santo: Finally, Chris shares a concern, which maybe you can just react to or not... They say \"Sometimes it feels like there's too much magic, making it challenging to troubleshoot, sometimes. Maybe that's just with Apollo, but that has been my experience.\"\nJohn Resig: Interesting. I'm trying to think of issues that we've had as we've used Apollo... And we have had some. I think the issues that we've had have been more when we were upgrading, like moving from one version to another, and things start breaking in ways that we don't understand... This has only happened maybe once or twice so far, and it just requires a little bit of debugging and trying to figure out how different state is moving around in different ways...\nI think usually issues like that are happening - if they happen at all - in the very complicated parts of our application... So maybe that also kind of speaks to us, that our applications should be simpler, and then therefore be easier to reason about. But yeah, I don't [unintelligible 00:58:21.22]\nSuz Hinton: Our last question is from Rasmus Hanson, and they ask \"What are some common mistakes people make when working with or implementing GraphQL?\"\nJohn Resig: I feel like I don't have enough data looking at people at large, what mistakes they've made... I feel like there are mistakes that we made... [laughs]\nSuz Hinton: Yeah, we'd love to hear that. Personal anecdotes would be amazing.\nJerod Santo: Absolutely.\nJohn Resig: I've mentioned earlier about how we have tracking set up now for the GraphQL queries, to know how long they're taking, and that isn't something that we had initially, nor was it something that came out of the box... And that's a thing that's helped us a lot, because we were having a hard time figuring out which queries were taking a long time, and why, or even understanding which queries might get slower, given the different parameters that get passed in them.\nSo that's the sort of thing that is -- and I'm not sure it's a mistake that we made, other than that as we were using GraphQL, we were kind of realizing that we just didn't have the information that we needed to write good queries, so we had to build an additional layer on top to do this analysis.\n[59:55] I'm trying to think of other mistakes that we made... One mistake that I feel like we didn't make, but we could have, is that we didn't adopt GraphQL too early. I think now is probably the best time to be adopting GraphQL. We adopted it a year and a half ago; it was certainly rougher. I think if we had tried to adopt GraphQL when it first started coming out and being all buzzworthy and all that, we would have had a real hard go with it...\nSo I think from a mistake perspective, my takeaway from this is that if I'm starting a new project today, I'm just gonna go straight to the latest and greatest things. I'm gonna use Apollo both on the front-end and back-end personally, because their full stack takes into account a lot of the edge cases that exist.\nI think it would definitely be a mistake today to kind of like roll your own thing from scratch. There's really no reason to do that. There's a lot of good frameworks to take care of this for you. I think that's probably my main takeaway right now.\nSuz Hinton: That's great advice.\nJerod Santo: Well, that rounds out our community question & answers; thanks to all the awesome community members who submitted those questions, thanks John for hearing them.\nFinal thoughts from you, parting words, John, before we let you go?\nJohn Resig: Thank you so much for having me. It's been nice getting to chat about this, and I guess a message to anyone who's listening is definitely check out GraphQL. I think it's pretty great, I think it's at the very least worth some time investigating. I think that's about it. Thank you.\nSuz Hinton: Also, if people want to check out your GraphQL guide that you're currently in the works with, they can actually get the beta right now, right? So if they go to graphql.guide - is that the best place for them to start?\nJohn Resig: Yeah, you can go there and you can pre-order and get access to the full beta book as we're working on it. There are both online and eBooks, as well.\nSuz Hinton: Yeah, I'm excited. I see that it's compatible with Kindle, and because I travel so much, my Kindle is my best friend. That's where I get all my reading done, so that's great.\nJohn Resig: Excellent.\nJerod Santo: Very cool. Well, that is our show. Suz, thanks so much for joining me all the way from Hawaii... And hey, go hit the beach and enjoy your vacation!\nSuz Hinton: Will do. It looks like no one is there right now, because it's so early, so I'm very excited to get out there. Thanks for having me.\nJohn Resig: Yes, please enjoy.\nJerod Santo: And one last word before we let you all go - we will be at JS Conf, so look for the JS Party T-shirts, look for many of our panelists... Suz, will you be there?\nSuz Hinton: Yeah, I'll still be in vacation mode, so if you see me wearing lots of tropical-looking attire, it's because I've just come back from Hawaii. But I will definitely be there and I'm very excited.\nJerod Santo: Awesome, very good. Suz will be there, Kball will be there, I believe Nick and I think Feross as well. We plan on having stickers, we plan on having T-shirts; it might be first come, first served on those. And then also, there will be a live JS Party from the JS Conf stage I think on the first day, so stay tuned for that. If you're going to JS Conf, hit us up; we would love to connect with you.\nThat is our show for this week, so thanks so much for everybody, and we'll see you next time."
   },
   {
    "title": "go-time-212.md",
    "url": "https://github.com/thechangelog/transcripts/blob/master/gotime/go-time-212.md",
    "transcript": "Natalie Pistunovich: Hi, everyone. Another year of GopherCon. It's so exciting to see everybody online again. I hope you had a wonderful first date, and I hope you had lots of fun in the workshops yesterday for whoever attended. My co-host for today is Angelica. Hi!\nAngelica Hill: Hi!\nNatalie Pistunovich: Joining from the overseas of New York.\nAngelica Hill: Yup. But soon to be flying to London next week. Finally.\nNatalie Pistunovich: Oh. Exciting time to fly.\nAngelica Hill: Yeah.\nNatalie Pistunovich: And we are joined by three wonderful gophers who have amazing side-projects that are written in Go. We have Sebastian Spaink, who is a software engineer at InfluxDB, and also -- you know what? We'll tell about your wonderful project right after the intro. We'll keep it interesting. For those who have not attended the talk, or your talk has not been aired just yet, because there's a few more days of GopherCon ahead of us... Sebastian, where are you joining us from?\nSebastian Spaink: I'm in the Microsoft Studios, here. So I'll be doing my talk here tomorrow.\nNatalie Pistunovich: Oh, wow.\nAngelica Hill: Because everyone knows where the Microsoft studios are.\nSebastian Spaink: [03:58] Enter Redmond, Washington.\nNatalie Pistunovich: It's on the internet. [laughter]\nSebastian Spaink: Yeah.\nAngelica Hill: Helpful.\nNatalie Pistunovich: Washington. Cool. Daniela Petruzalek, you are joining us from my side of the overseas, from Europe. But not from the E.U.\nDaniela Petruzalek: Yeah, so I'm currently based in the U.K. I'm based in Bournemouth. That is the South coast of England, basically. But yes, Europe. Team Europe, yay!\nNatalie Pistunovich: Yay! And you're a product owner at JPMC, and you're a Google Developer expert for Go.\nDaniela Petruzalek: Yes, yes. As people say. [laughs]\nNatalie Pistunovich: And we have Linus Lee joining us. Linus, you're an independent software engineer, and you're working on creative tools. Welcome.\nLinus Lee: Yes, I am. Thank you. I'm also in the Microsoft Studio. I'm across the hallway from Sebastian, but it doesn't look like it, through the magic of studios.\nNatalie Pistunovich: Yeah, it looks completely different in your background, but the sound quality is amazing. So it's great of you all to join. We are here to talk about your fun projects.\nLinus Lee: Let's do it.\nNatalie Pistunovich: Right, Angelica?\nAngelica Hill: We are, we are. But before we dive into your fun projects, do you wanna hear a little bit about when and why you started using Go? Where did it all start for you? Maybe, Daniela, you could dive in?\nDaniela Petruzalek: Sure, sure.\nAngelica Hill: How did Go come into your world?\nDaniela Petruzalek: It's a fun thing - I used to like to tell this story, that I came for the community, and stayed for the community... Because I started with Go - it was a few years ago...\nNatalie Pistunovich: We see what you did there...\nDaniela Petruzalek: Yes. [laughter]\nAngelica Hill: Good one!\nDaniela Petruzalek: Nice catch! A few years ago... Anyway. Basically, back in the days I used to work at a company in Brazil, and they were heavy users of Go. I was getting engaged with the community in other languages, like PyLadies and other groups, and actually they asked me to help organizing a women's group, basically a Women Who Go chapter... And I didn't know what Go was about, to be honest. I was just helping to organize the community. Then I got the opportunity to go to GopherCon Denver, and then the magic happened. I was simply in love with the language. Everything I did after that, I was trying to use Go in some way or another.\nNatalie Pistunovich: So attending the same GopherCon that you're attending now. This is how it all started. Wow.\nDaniela Petruzalek: Yes, definitely. So it's a very emotional thing to be back here and contributing to this amazing community... Yeah, it has a special place in my heart.\nAngelica Hill: Well, for all of us. How about you, Linus? How did Go come into your life?\nLinus Lee: Yeah, so I actually started out in the web world. I learned to program doing JavaScript and HTML web stuff, and then Go was sort of my way to figure out how to do lower-level (I guess) backend programming. I had dabbled into things like Python and Ruby before, but I wanted something where I could have a little bit of a lower-level control over what my data structures look like, and things like that, without having to learn -- I guess the only viable option back then was C and C++, which were great languages on their own, but more complex than I could fit into my brain at the time, and Go was sort of this nice middle ground, where there were things like a good garbage collector, and it was dynamic enough where I could wrap my head around it, but still let me write programs that I wanted to, that were fast enough and small enough, and things like that. So that's the way that I got into it, and I've since stuck with it for all the things that it offers.\nAngelica Hill: Awesome. How about you, Sebastian? How did you come to us?\nSebastian Spaink: Yeah - well, it was love at first sight. The moment I saw that Gopher mascot, I was like, \"Let's do it. This is it. This is the language for me.\"\nAngelica Hill: Me too! I had no idea what it was, and I was like, \"I just... That Gopher.\"\nSebastian Spaink: Right. It was all I needed to convince me. Before, I was working with Python and C++, and it was kind of the same thing, where it was just like -- it felt a bit much doing the C++ and C stuff, and then Python was good, but it felt a bit messy, and I really liked Go's opinionated way of doing things... And then I started using it. I've been working on it professionally now, but before it was just projects stuff.\nAngelica Hill: And no one really wants a Python plushy. A Gopher is so much nicer. [laughter]\nSebastian Spaink: Right.\nLinus Lee: Before I came to the conference I was talking to one of my co-workers and he asked me, \"You're going to this GopherCon thing... What is GopherCon about?\" I was like, \"You know, it's for all the people who love gophers. We just talk about gophers for four days.\"\nNatalie Pistunovich: [08:09] Not showing off or anything, but here's the one from Singapore.\nAngelica Hill: I was gonna ask. That's what I was just about to ask; I was being like, \"I've not seen that purple, and I want it.\"\nNatalie Pistunovich: It has a tale from the famous count in Singapore.\nAngelica Hill: It's gorgeous. Okay, awesome. So we've heard about your start...\nNatalie Pistunovich: Yeah, are you all still working in Go now? And how long, actually, have you been doing this?\nLinus Lee: I could take a stab at it... So I've been using Go in one form or another for at least 2-3 years, I think, between when I wrote my first Go project... I've written Go professionally a little bit; I've squeezed into some projects here and there that aren't what you'd call production products, but that are infrastructure, or testing services, or things like that, just because it's a nice thing that you can build.\nOne of the nice things about Go is that we value stability a lot, so if you write a thing and it's not maintained daily for a few months, it doesn't break over time... But most of my usage of Go has been on side projects, on things like the thing that we're gonna talk about today, but also other things, like little chat clients that I've written... Learning exercises.\nDaniela Petruzalek: Yeah, I can go next. Unfortunately, I'm almost like -- I'm trying to think of the best way to say this but I barely wrote any kind of Go code in production. I spent about (I don't know) one year back when I was working at GoCardless, but that's about it. And most of my \"career\" in terms of Go development is basically side projects and things that I like to do, and tutorials, and things, as you already know a little bit about... But yeah, I haven't been doing a lot of Go, unfortunately. I was trying to find my way into working with Go, but for some reason it didn't happen.\nNatalie Pistunovich: That's super-interesting. That is unexpected, but that's cool. Sebastian, how about you?\nSebastian Spaink: Yeah, I guess I've had the good fortune of being able to work with Go now professionally for the past year, InfluxData, working on the Telegraf project. It's been fantastic. Because before that it was also just kind of dabbling with it, and just whenever I could, for projects. Technically, for a half year, I \"professionally\" worked with Go, but just because I was just doing it on a project that nobody else wanted to work on... But who knows what that ended up with. But now I'm doing it professionally with Telegraf, and it's been fantastic. An open source project written in Go... It's everything I could dream of as far as a career.\nBreak: [10:29]\nNatalie Pistunovich: Speaking of career, Sebastian, would you like to tell us about your fun project in Go?\nSebastian Spaink: Awesome! Did you 3D print that?\nNatalie Pistunovich: For everybody who is listening in but not watching, I have a little 3D printed gopher that I received from a colleague in a previous company... And he 3D printed it. I don't think he planned to print gophers, I don't think his team works in Go, but he is a fan of the mascot, so that was a nice gift.\nSebastian Spaink: Yeah, that's awesome. I should have brought some myself, that I 3D printed... But unfortunately I've got nothing to show off here; I guess you'll have to wait for my talk tomorrow. I've got some screenshots of them. So during quarantine one of the craft projects I started was 3D printing, and the first thing I did was I created a thermo-detonator prop from Star Wars, and then used TinyGo to make the LEDlight shine and play some audio... So that was pretty fun. And then I kind of started looking at other ways I could involve Go with 3D printing.\nSo they've got this whole thing called OctoPrint that helps monitor and remotely-control your 3D printer, and I was kind of looking at ways to extend that using Go. But yeah, it's been fun. It's not like I'm writing the firmware for the 3D printer or anything, as far as Go was concerned; it was kind of like building around it. And also, 3D-modelling gophers to 3D print as well. So that's the main thing I was doing there.\nNatalie Pistunovich: Yeah, that's not an obvious choice, to choose Go for 3D printing, for the modeling.\nSebastian Spaink: Yeah, which is actually pretty cool. I wasn't aware that you could do it either, because I was mainly using Blender and common open source projects for 3D modeling that use user interfaces... But there is a package out there that you can create 3D models using Go, and yeah, it was pretty cool. It's just like primitive shapes kind of glued together... I'll show a screenshot of that tomorrow, but you end up with a very round-looking gopher, because it's just a sphere of other primitive objects glued on it... But yeah, it's all written in Go. So a gopher written in Go is possible. And the open source package I used was called -- I forgot the user's name, but sdfx, I believe is, if you look that up... Yeah. Model your own gopher with it.\nLinus Lee: And you're already talking about spheres and just building shapes out of spheres and it reminds me of what I built when I was looking and building ray tracers. And the sphere is just the simplest shape to write a ray tracer for, so you start just building scenes our of only spheres, and everything -- your ground is just a gigantic sphere with an infinite radius, and you're building raindrops on a giant sphere. What does it actually look like to build a model with Go? Are you outputting it to a file? Are you talking to an API for the printer?\nSebastian Spaink: Yeah, so what we output is an STL file, and it's like the standard format file that you're gonna do in 3D printing. It's a file format that describes the geometry like a bunch of triangles... It's like magic, but they use something called signed distance functions to define the primitive shapes in the code, and then output that to the STL file, which you can then slice into G-Code for the 3D printer to print out.\nAngelica Hill: So how many times did you have to reprogram it if you actually got a beautiful gopher? Because I would assume you had a few interesting-looking shapes, that may have resembled a gopher, but may not have been a gopher.\nSebastian Spaink: Yeah, making its eyes and its pupils look like an actual gopher shape - that's tricky. But I think I got something that looks like a gopher. You've got your iconic mouth and teeth, and then you're like \"Bam! It's a gopher. Done.\" It's a sphere with eyes, and a square, but that's all you need. The beauty of the gopher transcends all shapes.\nDaniela Petruzalek: I must say, I really admire anyone that can do 3D modeling. This is such a thing that my brain can't process. That's why when I go to my hobbies, I only do 2D things, because my brain just can't process a third dimension. I really admire that. Looking forward to seeing your talk, how it works.\nSebastian Spaink: [15:57] Yeah. I did cheat and use Blender to make it sexier-looking than the spheres, but... Yeah, it's definitely my first thing I've ever 3D modeled before. Usually, I'm also just working on the 2D space; it's definitely more comfortable.\nAngelica Hill: And did you use Go because it was the best language to do this, or because you write Go anyway, or did you think about using other languages, try it out, before settling on Go?\nSebastian Spaink: That's a good question. No, I chose it because I wanted to write in the language. Because technically, Python is what OctoPrint, that software I mentioned, is written in, and that's the ecosystem... There's a lot of Go community work around it, but I was like, \"No. I'm gonna against the stream, do it in Go, regardless if it's the best choice or not. I'll find out at the end.\"\nIt's pretty nice to work -- you know, just all the benefits of using a Go binary that you can send around easily, and don't have to worry about Python versions, and setting virtual environments...\nNatalie Pistunovich: Interesting. You can cross-compile to all the different 3D printers.\nSebastian Spaink: Right.\nLinus Lee: Is there anything that using Go allows you to do that you wouldn't be able to do with Blender? I guess you could programmatically generate a bunch -- like, if you want a grade of spheres you can programmatically generate it... But yeah, what have you experimented with it that would be hard to do in Blender or another piece of software?\nSebastian Spaink: I am pretty much a novice as far as 3D modeling is concerned, so the reason why I used Blender to finalize the gopher -- because I couldn't really figure out how to make a nice hourglass shape for the gopher... You know, that perfect body, so it wasn't just to spheres attached to each other... [laughs] But I guess the benefit of using Go for it is the fact that you can now just send that piece of program to somebody and they can adjust it. It's easily shareable.\nI mean, right, you could send your blender files, share those as well, but I felt like the learning curve was also a little bit easier; the fact that it is just Go, and just defining shapes, while using the user interface for Blender is tricky. There's definitely a steep learning curve there. Have you used it before? Have you done 3D modeling?\nLinus Lee: I have personally not. I've looked at it... I had some friends -- my roommate in college was a mechanical engineering major, and he dabbled in it, he would make some stuff for me occasionally, and I always thought it was cool. But again, because of that learning curve, when you look at someone's computer when they're doing it and you're like \"I'll never be able to do that.\" That looks like a professional power tool kind of interface, and that scares you off a little bit. But if it's just a Go program, maybe I'll give it a shot.\nSebastian Spaink: Yeah, I definitely recommend it.\nAngelica Hill: I feel like I need to go buy myself a 3D printer now...\nSebastian Spaink: I also recommend that.\nAngelica Hill: ...and give it a go. [laughter]\nSebastian Spaink: Yeah, and there are surprisingly consumer-friendly as far as the price and the setup is concerned. You'll need space, I suppose, is the biggest thing. And patience.\nAngelica Hill: I'll just put it right in the middle of my lounge. It will be the centerpiece... And I'll just continuously churn out gophers.\nSebastian Spaink: That's the ideal setup. That's how it works on my house.\nAngelica Hill: Yeah. [laughter]\nLinus Lee: A thing that you alluded to earlier, from another question, was the debug cycle, which I imagine is a little slower than just running the code. I guess you can run it and look at the model inside Blender, or something like that... But do you ever have like a hardware debug cycle, where you print it and you're like, \"Oh, this looks bad\", and then you have to rewrite the program?\nSebastian Spaink: I kind of missed that question. Yeah, that's right... I don't know if there's a better way of doing it than just building it and running it and being like \"Well, it's a couple millimeters to the left\", and then scoot it over. A big advantage of using Blender, if you use their interface, you can just scoot it over, and you can see where it's supposed to land... But in the world space, I was definitely just guessing the coordinates. I'm definitely gonna mention that in my talk, where it's like, \"These numbers are made up.\" This was just me hoping for the best, and they ended up in the right spot... So yeah.\nAngelica Hill: Trial and error.\nSebastian Spaink: Right, yeah.\nDaniela Petruzalek: I had an interesting experience with that when I was writing some games. Also, you do a lot of guessing in terms of positioning things... So in the end, I ended up using Steve Francia's -- I don't remember now if it's Viper or Cobra; that library that helps load the configuration dynamically... So basically, every time I had something I need to set up a different thing on the screen, I used the dynamic configuration and it was reloading JSON files on the fly... And you just couldn't see anything, because the renderer was just updating the screen every single frame. I was just kind of automating my trial and error with dynamic configuration. I don't know if you thought about something... I'm not sure how fast is rendering, but in my case it was just one frame, so that was pretty fast.\nSebastian Spaink: [20:18] Yeah, it was pretty quick in the sense that there was like -- I was using the Slicer program to get it to the 3D printed format, and I just... You can reload it in there. It felt pretty hacky, but -- yeah, I'm sorry; what were you gonna say?\nAngelica Hill: I was gonna say \"Let's hear more.\" Let's go from 3D to 2D. Daniela, I would love to hear a little bit about -- you talked about some of your in-the-weeds, how you got it working, how you tested it... But what is your project, and how did it come to be? I would say, and I've said this to the group before, I have a very, very special place in my heart for this project, because when I was but a young gopher... Not even. When I was but a young newbie, dweeb, looking at the computer science world for a language that fit, I went to Gotham Go and saw you do your talk on this side project. And it got me so excited I went home and spent the entire weekend building it. And that was one of the main things; I was like, \"This is my language. This is so fun. I'm ready. Let me be a gopher.\"\nDaniela Petruzalek: Right. I love this attitude, and I'm really happy that it had such an influence because from the beginning, since people don't know my project yet... Basically, I wrote this tutorial which I call Pac-Man From Scratch, or Pac Go for short, because it's not a man, it's a gopher, maybe... And the idea is to rebuild the classical game of Pac-Man only using Go and the standard library; no external fancy packages. And in order to abstract the drawing function - because this tends to be the most complex thing in games, how you render it to a screen, and I didn't want to expose people to this level of complexity... We ended up using the terminal as your screen. And Cisgo supports Unicode. You can actually bring emojis in the terminal. So the entire board of the game is rendered using emojis, and using some clever tricks with ancy escape sequences. You can put colors, and draw walls, and things like that...\nThere are some things that Go makes really easy to do, especially -- for instance, if you want to separate your input handling from the main program, you can use a goroutine, and channels... So things like this in other languages - I tried to do this before in C++ and others, and you need to learn threads, you need to learn synchronization, all these more advanced concepts, but Go makes it really easy for a beginner to have a look, \"Oh, yeah.\" Maybe you don't even fully understand what a goroutine is or a channel is, but it's enough for you to get started and do something.\nThe whole idea of this project was to give the community something in terms of a tutorial, a starting point, a bit more interesting than building APIs. Because I know, APIs -- we ended up doing this for work. Why not having something more fun, that has visual feedback, so that you can see things moving on the screen? I don't know, for me it's magical, but maybe that's because I also -- the only reason why I'm in this industry now is because I love games, and I always wanted to work with games, and that was kind of like my \"Oh, yeah! I've never worked with games before, but this is my opportunity. I'll make something with games and Go.\" That's how it started.\nAngelica Hill: Yeah. And I think the beauty of it is exactly what you've just said, that people who are learning Go, whether from another language, or completely it's their first language, you go through that phase you're like going through all the Go tutorials, and you're trying to do this little app, and you're trying to print Hello World... But then you hit this ceiling where you're like, \"What do I do now? I know the basics. I wanna build something that feels like an accomplishment, that feels exciting, that feels like \"Oh! This is something I wanna show my friends, show my family, and be like \"Look, I can code now!\"\n[24:02] And this is fun, it's colorful; as you say, it gives you that visual feedback, and it gives you, as a beginner, that feeling of accomplishment, and like \"I did this. I've made it through that tutorial, and I accomplished this thing.\"\nI think the beauty of how you framed it is that you've really paid attention to making sure it is truly step by step, and it really does guide everyone through why you made the decision, how you did it, you provided the code so that you can look through... I'm waiting for your next game to come out. What's going on...?! [laughs]\nDaniela Petruzalek: Yeah, I've been a bit busy with life, and things... Definitely, there are more things coming your way, yeah. Stay tuned. I did actually a talk at GopherCon UK about my next project, which now is a card game. I'm rebuilding an old '80s card game that -- I can't even say it was popular where I came from. It was just the game we had when we were a child and we played that game.\nI couldn't find an international version of it. I only had a scan of the cards that I used to reference the game, but basically, I'm rebuilding it. But now I'm trying to be a bit more professional, if I can say that. Definitely, I can say that. Nothing close to being a professionally, but... I'm using this library called Ebiten, which is a proper game development library within Go by Hajime Hoshi. This guys is amazing. Thanks for writing Ebiten.\nYeah, so this work in progress - it's not very pretty now, but I have a functioning prototype, and the code is open source, but I didn't advertise it that much, because the game is ugly now. It's not very beginner-friendly. It was just kind of like a proof of concept, trying different things, learning everything as it goes... As it goes, I did that again. [laughter]\nAngelica Hill: It's hard not to say it. It's very easy to call into the pattern. So as you've been iterating on this project, as you've been building, and as you've been delving more into the world of games and programming for games, is Go a good language for these kinds of projects? Or was it that you already liked Go, and it was fun? Or in fact is Go interesting, good to play with, but there are other languages that may serve the gaming function better?\nDaniela Petruzalek: I think Go is a very good language, with some asterisks, some side-notes maybe... Because the traditional language for writing games if you are old-school like me is C++, and C, and things like that. I tend to see Go as an improved version of those languages, because it abstracts so much. You don't need to worry so much about memory management... You still need to worry a little bit about memory, but not as much as you had to in the past with these other types of languages. Of course, they also evolved, but I really like how Go is pretty straightforward, it has a simple syntax, very consistent across all different features of the language... It gives almost that feeling of a scripted language. It's very simple to do simple things, and I think that's the build of it. It also becomes very productive.\nThe problems come -- because Go is traditionally a systems language, it's not very popular in the gaming industry, you don't have a lot of library support, and things like that. The basics you have - you have SDL bindings, you have Ebiten and a few other gaming libraries, but it's not widespread, so you don't have a large community that can help you support it. But essentially, everything that you need to build a game, you have there. I love the language, and I think that's almost like a -- Sebastian said that as well, maybe Go was not the best option... But that was the language I wanted to work with, so that's kind of why I decided.\nBut overall, I think that you can do good games with Go, and even Ebiten - they are just recently publishing their first game on Nintendo Switch... So you can see, it can be used for real games, like real commercial games.\nBreak: [28:05]\nNatalie Pistunovich: Daniela, I'm so very curious, as somebody who knows nothing about game development - when you say \"gaming libraries\", what kind of tools do they give you? What do you need in a gaming library?\nDaniela Petruzalek: A lot of things, actually... But I would say the most basic ones are how do you handle inputs? When you're writing a game, you don't really want to care if the player has a keyboard, a gamepad, or anything else. You don't want to worry about specific drivers for different types of inputs. You want a game library to give you this for free. Once you know \"key was pressed\", you do your mappings into the thing.\nThe second thing is drawing to the screen, another good example. You don't really care about the low-level part of drawing to the screen, you just want to say \"plot my pixel there\", and that's it.\nNatalie Pistunovich: So like relative 10% down from the beginning of the screen, kind of...\nDaniela Petruzalek: Yeah. And I'm talking only about 3D; and 3D gets way more complex, but... Scaling operations, rotation... The kind of transformations you can do in an image. And also, sound is a huge thing. I don't want to write a music player. I should get this for free from my gaming library... Things like that. Maybe sometimes you will have some kind of artificial intelligence processor that you can just write an AI as in a script, and the engine will load that script and control your enemies, and things like that. So this is kind of support... So you can focus really on the content creation. Because what makes or breaks your game is really not necessarily the code, it's the art, it's the sound, it's your assets. Actually, it's all about your assets.\nLinus Lee: That resonates with me a lot, actually. I'm not a big gamer, but occasionally I've come across little Steam games that I thought were really beautiful and well done. At times, I've had the thought of \"Oh, maybe I should try to build a game of my own\", and the thing that I always bump against -- so I can write the logic, I can probably learn to use one of the game engines and try to make something that's interactive and do the things that I wanna do, but the things that make a video game really compelling is all the art, and all the sounds, and the design... That requires making 3D models, which as we discussed, is difficult, and doing art, and having -- even just building a storyline behind it, and all the character design, and things like that... That's a whole other art that's outside of software.\nDaniela Petruzalek: Yeah. There's a huge iceberg of game development that's about -- the presentation is just a thin layer, but you have assets, in terms of art, sound effects and music. It's also -- it either kills your game, or it will give amazing results.\nBut also, the whole part about game design, of how your game mechanics work, like what are the winning scenarios, what are your objectives, how can you make that thing rewarding for the player, so they will be engaged and really enjoy playing your game? How can you balance your game? This is a decent amount of challenge, plus reward... So these are the hard parts, and also, my brain is kind of -- I'm really bad at this, and I'm trying to get better, but also partnering with the right people can definitely help a lot.\nNatalie Pistunovich: I have a great idea for your game, Daniela, to make it pretty rewarding... You can use Sebastian's work and 3D print the cards. [laughs]\nDaniela Petruzalek: I think that's a great idea.\nNatalie Pistunovich: [32:10] You know, you always feel paper cards in the hand, and once you'll feel more chunkier, reminding of like a phone, it will be very interesting. You'll have to pay more attention when you do that.\nSebastian Spaink: Revolutionary.\nNatalie Pistunovich: [laughs]\nAngelica Hill: Talking about something that's very challenging, engaging and rewarding... Linus.\nLinus Lee: Yes.\nAngelica Hill: Let's hear a little bit about your awesome project.\nLinus Lee: Yeah, so my project is called Oak. It's a toy programming language, is what that means. It's a programming language that you can use to write things like web servers, and little apps, and command line interfaces, and things like that... But it's a toy language, so it's not something that you're gonna use at work, or to build a production service, for lots of reasons. But it's dynamically-typed scripting language, it looks a little bit like JavaScript, it works a little bit like Lua if you've used it... But it's a Go program. So it's a language that's written in Go. And what that means is that when you run the Oak CLI to start up a repl, or to run a file, that thing that is running the file is a Go program. But the program's source code that it's running is written in a language that I made up, called Oak... If that makes any sense. It's a little bit sort of recursive.\nSo part of it was designing the actual syntax and semantics of what the language is gonna be able to do, how it works, what are the types, what are the values, what are the things you can do, how do you define functions, and things like that... And the other part is actually implementing, in Oak's case, the interpreter, that actually takes the syntax, the program you've written, and does the thing that the program is supposed to do... And also, incidentally, other things, like telling you errors, and concurrency, and lots of other things that you might encounter as the interpreter.\nNatalie Pistunovich: How did you come up with the idea to do this in Go? Did you say \"I want to learn Go, and I want to learn Go by creating a new language\"?\nLinus Lee: It was a mix, actually. So before Oak, there was Ink, which is the conceptual predecessor to Oak. They're very similar languages, but Ink was the first toy language that I made. I made it after having gone through a tutorial on how to make a basic Lisp interpreter, and I wanted to make something that was a little more usable, and had the syntax that I wanted... Because everyone, always, when they first learn programming, they're like \"I really like this language, but I wish this keyword said something different\", or the symbol was a different symbol... And it was my chance to play God with my own language.\nAt that point, I was mostly proficient with only the really dynamic languages, like JavaScript and Python, so I needed to learn a compiled language that was lower-level, to be able to build an interpreter that was actually usable.\nGo is not the typical language that you would use for such a task. You usually use like C++, or more increasingly common is Rust, or other languages like that. But as I've noted before, it was harder for me to wrap my head around those at the time, than it was for me to learn Go. Go was low-level enough for me to be able to build an interpreter. Ink was my first learning Go project, and simultaneously I was also trying to learn how to build a programming language.\nSebastian Spaink: That's super-cool. Has anybody made anything real cool out of your programming language Ink?\nLinus Lee: I have... And then other people have used some of the stuff that I've built. Actually, one thing that's relevant for the Go community is - if you guys are familiar with the Go By Example website, where it sort of walks you through Go, and gives you different examples of how different parts of Go works... A guy named Andrew -- man, his name is escaping me now. But Andrew-something - we've talked on the phone before, but he made an Ink By Example site. And just as Go By Example is written in Go, and Go compiles the website, Ink By Example is written in Ink, so it compiles itself... And Ink has its own syntax highlighter, and code formatter, and things like that.\nSo the website is inspired by Go By Example, but it's a website for Ink that someone else made, that isn't me, which was super-cool to see that there's another user for the language. And then on top of Ink, I've made a bunch of my own personal apps, like Twitter clients, and notes apps, and things like that, that I use day to day.\nSebastian Spaink: That's very cool.\nDaniela Petruzalek: You mentioned Lua in your opening statement... I was just wondering, because Lua is very common in the game development community, for AI scripts.\nLinus Lee: Right.\nSebastian Spaink: [36:05] Would you see your language could be used for the same type of use, like writing scripts for AIs, or things like that?\nLinus Lee: Yeah, that's a great question. So a lot of the domain of tool languages is actually fr embedding in other programs, and Lua is a great example of that. I think there's some specific things about Lua that make it really great for embedding in a game, specifically. The things that come to mind are -- Lua is a really small language, it's written in C, it's pretty readable, so it's fairly easy to embed in terms of just like the technical work involved, to embed it into another program.\nThe other thing that makes Lua unique is that it has features of the language and of the interpreter that make it easy for you to fit it into another larger program. So Lua has -- I forget what it's called, but it has like a type that is supposed to be like an opaque type, that just wraps something else from the host program... So if you have a game, and you have like a C struct that represents a character, or an object, or something, you can just wrap that and expose it to Lua with some APIs. It's also fairly easy to define foreign function interfaces for Lua code so people could call C functions... And I think that's what makes Lua really great for game development.\nOak, in theory, has those things, minus the C FFI, but because it's embedded inside Go, anything that includes Oak has to also include the Go runtime, which makes it a little heavier, and is more opinionated.\nNatalie Pistunovich: How can the community contribute to these languages, to Ink and to Oak? Are you looking for documentation, code contributions...?\nLinus Lee: Yes, for sure. So one of the reasons I made Oak was that I made Ink, and then I used it for a couple of years to build stuff... And it was usable, because I made stuff with it; by definition, it was usable. But it was not very good. The language was kind of tough to use, the interpreter sucks a little bit because of the particular ways...\nWhen you learn to build an interpreter in school or in a course, there are specific things that you spend a lot of time on, like parsing and compiling... And there's things that you don't spend as much time on, that it actually turns out are really important and hard to get right... And one of those things is error handling. If you're trying to get other people to use your language, most of the time they're gonna be spending initially is going to be writing incorrect programs and getting errors. To do error reporting correctly, you have to gather a lot of information about the runtime of a program, like where it's happening, what's causing it, and be able to give users really helpful errors. And none of the tutorials cover that properly. Mistakes like that accumulated over time, and eventually I went and wrote Oak, and fixed a lot of those. Ink isn't as usable as Oak. If you wanna check things out, I'd check out Oak. I'm still sort of tinkering away at it as a solo project, but if want to try you're welcome to try it. And then if you have any problems you find with it, or bugs, filing those would be super-helpful.\nIf you have opinions on how Oak should work differently - I have my own opinions, and the point of Oak is to manifest them... But if you have your own opinions, it's a Go project; it's not that complicated, you can probably read through it, and come to my talk to figure out how it works. And it's only a few thousand lines, so you could fork it, make it into your own, change all the keywords and all the syntax, and make your own language out of it, too.\nAngelica Hill: That's awesome. Tempting. How about Daniela - if people wanna help, wanna get involved, wanna live their best PacGo life, how do they do that?\nDaniela Petruzalek: So I have the GitHub repo for PacGo is github.com/danicat/pacgo. We already had actually a lot of contribution from the community. I think I've built it to step eight, and I think we now we have step ten, or eleven, or something like that. So people definitely were inspired and started creating new content for it. It's a bit abandoned now, from my perspective. I wish I could have supported it better. So things like Go modules, testing, are some topics that were not covered in the traditional workshop... But I think if people are willing to contribute, that would be amazing. A chapter on Go modules, a chapter on testing, things like that. That would be great.\nAngelica Hill: Sebastian, how do we contribute? How do we help? How do we get involved?\nSebastian Spaink: Yeah, I guess I'm mostly thinking of using Oak to write a Pac-Man game now... [laughter] But yeah, I guess I've got my gopher model uploaded, so you're welcome to download and 3D print that... That helps me, just seeing more gophers out in the world... But then part of the thing I worked on was a plugin for the Telegraf project that I'm working on now as a full-time maintainer, to interact with OctoPrint. And that's just an open source repository, you're welcome to do whatever you want with it; it's written in Go. Maybe extend it, add more features to it.\nAngelica Hill: Awesome.\nNatalie Pistunovich: Cool. Well, that's inspiring, and also gives us all ideas on what can we do in our free time. Okay, time for Unpopular Opinions.\nJingle: [40:27] to [40:43]\nNatalie Pistunovich: Okay, so you know the rules... You have the stage to tell us what is your unpopular opinion. It does not have to be about your project, about tech, about anything at all. It can be about any theme. And we will then go and ask on Twitter to see if your unpopular opinion is really unpopular, or yes-popular. Linus, would you like to start?\nLinus Lee: Sure, I'll take it. My unpopular opinion is that -- it's actually probably a more popular opinion, but the way that I'm phrasing it I think is important... I think it's an accident of history that we don't expect every computer user to be able to program. I've been watching a lot of... And this is gonna reveal my age now, but I've been watching what I consider to be older TV programming about computers - computer programs that were coming out in the mid '80s, early '90s - and it's kind of astonishing how all those programs sort of expect the user to buy the program and then use macros or scripts to program it to fit their use case. Things like databases, or word processors... There's tons and tons of support for just -- you buy the thing, and then to make it useful, you program it. And to a certain extent, all these consumers of software expect it to program a little bit and know how computers work and customize it... And it's a little sad, I think, that we don't expect that of users anymore, and we expect them to just take the product and use it.\nI wish there was more software that expected and taught people to think in terms of programming and try to customize their software to work the way that they want it to.\nNatalie Pistunovich: Okay. Sebastian.\nSebastian Spaink: Yeah. I guess my unpopular opinion is I think that if your open source project has a hand-drawn logo on it, then it's a good open source project, and it can be trusted. So you can just it by the cover.\nNatalie Pistunovich: Cool. Hey, Daniela...\nDaniela Petruzalek: Okay, I think my unpopular opinion will make me the most unpopular person in GopherCon this year... Sorry, guys, but I don't think Go really needs generics. [laughter]\nNatalie Pistunovich: What a mic drop to the end of the show. Thank you, Daniela. We knew you'd say that, maybe... That's why we asked you to go last. But yeah, that's a brave choice.\nTo wrap this up, thanks everyone for your interesting insights and sharing about your fun projects, and for talking about that at GopherCon. Thanks everybody who tuned in and enjoyed the talks, and see your around on Discord.\nLinus Lee: Thanks for having us.\nSebastian Spaink: Yeah, thanks.\nAngelica Hill: Thank you to our awesome host, Natalie. Awesome as always."
   }
]